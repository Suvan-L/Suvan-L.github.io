<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Suvan</title>
  <subtitle>Bolgs</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suvan-l.github.io/"/>
  <updated>2017-09-22T08:15:59.562Z</updated>
  <id>http://suvan-l.github.io/</id>
  
  <author>
    <name>liushuwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyProject_neubbs论坛</title>
    <link href="http://suvan-l.github.io/2017/09/21/MyProject_neubbs%E8%AE%BA%E5%9D%9B/"/>
    <id>http://suvan-l.github.io/2017/09/21/MyProject_neubbs论坛/</id>
    <published>2017-09-21T10:11:26.000Z</published>
    <updated>2017-09-22T08:15:59.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;东软校内BBS,Github地址<a href="https://github.com/nuitcoder/neubbs" target="_blank" rel="external">https://github.com/nuitcoder/neubbs</a></p>
<p>目录</p>
<ol>
<li>数据库设计<br><br></li>
</ol>
<hr>
<p><br><br><br></p>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="1-数据库设计"><a href="#1-数据库设计" class="headerlink" title="1. 数据库设计"></a>1. 数据库设计</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">CREATE DATABASE `neubbs`</div><div class="line">    DEFAULT CHARACTER SET utf8</div><div class="line">    COLLATE utf8_general_ci;</div><div class="line"></div><div class="line">-- 删除原有表</div><div class="line">DROP TABLE IF EXISTS `forum_user`;</div><div class="line">DROP TABLE IF EXISTS `forum_topic`;</div><div class="line">DROP TABLE IF EXISTS `forum_topic_content`;</div><div class="line">DROP TABLE IF EXISTS `forum_topic_reply`;</div><div class="line"></div><div class="line"></div><div class="line">-- 新建表</div><div class="line">CREATE TABLE forum_user(</div><div class="line">     fu_id INT  AUTO_INCREMENT PRIMARY KEY,</div><div class="line">     fu_name VARCHAR(15) UNIQUE KEY,</div><div class="line">     fu_password VARCHAR(15) NOT NULL,</div><div class="line">     fu_sex  VARCHAR(2),</div><div class="line">     fu_birthday VARCHAR(20),</div><div class="line">     fu_phone VARCHAR(15),</div><div class="line">     fu_email  VARCHAR(50)  NOT NULL,</div><div class="line">     fu_address VARCHAR(50),</div><div class="line">     fu_createtime DATETIME DEFAULT NOW()</div><div class="line"> )ENGINE = innoDB;</div><div class="line"></div><div class="line"></div><div class="line">CREATE TABLE forum_topic(             </div><div class="line">    ft_id INT  AUTO_INCREMENT PRIMARY KEY,       </div><div class="line">    fu_id INT NOT NULL ,</div><div class="line">    ft_category VARCHAR(20) NOT NULL,   </div><div class="line">    ft_title VARCHAR(50) NOT NULL,                      </div><div class="line">    ft_comment VARCHAR(10) default &apos;0&apos;,         </div><div class="line">    ft_lastreplytime DATETIME,</div><div class="line">    ft_createtime  DATETIME DEFAULT NOW()   </div><div class="line">)ENGINE = innoDB;</div><div class="line"></div><div class="line"></div><div class="line">CREATE TABLE forum_topic_content(             </div><div class="line">    ftc_id INT  AUTO_INCREMENT  PRIMARY KEY,     </div><div class="line">    ft_id INT,</div><div class="line">    ftc_content LongText NOT NULL,  </div><div class="line">    ftc_read VARCHAR(10) default &apos;0&apos;         </div><div class="line">)ENGINE = innoDB;</div><div class="line"></div><div class="line">CREATE TABLE forum_topic_reply(             </div><div class="line">    ftr_id INT  AUTO_INCREMENT  PRIMARY KEY,     </div><div class="line">    fu_id INT,</div><div class="line">    ft_id INT,</div><div class="line">    ftr_content VARCHAR(150) NOT NULL,</div><div class="line">    ftr_agree VARCHAR(10) default &apos;0&apos;,</div><div class="line">    ftr_oppose VARCHAR(10) default &apos;0&apos;,</div><div class="line">    ftr_createtime  DATETIME DEFAULT NOW()</div><div class="line">)ENGINE = innoDB;</div></pre></td></tr></table></figure>
<p><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;东软校内BBS,Github地址&lt;a href=&quot;https://github.com/nuitcoder/neubbs&quot; ta
    
    </summary>
    
      <category term="MyProject" scheme="http://suvan-l.github.io/categories/MyProject/"/>
    
    
      <category term="MyProject" scheme="http://suvan-l.github.io/tags/MyProject/"/>
    
  </entry>
  
  <entry>
    <title>个人简历</title>
    <link href="http://suvan-l.github.io/2017/09/07/liushuwei/"/>
    <id>http://suvan-l.github.io/2017/09/07/liushuwei/</id>
    <published>2017-09-07T05:32:28.000Z</published>
    <updated>2017-09-07T06:05:01.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个人基本信息"><a href="#个人基本信息" class="headerlink" title="个人基本信息"></a>个人基本信息</h2><ul>
<li>姓名：刘淑玮</li>
<li>性别： 男</li>
<li>学历：本科(2018应届毕业生)</li>
<li>专业：软件工程</li>
<li>院校：广东东软学院</li>
<li>电话:   13682308665</li>
<li>邮箱:   liushuwei0925@gmail.com</li>
<li>Github: <a href="https://github.com/Suvan-L" target="_blank" rel="external">https://github.com/Suvan-L</a></li>
<li>个人博客:<a href="http://www.suvan.net.cn/" target="_blank" rel="external">http://www.suvan.net.cn/</a></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="相关能力"><a href="#相关能力" class="headerlink" title="相关能力"></a>相关能力</h2><ol>
<li>掌握Java语言,熟悉集合框架,网络socket,多线程编程</li>
<li>熟悉基本数据结构与算法设计</li>
<li>熟练使用servlet/jsp/Spring/Mybatis</li>
<li>熟悉MySQL数据库,Linux基本操作</li>
<li>了解Web前端知识html/css/js/ajax,jQuery,BootStrap</li>
</ol>
<hr>
<p><br><br></p>
<h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><ul>
<li>广州博纳信息技术有限公司<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">软件工程师</div><div class="line">    2016.06-2016.08(公司)</div><div class="line">    2016.09- 2017.03(在校远程)</div><div class="line"></div><div class="line">    参与燕云DaaS项目,负责完成对指定地区数据目标的信息爬取;</div><div class="line">    参与数据接口模版的设计与优化;</div><div class="line">    根据业务需求，对数据进行筛选,持久化处理,并编写相应接口文档，线上测试,定期维护;,</div><div class="line">    负责3人技术团队每日数据审查,项目进度汇总</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><br><br></p>
<h2 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h2><ul>
<li>多媒体博客<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(2016.09大二小学期)</div><div class="line"></div><div class="line">负责博客的后台开发与数据库设计，</div><div class="line">基于Servlet+jsp+ajax+MySQL,无框架开发,</div><div class="line">实现博文增删查改，收藏,点赞,刷新,好友通讯,管理员模块可视化界面管理用户,</div><div class="line">用户相册, 用户注册邮箱验证,音乐与视频的上传与实时播放</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<ul>
<li>个人博客<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(2017.05-至今)</div><div class="line"></div><div class="line">参考最初使用Github+Hexo搭建博客的理念,尝试自主建设个人博客，从前端界面设计,至后台功能完善,期望将至今所学以及新的技术引入其中,并不断重构与优化！</div><div class="line">        前端Bootstrap+Layui+jquery,</div><div class="line">        后台:Spring+SpringMVC+MyBatis,</div><div class="line">        项目管理Maven+Github.</div><div class="line">        数据库MySQL,</div><div class="line">        服务器Tomcat-8.0.41</div><div class="line">        云服务器    Centos 6 x86  与 Windows Server 2012 R2 数据中心版 64位中文版</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><br><br></p>
<h2 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h2><ul>
<li>爱好足球,跑步,阅读,热爱编程</li>
<li>对技术有热情,有良好的编程思维与编程习惯</li>
<li>抗压能力强，不畏挑战,</li>
<li>拥有良好的团队协作能力与快速学习能力</li>
<li>个人理念”高调做事,低调做人”<br><br></li>
</ul>
<hr>
<p><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;个人基本信息&quot;&gt;&lt;a href=&quot;#个人基本信息&quot; class=&quot;headerlink&quot; title=&quot;个人基本信息&quot;&gt;&lt;/a&gt;个人基本信息&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;姓名：刘淑玮&lt;/li&gt;
&lt;li&gt;性别： 男&lt;/li&gt;
&lt;li&gt;学历：本科(2018应届毕业生)&lt;
    
    </summary>
    
      <category term="Life" scheme="http://suvan-l.github.io/categories/Life/"/>
    
    
      <category term="Life" scheme="http://suvan-l.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Life_电影记录</title>
    <link href="http://suvan-l.github.io/2017/09/03/Life_%E7%94%B5%E5%BD%B1%E8%AE%B0%E5%BD%95/"/>
    <id>http://suvan-l.github.io/2017/09/03/Life_电影记录/</id>
    <published>2017-09-03T15:26:50.000Z</published>
    <updated>2017-09-05T05:42:47.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录"><a href="#一-目录" class="headerlink" title="一.目录"></a>一.目录</h1><ol>
<li>完整看过<br>2.观看段短片影评<br><br></li>
</ol>
<hr>
<p><br><br><br><br><br></p>
<h1 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h1><h2 id="1-完整看过"><a href="#1-完整看过" class="headerlink" title="1. 完整看过"></a>1. 完整看过</h2><p>列表<br>1.肖申克的救赎</p>
<hr>
<p><br><br></p>
<h2 id="2-观看段短片影评"><a href="#2-观看段短片影评" class="headerlink" title="2.观看段短片影评"></a>2.观看段短片影评</h2><hr>
<p><br><br></p>
<hr>
<p><br><br><br><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录&quot;&gt;&lt;a href=&quot;#一-目录&quot; class=&quot;headerlink&quot; title=&quot;一.目录&quot;&gt;&lt;/a&gt;一.目录&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;完整看过&lt;br&gt;2.观看段短片影评&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br
    
    </summary>
    
      <category term="Life" scheme="http://suvan-l.github.io/categories/Life/"/>
    
    
      <category term="Life" scheme="http://suvan-l.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Hexo_使用Hexo+GitHub快速搭建个人博客【完善版】</title>
    <link href="http://suvan-l.github.io/2017/08/24/Hexo_%E4%BD%BF%E7%94%A8Hexo+GitHub%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E3%80%90%E5%AE%8C%E5%96%84%E7%89%88%E3%80%91/"/>
    <id>http://suvan-l.github.io/2017/08/24/Hexo_使用Hexo+GitHub快速搭建个人博客【完善版】/</id>
    <published>2017-08-24T05:45:08.000Z</published>
    <updated>2017-09-08T09:01:03.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录"><a href="#一-目录" class="headerlink" title="一.目录"></a>一.目录</h1><p>1.注册GitHub账户<br>2.在GitHub上建立仓库<br>3.安装git和node.js<br>4.Hexo安装<br>5.配置SSH Key【让本地git项目与远程的GitHub建立联系】<br>6.本地测试Hexo<br>7.域名解析<br>8.博文模版<br>9.hexo主题目录结构<br>10.修改博客主题<br>11.安装Category插件<br>12.可能遇到的一些问题</p>
<hr>
<p><br><br><br><br><br></p>
<h1 id="二-搭建步骤"><a href="#二-搭建步骤" class="headerlink" title="二.搭建步骤"></a>二.搭建步骤</h1><h2 id="1-注册GitHub账户"><a href="#1-注册GitHub账户" class="headerlink" title="1.注册GitHub账户"></a>1.注册GitHub账户</h2><p>GitHub官网：<a href="https://github.com访问GitHub,注册十分简单，【一定要记住注册时使用的邮箱，" target="_blank" rel="external">https://github.com访问GitHub,注册十分简单，【一定要记住注册时使用的邮箱，</a><br>　因为 GitHub 上很多通知都是通过邮箱的。】</p>
<blockquote>
<p>申请成功后，在GitHub官网上登录，并验证邮箱即可。</p>
</blockquote>
<hr>
<p><br><br></p>
<h2 id="2-在GitHub上建立仓库"><a href="#2-在GitHub上建立仓库" class="headerlink" title="2.在GitHub上建立仓库"></a>2.在GitHub上建立仓库</h2><p>&emsp;与 GitHub 建立好连接之后，就可以方便的使用它提供的 Pages 服务，</p>
<p>GitHub Pages 分两种:</p>
<ul>
<li>用你的GitHub用户名建立的username.github.io这样的用户&amp;组织站点，</li>
<li>依附项目的Pages。</li>
</ul>
<p>【想建立个人博客是用的第一种，形如username.github.io这样的可访问的站点， 每个用户名下面只能建立一个,向用户首页一样】</p>
<p>创建仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(1)浏览器进入https://github.com</div><div class="line">(2)点击右下角的 +New Repository</div><div class="line">　　找到Repository name </div><div class="line">　　　     ----按照username.github.io格式(username是你的用户名，就是Owner一样的)</div><div class="line">    Description</div><div class="line">　　      ----仓库描述随便写</div><div class="line">    </div><div class="line">    选择Public</div><div class="line"></div><div class="line">    点击Create repository创建</div><div class="line"></div><div class="line"></div><div class="line">成功！</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br></p>
<h2 id="3-安装git和node-js"><a href="#3-安装git和node-js" class="headerlink" title="3.安装git和node.js"></a>3.安装git和node.js</h2><ul>
<li><a href="https://git-for-windows.github.io/" target="_blank" rel="external">git for windows</a></li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">node.js官网</a><br><br></li>
</ul>
<p>流程：<br>1.安装git(windows版本是gitbash)<br>2.安装node.js,包含了npm<br>3.任意路径,右键开启git bash,输入node -v和npm -v查看是否安装成功<br>4.在node.js目录下新增两个文件夹node_cache(缓存)和node_global(全局)<br><br></p>
<hr>
<p><br><br></p>
<h2 id="4-Hexo安装"><a href="#4-Hexo安装" class="headerlink" title="4.Hexo安装"></a>4.Hexo安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;以管理员的身份启动命令行【全局任意地方】,使用npm命令安装hexo-cli包</div><div class="line">        npm install hexo-cli -g </div><div class="line"></div><div class="line">&lt;2&gt;新建Hexo目录,命令行进入,部署npm环境</div><div class="line">    npm install   </div><div class="line"></div><div class="line">&lt;3&gt;找到hexo脚本存放目录(我的是C:\Program Files\nodejs\node_global)</div><div class="line">    将其添加环境变量到Path</div><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">5.配置SSH Key【让本地git项目与远程的GitHub建立联系】</div><div class="line">-------------</div></pre></td></tr></table></figure>
<p><1>开启gitbush配置用户名密码<br>            git config –global user.name “suvan”<br>            git config –global user.email “13202405189@163.com”</1></p>
<p><2>生成SSH密钥<br>        ssh-keygen -t rsa -C “13202405189@163.com”<br>        在C:\Users\Liu.ssh 的id_rsa即为公钥　    </2></p>
<p><3>进入Gihub设置密钥<br>            a.<a href="https://github.com/登录自己Github" target="_blank" rel="external">https://github.com/登录自己Github</a><br>            b.右上角小图标Settings  ·~~~ 右边SSH and GPG Keys<br>            c.SSH keys 点击 New SSH Key<br>            d.Title随便填,将id_rsa的内容复制到Key中,点击Add SS Keys<br>            e.点击蓝色小字体generatings SSH keys<br>            f.点击倒数第二个Testing your SSH connection<br>            g.开启Gitbash输入<br>　　　     ssh -T git@github.com<br>                根据提示如入yes,最后显示<br>                Hi Suvan-L! Your’ve successfully authenticated,but GitHub does not provide shell access<br>                表示验证成功【.ssh目录多出一个known_hosts文件】 </3></p>
<p><4>将hexo根目录下的_config.yml配置文件修改为SSH连接【无密码】<br>            进入<a href="https://github.com/Suvan-L/Suvan-L.github.io" target="_blank" rel="external">https://github.com/Suvan-L/Suvan-L.github.io</a><br>            点击clone or download<br>            选择Use SSH<br>                复制连接git@github.com:Suvan-L/Suvan-L.github.io.git</4></p>
<pre><code>修改至config.yml文件内的responsitory
deploy:
        type: git
        repository: git@github.com:Suvan-L/Suvan-L.github.io.git
        branch: master
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">6.本地测试Hexo</div><div class="line">---------------</div></pre></td></tr></table></figure>
<p><1>以管理员模式启动cmd<br>　　　 e:<br>　　　 cd Hexo   </1></p>
<p><2>可输入命令</2></p>
<pre><code>hexo clean   清除public目录
</code></pre><p>　　　hexo generate[hexo -g]  —生成静态页面（生成静态页面）</p>
<pre><code>hexo deploy[hexo -d]  部署到gitHub
</code></pre><p>　　<br>　       hexo server[hexo -s]   —启动本地服务，进行文章预览调试<br>　  　　　　    （ctrl+c 然后根据提示输入y退出）<br>            浏览器中地址输入：<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 查看是否可以显示预览页面<br>            需要下载本地服务器模块<br>                1&gt;下载server模块<br>                    npm install hexo-server</p>
<pre><code>注意：如果请求localhost:4000无反应
    可尝试
        a.切换端口号 hexo server -5000
        b.使用127.0.0.1:4000
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">7.域名解析</div><div class="line">---------------</div></pre></td></tr></table></figure>
<p>腾讯云服务器<br>    域名解析 -&gt; 添加记录</p>
<pre><code>记录类型 主机记录 记录值
 CNAME    www      Suvan-L.github.io.
</code></pre><p>A.在hexo/source,新建CNAME文件【注意，没有扩展名】<br>    里面添加www.liushuwei.cn   -&gt; 保存 -&gt;使用gitshell部署到Github</p>
<p>B.直接在Github的 Suvan-L.github.io/CNAME<br>    添加www.liushuwei.cn    -&gt; 提交</p>
<p>注意：<br>    1.只能有一个域名指向,Suvan-L.github.io/CNAME中默认选定第一个域名，其余无效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">8.博文模版</div><div class="line">----------------------</div></pre></td></tr></table></figure>
<p>　　  顶端的格式是这样的(注意，冒号后面要+空格)</p>
<pre><code>---
title: windows常用命令        -------【博文标题】
date: 2016-04-16 09:14:47     -------【创建时间】
tags: [Hexo,Next]             -------【标签】
categories: Hexo              -------【分类】
---


  ......正文内容
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">9.hexo主题目录结构</div><div class="line">----------------</div></pre></td></tr></table></figure>
<p>创建 Hexo 主题非常容易，您只要在 themes 文件夹内，新增一个任意名称的文件夹，并修改 _config.yml 内的 theme 设定，即可切换主题。一个主题可能会有以下的结构：</p>
<pre><code>.
├── _config.yml
├── languages
├── layout
├── scripts
└── source
</code></pre><p>config.yml<br>    主题的配置文件。修改时会自动更新，无需重启服务器。<br>languages<br>    语言文件夹。请参见 国际化 (i18n)<br>layout<br>    布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建 Swig 模板引擎，您可以另外安装插件来获得 EJS、Haml 或 Jade 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如：<br>layout.ejs   - 使用 EJS<br>layout.swig  - 使用 Swig您可参考 模板 以获得更多信息。</p>
<p>scripts<br>    脚本文件夹。在启动时，Hexo 会载入此文件夹内的 JavaScript 文件，请参见 插件 以获得更多信息。</p>
<p>source<br>    资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 _（下划线线）或隐藏的文件会被忽略。</p>
<pre><code>如果文件可以被渲染的话，会经过解析然后储存到 public 文件夹，否则会直接拷贝到 public 文件夹。
发布
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">10.修改博客主题</div><div class="line">---------------</div><div class="line">&amp;emsp;　Hexo 有两份主要的配置文件（_config.yml），一份位于站点根目录下，另一份位于主题目录下。</div><div class="line">为了描述方便，在以下说明中，将前者称为 站点配置文件，后者称为 主题配置文件。</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">参考资料</div><div class="line">+ [NexT主题基本配置与使用](http://theme-next.iissnan.com/getting-started.html)</div><div class="line">+ [hexo的next主题个性化配置教程](https://segmentfault.com/a/1190000009544924)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">过程</div></pre></td></tr></table></figure>
<p>A.下载 NexT 主题,使用 Git Shell 进入 Hexo 文件夹，输入以下两条命令： cd Hexo<br>  git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next</a> themes/next<br>        （GitHub网址）（在Hexo根目录下下的themes文件夹中，创建一个新的文件夹next）</p>
<p>B.启用NexT主题<br>    下载完成后，打开 站点配置文件(Hexo目录下的_config.yml)，<br>    找到 theme 字段，并将其值更改为 next<br>    【注意：这个是themes目录下的next文件夹的名字）（/Hexo/themes）】</p>
<p>C.选择样式<br>    NexT默认的样式其实也比较丑，幸好作者提供了一款十分漂亮的样式:Mist。启用 Mist 很简单，仅需在主题配置文件_（config.yml）中<br>    将 #scheme: Mist 前面的 # 注释去掉即可。<br>    菜单设置 （第60行）</p>
<p>D.推荐主题[连接]<br>    　Cover- A chic theme with facebook-like cover photo<br>　　  Oishi- A white theme based on Landscape plus and Writing.<br>　　  Sidebar- Another theme based on Light with a simple sidebar<br>　　  TKL- A responsive design theme for Hexo. 一个设计优雅的响应式主题<br>　　  Tinnypp- A clean, simple theme based on Tinny<br>　　  Writing- A small and simple hexo theme based on Light<br>　　  Yilia- Responsive and simple style 优雅简洁响应式主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">11.安装Category插件</div><div class="line">----------------</div></pre></td></tr></table></figure></p>
<p>A.下载插件<br>    Hexo官网，<a href="https://hexo.io/" target="_blank" rel="external">https://hexo.io/</a><br>　　选择Plugins<br>　　      Search（搜索） 输入https:category</p>
<pre><code>点击下面这个
hexo-generator-category
Category generator plugin for Hexo.
#official #generator #category
</code></pre><p>B.进入Github页面，拉到最下，<br>根据教程下载插件<br>　　   打开Git shell<br>　　       进入Hexo文件夹<br>　　   输入<br>　　　　　　　　npm install hexo-generator-category –save<br>　　　　　　　　　　—-&gt;下载插件</p>
<p>c.然后打开资源管理器，找到Hexo文件夹<br>选择根目录下，站点配置文件（_config.yml）<br>打开<br>　　　　加入<br>        category_generator:<br>        per_page: 10            ——-&gt;设置分页显示的文章数量<br>```</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="12-可能遇到的一些问题"><a href="#12-可能遇到的一些问题" class="headerlink" title="12.可能遇到的一些问题"></a>12.可能遇到的一些问题</h2><ol>
<li>master分支只能建一个这样的页面，这算是你的GitHub用户首页</li>
<li>这个首页username.github.io的username和你的用户名相同（GitHub一个用户只有一个用户名）否则会浏览器输入后会一直显示404</li>
<li>先安装git,在安装node.js(内含npm),否则git无法检测出node.js<br>4.以管理员身份启动cmd或者camder,因为有些需要在C盘创建目录需要权限<br>6.任意路径都可以使用npm命令,安装node.js时默认配置了全局变量<br>7.gitbash,gitshell,cmd,cmder都可以用于来使用hexo,不过方式不同<br>5.可参考链接<a href="https://www.zhihu.com/question/21193762" target="_blank" rel="external">使用hexo，如果换了电脑怎么更新博客？</a>和部署问题<a href="https://www.zhihu.com/question/38219432" target="_blank" rel="external">有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？</a></li>
</ol>
<hr>
<p><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录&quot;&gt;&lt;a href=&quot;#一-目录&quot; class=&quot;headerlink&quot; title=&quot;一.目录&quot;&gt;&lt;/a&gt;一.目录&lt;/h1&gt;&lt;p&gt;1.注册GitHub账户&lt;br&gt;2.在GitHub上建立仓库&lt;br&gt;3.安装git和node.js&lt;br&gt;4.Hexo安装&lt;
    
    </summary>
    
      <category term="Hexo" scheme="http://suvan-l.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://suvan-l.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Redis_入门</title>
    <link href="http://suvan-l.github.io/2017/07/11/Redis_%E5%85%A5%E9%97%A8/"/>
    <id>http://suvan-l.github.io/2017/07/11/Redis_入门/</id>
    <published>2017-07-11T10:04:59.000Z</published>
    <updated>2017-08-23T12:24:03.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录"><a href="#一-目录" class="headerlink" title="一.目录"></a>一.目录</h1><p>目录<br>1.NoSQL介绍<br>2.Redis概述<br>3.Redis操作命令<br>4.Jedis连接<br>5.Redis的数据结构<br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h1 id="二-内容"><a href="#二-内容" class="headerlink" title="二.内容"></a>二.内容</h1><h2 id="1-NoSQL介绍"><a href="#1-NoSQL介绍" class="headerlink" title="1.NoSQL介绍"></a>1.NoSQL介绍</h2><p>NoSQL(Not Only SQL)</p>
<ul>
<li>非关系型数据库</li>
<li>高并发读写(High performance)</li>
<li>海量数据的高效率存储和访问(Huge Storage)</li>
<li>高可扩展性和可用性(High Scalability &amp;&amp; High Availability)</li>
<li>特点【易扩展,大数据,高性能,灵活的数据模型,高可用】<br><br></li>
</ul>
<p>NoSQL数据库的四大分类</p>
<ul>
<li>键值(Key-Value)存储</li>
<li>列存储</li>
<li>文档数据库</li>
<li>图形化数据库<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="2-Redis概述"><a href="#2-Redis概述" class="headerlink" title="2.Redis概述"></a>2.Redis概述</h2><p>&emsp;高性能键值队数据库</p>
<p>参考资料</p>
<ul>
<li><a href="https://redis.io/" target="_blank" rel="external">Redis官网</a><br><br></li>
</ul>
<p>支持数据类型</p>
<ul>
<li>字符串类型</li>
<li>散列类型</li>
<li>列表类型</li>
<li>集合类型</li>
<li>有序集合类型<br><br></li>
</ul>
<p>应用场景</p>
<ul>
<li>缓存【数据查询,常驻内存 】</li>
<li>任务队列</li>
<li>网站访问统计【精确到毫秒】</li>
<li>应用排行榜</li>
<li>数据过期处理</li>
<li>分布式集群架构中的session分离<br><br></li>
</ul>
<p>安装环境【CentOS】</p>
<ul>
<li>redis是C语言开发,安装redis需要先将官网下载源码进行编译,编译依赖gcc环境(如果没有该环境,需安装gcc)<br><br></li>
</ul>
<p>特性</p>
<ul>
<li>多数据库</li>
<li>事务</li>
<li>三种同步策略(不同步,每秒同步,每修改同步)</li>
<li>两种持久化操作(RDB【指定时间间隔将数据从内存中写入硬盘】和AOF方式【以日志形式记录数据库每一次操作,数据库启动时会读取日志文件,重新构建数据库,保证启动后数据库是完整的】)</li>
<li>也可无持久化(用作缓存机制)和同时使用RDB和AOF<br><br></li>
</ul>
<p>RDB方式</p>
<ul>
<li>【优势】只有一个文件，时间间隔的数据，可以归档为一个文件，方便压缩转移（就一个文件）</li>
<li>如果数据集很大,RDB启动效率会高些</li>
<li>【劣势】不好保证数据高可用性(最大限度避免数据丢失),数据集太大,可能服务器停止一定时间进行恢复<br><br></li>
</ul>
<p>AOF方式</p>
<ul>
<li>【优势】保证更高的数据安全性</li>
<li>对于日志写入操作采取添加模式,即使出现宕机现象,也不会破坏日志已经写入的内容</li>
<li>如果日志过大,Redis可以自动启动重写机制,不断将修改的数据写入老的磁盘文件当中,同时也会创建新的文件,记录此期间产生了哪些修改命令被执行</li>
<li>包含一个格式清晰,易于理解的日志文件操作</li>
<li>【劣势】同步策略不同,效率会低于RDB<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="3-Redis操作命令"><a href="#3-Redis操作命令" class="headerlink" title="3.Redis操作命令"></a>3.Redis操作命令</h2><p>windows版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;解压Redis-x64-3.2.100</div><div class="line"></div><div class="line">&lt;2&gt;前台启动</div><div class="line">		cmd</div><div class="line">		cd E:\Java\Redis\3.2.100</div><div class="line">		e:</div><div class="line">		redis-server.exe redis.windows.conf  </div><div class="line">		【再次输入ctrl + c 或者 关闭黑窗体,可以停止Redis】</div><div class="line"></div><div class="line">&lt;3&gt;后端启动【服务启动】</div><div class="line">		a.安装服务redis-server --service-install redis.windows.conf</div><div class="line">		b.启动服务redis-server --service-start </div><div class="line">		c.停止服务redis-server --service-stop</div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;客户端启动</div><div class="line">		redis-cli</div><div class="line"></div><div class="line">&lt;5&gt;测试连接</div><div class="line">		输入ping【若回复PONG,表示连接成功】</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>字符串操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;1&gt;存入和获取</div><div class="line">		a.【设置键值对】set name suvan</div><div class="line">		b.【根据key获取值】get name</div><div class="line">		c.【获取所有key】keys *</div><div class="line">		d.【获取所有key】del name</div><div class="line">		e.【先获取name的值,再设置】getset name xiaoming</div><div class="line"></div><div class="line">&lt;2&gt;删除</div><div class="line">	del name</div><div class="line"></div><div class="line">&lt;3&gt;指定value值递增递减</div><div class="line">	incr num     ~    1【如果num不存在,则默认设为0,然后自增1;如果值是Hello,转类型失败,返回错误信息】</div><div class="line">	incr num     ~    2</div><div class="line">	incrby num 5 ~	  7  【如果不存在,则默认设为0,自加5】</div><div class="line"></div><div class="line">	decr num  ~     -1【如果num不存在,默认设为0,自减少为-1】</div><div class="line">	decrby num 2 ~  -3</div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;拼接字符串</div><div class="line">	append num 123 【不存在则创建,存在则追加在后尾】</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>Hash操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;存储与获取</div><div class="line">	a.【存取单个键值队】hsert myhash name suvan</div><div class="line">	b.【存取多个键值队】hset myhash2 name suvan age 18</div><div class="line">	c.【获取单个】hget myhash name</div><div class="line">	d.【获取多个】hmget myhash2 name age</div><div class="line">	c.【获取指定hash的全部】hgetall myhash</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;删除</div><div class="line">	a.【删除1个】hdel myhash2 name</div><div class="line">	b.【删除多个】hdel myhash2 name age</div><div class="line">	c.【删除整个Hash】del myhash2</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;增加数字</div><div class="line">	a.【自增3】hincrby myhash age 5</div><div class="line"></div><div class="line">&lt;4&gt;判断是否存在</div><div class="line">	hexists myhash name</div><div class="line"></div><div class="line">&lt;5&gt;获取长度</div><div class="line">	hlen myshah</div><div class="line"></div><div class="line">&lt;6&gt;所有key 和所有value</div><div class="line">	hkesy myhash</div><div class="line">	hvals myhash</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="4-Jedis连接"><a href="#4-Jedis连接" class="headerlink" title="4.Jedis连接"></a>4.Jedis连接</h2><p>&emsp;Jedis是Redis官方首选的Java客户端开发包,用于java连接Redis</p>
<p>参考资料</p>
<ul>
<li><a href="https://github.com/xetorthio/jedis" target="_blank" rel="external">jedis的Github</a></li>
<li><a href="http://mvnrepository.com/artifact/redis.clients/jedis" target="_blank" rel="external">jedis的jar下载</a></li>
<li><a href="http://mvnrepository.com/artifact/org.apache.commons/commons-pool2" target="_blank" rel="external">org.apache.commons的jar包下载</a><br><br></li>
</ul>
<p>Jedis连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;1&gt;Build两个jar包</div><div class="line">		jedis-2.9.0.jar</div><div class="line">		commons-pool2-2.4.2.jar</div><div class="line"></div><div class="line">&lt;2&gt;程序代码【注意:虚拟机记得打开防火墙端口】</div><div class="line">	public void connect&#123;</div><div class="line">		//1.设置IP地址和端口</div><div class="line">		Jedis jedis = new Jedis(&quot;127.0.0.1&quot;,6379);</div><div class="line"></div><div class="line">		//2.保存数据</div><div class="line">		jedis.set(&quot;name&quot;,&quot;suvan&quot;);</div><div class="line"></div><div class="line">		//3.获取数据</div><div class="line">		String value = jedis.get(&quot;name&quot;);</div><div class="line"></div><div class="line">		//4.释放资源</div><div class="line">		jedis.close();</div><div class="line"></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;连接池</div><div class="line">	public void connectPool&#123;</div><div class="line">		//1.获取连接池的配置对象</div><div class="line">		JedisPoolconfig config = new JedisPoolConfig();</div><div class="line"></div><div class="line">		//2.设置最大连接数</div><div class="line">		config.setMaxTotal(30);</div><div class="line"></div><div class="line">		//3.设置最大空闲连接数</div><div class="line">		config.setMaxIdle(10);</div><div class="line"></div><div class="line">		//4.获取连接池</div><div class="line">		JedisPool jedisPool = new JedisPool(config,&quot;127.0.0.1&quot;，6379);</div><div class="line"></div><div class="line">		//5.获取核心对象</div><div class="line">		Jedis jedis = null;</div><div class="line"></div><div class="line">		try&#123;</div><div class="line">			//通过连接池连接</div><div class="line">			jedis = jedisPool.getResource();</div><div class="line"></div><div class="line">			jedis.set(&quot;name&quot;,&quot;张三&quot;);</div><div class="line">			String value = jedis.get(&quot;name&quot;);</div><div class="line">			System.out.println(value);</div><div class="line">		&#125;catch(Exception e)&#123;&#125;</div><div class="line">		 finally&#123;</div><div class="line">		 	//释放资源</div><div class="line">		 	if(jedis != null)&#123;</div><div class="line">		 		jedis.close();</div><div class="line">		 	&#125;</div><div class="line">		 	if(jedisPool != null)&#123;</div><div class="line">		 		jedisPool.close();</div><div class="line">		 	&#125;</div><div class="line">		 &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;注意</div><div class="line">	a.连接linux虚拟机的redis</div><div class="line">		关闭防火墙命令sudo service iptables stop</div><div class="line">		需要注释掉bind127.0.0.1 ，设置protected-mode为NO。如果解决了问题请点个赞</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="5-Redis的数据结构"><a href="#5-Redis的数据结构" class="headerlink" title="5.Redis的数据结构"></a>5.Redis的数据结构</h2><p>五种数据类型</p>
<ul>
<li>字符串(String)</li>
<li>哈希(hash)</li>
<li>字符串列表(list)</li>
<li>字符串集合(set)</li>
<li>有序字符串集合(sorted set)<br><br></li>
</ul>
<p>Key定义注意点</p>
<ul>
<li>不要过长</li>
<li>不要过短</li>
<li>统一的命名规范<br><br></li>
</ul>
<p>Hash结构</p>
<ul>
<li>String Key和String Value的map容器</li>
<li>每一个Hash可以存储4294967295个键值对<br><br></li>
</ul>
<hr>
<p><br><br></p>
<hr>
<p><br><br><br><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录&quot;&gt;&lt;a href=&quot;#一-目录&quot; class=&quot;headerlink&quot; title=&quot;一.目录&quot;&gt;&lt;/a&gt;一.目录&lt;/h1&gt;&lt;p&gt;目录&lt;br&gt;1.NoSQL介绍&lt;br&gt;2.Redis概述&lt;br&gt;3.Redis操作命令&lt;br&gt;4.Jedis连接&lt;br&gt;5.
    
    </summary>
    
      <category term="路由器" scheme="http://suvan-l.github.io/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    
      <category term="路由器" scheme="http://suvan-l.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>OCR技术_tesseract图片文字识别</title>
    <link href="http://suvan-l.github.io/2017/07/11/OCR%E6%8A%80%E6%9C%AF_Tesseract%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%94%A8/"/>
    <id>http://suvan-l.github.io/2017/07/11/OCR技术_Tesseract的基本运用/</id>
    <published>2017-07-11T10:04:59.000Z</published>
    <updated>2017-07-11T10:04:51.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录"><a href="#一-目录" class="headerlink" title="一.目录"></a>一.目录</h1><p>目录<br>1.安装与下载<br>2.解析图片<br><br></p>
<hr>
<p><br><br><br></p>
<h1 id="二-内容"><a href="#二-内容" class="headerlink" title="二.内容"></a>二.内容</h1><h2 id="1-下载与安装"><a href="#1-下载与安装" class="headerlink" title="1.下载与安装"></a>1.下载与安装</h2><p>参考资料</p>
<ul>
<li><a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="external">tesseract的Github项目地址</a></li>
<li><a href="https://github.com/tesseract-ocr/tesseract/wiki/4.0-with-LSTM#400-alpha-for-windows" target="_blank" rel="external">4.0版本下载地址</a><br><br></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;下载安装包</div><div class="line">找到页面的`Windows Installer made with MinGW-w64 `,</div><div class="line">	点击下载tesseract-ocr-setup-4.00.00dev.exe</div><div class="line"></div><div class="line">&lt;2&gt;运行安装包,依次执行</div><div class="line">		1.Next</div><div class="line">		2.(打勾I accpet the....),Next</div><div class="line">		3.根据英文语义,随意选择,Next</div><div class="line">			 a.Install for anyone using this computer</div><div class="line">			 b.Install just for me</div><div class="line">		4.这里有4个默认打勾项,</div><div class="line">			Adiitonal language data(download)是添加新的语言包</div><div class="line">				里面打勾Chinese(Simplified)选项,这事简体中文</div><div class="line"></div><div class="line">&lt;3&gt;配置环境变量</div><div class="line">	TESSERACT</div><div class="line">		E:\Java\tesseract【OCR图片识别】\Tesseract-OCR</div><div class="line">	TESSDATA_PREFIX</div><div class="line">		E:\Java\tesseract【OCR图片识别】\Tesseract-OCR\tessdata</div><div class="line"></div><div class="line">	加入path里</div><div class="line">		;%TESSERACT%;%TESSDATA_PREFIX%</div><div class="line"></div><div class="line">&lt;4&gt;可在图片所在位置,开启cmd【shhift+右键-在此处打开命令行窗口】,执行tesseract命令</div></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="2-解析图片"><a href="#2-解析图片" class="headerlink" title="2.解析图片"></a>2.解析图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">命令行</div><div class="line">	tesseract XXX.png k   【解析XXX.png图片,将结果储存至当前目录的k.txt(新创建)】</div><div class="line"></div><div class="line"></div><div class="line">	tesseract --list-langs	【查看有哪些可用语言】【可通过训练得到语言】</div><div class="line">		eng[英文]</div><div class="line">		chi_sim[简体中文]</div><div class="line"></div><div class="line"></div><div class="line">	tesseract XXX.png k -l chi_sim 【解析图片....指定chi_sim语言】</div></pre></td></tr></table></figure>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><br></h2><p><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录&quot;&gt;&lt;a href=&quot;#一-目录&quot; class=&quot;headerlink&quot; title=&quot;一.目录&quot;&gt;&lt;/a&gt;一.目录&lt;/h1&gt;&lt;p&gt;目录&lt;br&gt;1.安装与下载&lt;br&gt;2.解析图片&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="路由器" scheme="http://suvan-l.github.io/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    
      <category term="路由器" scheme="http://suvan-l.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java_知识体系</title>
    <link href="http://suvan-l.github.io/2017/07/01/Java_%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <id>http://suvan-l.github.io/2017/07/01/Java_知识体系/</id>
    <published>2017-07-01T09:43:18.000Z</published>
    <updated>2017-09-23T13:35:20.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录:"></a>目录:</h1><p>一.语法整理<br>1.概述(基本语法与规范)<br>2.变量<br>3.运算符<br>4.循环和判断<br>5.数组<br>6.函数(方法)<br>7.异常处理<br>8.面向对象【继承,多态,封装,抽象和接口】<br>9.Java的数据结构【集合框架】<br>10.泛型与对象序列化<br>11.静态关键字static<br>12.内部类<br>13.多线程基础<br>14.Java网络编程(Socket编程)<br>15.IO体系构图<br>16.解析Java注解<br>17.JVM虚拟机【管理内存分区】<br>18.了解Java中的内存泄漏的<br>19.专业术语<br>20.程序设计<br>21.项目管理<br>22.数据结构基础<br><br></p>
<p>二.操作整理<br>1.操作日期和时间<br>2.自定义异常<br>3.反射操作<br>4.正则表达式<br>5.操作I/O输入输出流和文件<br>6.编写定时任务<br>7.获取控制台键盘输入<br>8.文档注释【JavaDoc】<br>9.编码问题<br>10.Applet的简单介绍<br>11.发送邮件【JavaMail】<br>12.GUI开发<br>13.自动化操作【模拟键盘和鼠标】<br>14.JDBC连接数据库<br>15.遍历与控制台打印输出<br>16.XML文件读取与生成<br>17_1.Java加密与解密机制介绍<br>17_2.运用Base64算法<br>17_3.运用消息摘要算法<br>17_4.运用对称加密算法<br>17_5.运用非对称加密算法<br>17_6.运用数字签名算法<br>18_1.JSP开发<br>18_2.Servlet基础<br>18_3.过滤器<br>18_4.监听器<br>18_5.JSTL标签<br>18_6.JSP自定义标签<br>19.JSON数据处理<br>20.DWR实现服务器向客户端推送<br><br></p>
<p>三.设计模式</p>
<ol>
<li>单例模式<br><br></li>
</ol>
<p>四.研究Github开源项目</p>
<ol>
<li><a href="https://github.com/codingXiaxw/CustomerManagement" target="_blank" rel="external">JavaWeb项目之客户管理系统</a></li>
<li><a href="https://github.com/codingXiaxw/ssm" target="_blank" rel="external">一个案例带你快速入门SSM开发</a> 和 <a href="https://github.com/codingXiaxw/ssm2" target="_blank" rel="external">SSM注解开发的高级知识讲解</a></li>
<li><a href="https://github.com/codingXiaxw/shiro" target="_blank" rel="external">Shiro整合Web项目及整合后的开发</a></li>
<li><a href="https://github.com/codingXiaxw/seckill" target="_blank" rel="external">Java高并发秒杀系统API</a></li>
<li><a href="https://github.com/C0de8ug/Javaee-tutorial" target="_blank" rel="external">简单的教务系统网站(结合了图书订购功能)【SSM框架】</a></li>
<li><a href="https://github.com/nl101531/MarkdownViewTools" target="_blank" rel="external">本地Markdown文档读取展示工具【springboot框架】</a></li>
<li><a href="https://github.com/zhangxiang1/microblog" target="_blank" rel="external">microblog【实现了增删改查技术的微博】</a>和<a href="https://github.com/zhangxiang1/microblog_ssm" target="_blank" rel="external">microblog_ssm【用SSM实现】</a></li>
<li><a href="https://github.com/hot13399/spring-mvc-mini" target="_blank" rel="external">Spring-mvc-mini【基于Spring MVC,实现增删查改】</a> 和<a href="https://github.com/hot13399/spring-mvc-REST" target="_blank" rel="external">spring-mvc-REST【简单的Java RESTful 项目】</a></li>
<li><a href="https://github.com/code4craft/tiny-spring" target="_blank" rel="external">tiny-spring【Spring精简版】</a></li>
<li><a href="https://github.com/HuangFromJYU/JStruts2" target="_blank" rel="external">JStruts2【一个精简版Struts2框架】</a></li>
<li><a href="https://github.com/atrphy/WoodManager/" target="_blank" rel="external">简易木材管理系统【JQuery-Servlet-JDBC】</a><br><br></li>
</ol>
<hr>
<p><br><br><br><br><br></p>
<h1 id="一-语法整理"><a href="#一-语法整理" class="headerlink" title="一.语法整理"></a>一.语法整理</h1><h2 id="1-概述-基本语法与规范"><a href="#1-概述-基本语法与规范" class="headerlink" title="1.概述(基本语法与规范)"></a>1.概述(基本语法与规范)</h2><ul>
<li>Java SE</li>
<li>Java EE</li>
<li>Java ME<br>本地配置Java运行环境JDK：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;变量1</div><div class="line">        JAVA_HOME:C:\Program Files\Java\jdk1.8.0_65</div><div class="line">        【作用：找到java编译器以及执行文件2】</div><div class="line"></div><div class="line">            在Path变量结尾处添加：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</div><div class="line"></div><div class="line">&lt;2&gt;变量2</div><div class="line">        CLASSPATH:E:\Class;%JAVA_HOME%\lib;</div><div class="line">        【租用：指定Java类所在的目录(例如：导入原生工具包)】</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>JRE和JDK</p>
<ul>
<li>【Java运行时环境(JRE)】Java虚拟机,Java核心类库和支持文件</li>
<li>【JAVA开发工具包(JDK)】是完整的Java软件开发包,包含jre,编译器,和其他工具(JavaDoc,java调试器等),可以让开发者开发,编译，执行Java应用程序<br><br></li>
</ul>
<p>Java语言鲁棒性(Robust,即健壮性)特点</p>
<ul>
<li>能检查程序在编译和运行时的错误</li>
<li>自己操纵内存减少了内存出错的可能性</li>
<li>实现了真数组,避免了覆盖数据的可能<br><br></li>
</ul>
<p>Java程序的种类</p>
<ul>
<li>Applet【内嵌于Web文件中,用浏览器观看】</li>
<li>Application【可独立运行】</li>
<li>Servlet【服务器端】<br><br></li>
</ul>
<p>Java基本命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">javac 编译</div><div class="line">javac -D 指定编译后类层次的根目录</div><div class="line">java运行程序</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>Java命名：</p>
<ul>
<li>大小写敏感</li>
<li>类名    【每个单词首字母大写】</li>
<li>方法名【小写字母开头，之后每个单词首字母大写】</li>
<li>文件名【.java后缀，文件名与类中唯一的public类名希艾娜沟通】<br><br></li>
</ul>
<p>Java注释</p>
<ul>
<li>单行注释(//)</li>
<li>多行注释(/<em> </em>/)</li>
<li>文档注释(/<em>*  </em>/)<br><br></li>
</ul>
<p>Java转义序列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">\t  Tab键空行</div><div class="line">\n  换行</div><div class="line">\r  回车</div><div class="line">\b  退格符</div><div class="line">\f  换页符</div><div class="line">\&apos;  单引号</div><div class="line">\&quot;  双引号</div><div class="line">\\  反斜杠(\)</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>程序包</p>
<ul>
<li>包名(全小写)</li>
<li>导包(例:import java.io.*)</li>
<li>java.lang【此包是由java解释器自动引入】<br><br></li>
</ul>
<p>程序入口</p>
<ul>
<li>主函数(main方法)</li>
<li>public static void main(String [] args){ … }<br><br></li>
</ul>
<p>标识符：</p>
<ul>
<li>类，变量和方法的名称称为标识符</li>
<li>必须以字母（ A 到 Z 或者 a 到 z ）、货币字符（ $ ）或者下划线( _ )开头【之后可以是任意字符】</li>
<li>不能是关键词<br><br></li>
</ul>
<p>修饰符</p>
<ul>
<li>【访问修饰符 】private,default,protected,public</li>
<li>【非访问修饰符】final,abstract,strictfp,synchronized,volatile<br><br></li>
</ul>
<p>访问修饰符</p>
<ul>
<li>【public】本类,同包,子类(包内,包外),包外其他</li>
<li>【protected】本类,同包,子类(包内,包外)</li>
<li>【default_默认】本类,同包,子类(包内)</li>
<li>【private】本类<br><br></li>
</ul>
<p>关键字</p>
<ul>
<li>java中所有关键字都是小写的</li>
<li>不能用作常量、变量和其他标识符的名字</li>
<li>java中的true,false,null,friendly,sizeof不是关键字,也不是保留字,它们只是显示常量值,但是程序中不能使用他们作为标识符</li>
<li>const和goto是java的保留的关键字,native是关键字<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">abstract,assert</div><div class="line">boolean,break,byte</div><div class="line">case,catch,char,class,const(保留),continue</div><div class="line">default,do,double</div><div class="line">else,enum(枚举),extends</div><div class="line">final,finally,float,for</div><div class="line">goto(保留关键字,没有具体含义)</div><div class="line">if,implements,import,instanceof,int,interface</div><div class="line">long</div><div class="line">native( 用来声明一个方法是由与计算机相关的语言&lt;如C/C++/FORTRAN语言&gt;实现的),new</div><div class="line">package,private,protected,public</div><div class="line">return</div><div class="line">strictfp(用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范),short,static,super,switch,synchronized</div><div class="line">this,throw,throws,transient,try</div><div class="line">void,volatile,while</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>static关键字</p>
<ul>
<li>【静态变量 】类加载时初始化,所有实例共享</li>
<li>【静态方法】可类名.方法名()调用,必须实现,不能抽象,类加载时已经存在</li>
<li>【静态代码块】 可存在该类任意地方,类加载时一并执行</li>
<li>Java中并不存在全局变量,static可以实现一个”伪全局”,JVM加载一个类时,会为该类中static修饰的成员变量和成员方法,在固定的位置开辟一个固定大小的内存区域<br><br></li>
</ul>
<p>final关键字</p>
<ul>
<li>使用final关键字修饰的函数称为”内联函数”</li>
<li>“函数代码小,频繁调用”的情况下,适宜采用内联函数<br><br></li>
</ul>
<p>枚举</p>
<ul>
<li>java1.5新增加的特性,枚举类型是一种一种特殊的新类型</li>
<li>枚举类型可以定义玮一个单独的文件,也可定义在其他类的内部</li>
<li>默认继承java.lang.Enum抽象类,并且枚举类是final修饰,无法继承</li>
<li>枚举类允许定义抽象方法,每个实例都必须实现</li>
<li>枚举类可以实现多接口</li>
<li>参考资料:<a href="http://blog.csdn.net/javazejian/article/details/71333103" target="_blank" rel="external">深入理解Java枚举类型(enum) </a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/*枚举类型,定义枚举常量,简单模型调用*/</div><div class="line">    enum Day&#123;</div><div class="line">        MONDAY,TUESDAY,WEDNESDAY,</div><div class="line">        THURSDAY,FRIDAY,SATURDAY,SUNDAY</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public class EnumDemo&#123;</div><div class="line">        public static void main(String [] args)&#123;</div><div class="line">            Day day = Day.MONDAY; //直接引用</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h2><p>java中两种有效的数据类型</p>
<ul>
<li>【 原始数据类型】存放在栈中</li>
<li>【引用数据类型】JVM中虚拟栈存放“对象的地址”,堆中存放“对象的实质”,通过地址来找到堆中对象的过程<br><br></li>
</ul>
<p>Java编译器在基本数据类型和对应的包装类型进行转换</p>
<ul>
<li>装箱(基本 -&gt; 对象) 【可自动装箱】</li>
<li>拆箱(对象 -&gt; 基本) 【可自动拆箱】<br><br></li>
</ul>
<p>内存区域存放</p>
<ul>
<li>new创建的对象在堆区</li>
<li>函数中的临时变量在栈区</li>
<li>java中的String的字符串,在字符串常量区<br><br></li>
</ul>
<p>变量类型</p>
<ul>
<li>本地变量 (无默认值,栈深度内部实施)</li>
<li>实例变量 (有默认值[0,false,null],与对象共存共毁)</li>
<li>类变量(有默认值[0,false,null],与程序共开始共结束)<br><br></li>
</ul>
<p>数据类型</p>
<ul>
<li>【整数类型】byte,short,int,long</li>
<li>【浮点类型】float,double</li>
<li>【逻辑类型】boolean</li>
<li>【字符型】char<br><br></li>
</ul>
<p>原始数据类型(基本数据类型,从小到大排序)</p>
<ul>
<li>【byte】1字节(8bit)-2^7 ~ 2^7-1</li>
<li>【short】2字节,-2^15 ~ 2^15-1</li>
<li>【short】2字节,16位(16bit),\u0000 ~ 、\uFFFF</li>
<li>【int】4字节,-2^31 ~ 2^31-1</li>
<li>【long】8字节,-2^63 ~ 2^63-1</li>
<li>【long】单精度32位浮点</li>
<li>【double】双精度64位浮点</li>
<li>【boolean】true和false<br><br></li>
</ul>
<p>数字类型的包装类【都是抽象类Number的子类】</p>
<ul>
<li>Byte</li>
<li>Integer</li>
<li>Short</li>
<li>Long</li>
<li>Float</li>
<li>Double<br><br></li>
</ul>
<p>成员变量(静态与非静态)默认值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">【boolean】false</div><div class="line">【byte】0</div><div class="line">【short】0</div><div class="line">【char】 (此处空白,默认为空字符就是&apos;\u0000&apos;,数值为0)</div><div class="line">【int】0</div><div class="line">【long】0</div><div class="line">【float】0.0</div><div class="line">【double】0.0</div><div class="line">【String】 null</div><div class="line">【String []】 null</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>字符型常量</p>
<ul>
<li>单引号括起来的单个普通字符or转义字符</li>
<li>【注意】字符串用双引号<br><br></li>
</ul>
<p>不确定值的默认类型</p>
<ul>
<li>整数默认是int</li>
<li>带小数的默认是double<br><br></li>
</ul>
<p>类型互相转换</p>
<ul>
<li>小转大 [自动装换]</li>
<li>大转小 [强制转换，丢失精度]</li>
<li>原生类中的数据类型不可任意转换【范围大的转为范围小,需要强制类型转换】<br><br></li>
</ul>
<p>字符串和字节的转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;字符串 -&gt; 字节</div><div class="line">		String s;</div><div class="line">		byte [] bs = s.getBytes()</div><div class="line"></div><div class="line">&lt;2&gt;字节 -&gt; 字符串</div><div class="line">		byte [] bs = new byte[int];</div><div class="line">		String s = new String(bs) 或者 String s = new String(bs,encode);//encode指的是编码方式</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>特殊例题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;</div><div class="line">        double d = 5.3e12;</div><div class="line">         【表示5.3乘以10的12次方】</div><div class="line"></div><div class="line">&lt;2&gt;</div><div class="line">        Integer对象范围是-127 ~ 127</div><div class="line">                如果超出范围会新建一个对象</div><div class="line">                否则就是使用内存中那个对象</div><div class="line"></div><div class="line">&lt;3&gt;</div><div class="line">        实现CharSequence接口的类</div><div class="line">                CharBuffer,String,StringBuffer,StringBuilder</div><div class="line"></div><div class="line">&lt;4&gt;</div><div class="line">        &apos;a&apos; = 1/3  这个表达式是错的</div><div class="line">              &apos;a&apos;是个常数,不能赋值,字符型与整型运算时会自动转换为整型,a的ASCII码为97</div><div class="line">                  &apos;A&apos; + 32  正确</div><div class="line">                  &apos;a&apos; % 3 正确</div><div class="line"></div><div class="line">&lt;5&gt;</div><div class="line">    执行`&quot;int a =&apos;2&apos;&quot;`的值,a的值是50</div><div class="line">    【注意常见字符的ASCII码是空格_32,0_48,A_65,a_97】</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3.运算符"></a>3.运算符</h2><p>类型</p>
<ul>
<li>算数运算符  [+ - * / % ++ –]</li>
<li>关系运算符  [== != &gt; &lt; &gt;= &lt;=]</li>
<li>位运算符      [&amp; | ^(异或,同真异假) ~ &lt;&lt; &gt;&gt; &gt;&gt;&gt;]</li>
<li>逻辑运算符  [&amp;&amp; || !]</li>
<li>赋值运算符  [= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= ^= |=]</li>
<li>其他运算符  [?:(三元运算符) instanceof(判断左变量 是否为 右侧类型【同类型or子类】]<br><br></li>
</ul>
<p>instanceof运算符(二元运算符)</p>
<ul>
<li>判断”左边的对象”是否为”右边类(接口,抽象类,父类)”的实例<br><br></li>
</ul>
<p>位运算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;左移动运算符【&lt;&lt;】  </div><div class="line">	丢弃最高位,0补最低位  [左移n位相当于 乘以2的n次方]</div><div class="line">&lt;2&gt;右移运算符</div><div class="line">	符号位不变，左边补上符号位(正补0,负补1) [右移n位相当于 除以2的n次方]</div><div class="line">&lt;3&gt;无符号右移运算符 【&gt;&gt;&gt;】</div><div class="line">	丢弃最低位，0补最高位 【只是对32位和64位有意义】</div><div class="line"></div><div class="line">***********************************************************</div><div class="line"></div><div class="line">&lt;4&gt;按位与运算符【&amp;】</div><div class="line">	两位同时为“1”，结果才为“1”，否则为0 </div><div class="line">		a.清零[与一个二进制各位都为0的数相与]</div><div class="line">		b.取一个数中指定位[与一个数,需取的指定位为1,其余位置为0]，进入&amp;1</div><div class="line"></div><div class="line">&lt;5&gt;按位或运算符 【|】</div><div class="line">	两位有一个1,即为1</div><div class="line">		a.指定某些位置为1[与一个数指定位为1,其余位置为0]</div><div class="line"></div><div class="line"></div><div class="line">&lt;6&gt;异或运算符</div><div class="line">	同假异真</div><div class="line">		a.使特定为反转[需要翻转的位置为1,其余位为0]</div><div class="line">		b.保留原值[与0进行异或]</div><div class="line">		c.两个变量值交换[A=A^B;B=A^B;A=A^B]</div><div class="line">			【原理:利用一个数异或本身等于0和异或运算符合交换率】</div><div class="line"></div><div class="line">&lt;7&gt;取反运算符【~】</div><div class="line">	相反</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>二进制</p>
<ul>
<li>原码  [二进制]</li>
<li>反码  [正数反码是本身,负数反码,符号位不变,各个位取反]</li>
<li>补码  [正数补码是本身,负数补码,符号位不变，各个位取反,最后+1]<br><br></li>
</ul>
<p>二进制的算术运算</p>
<ul>
<li>加法 [逢二进一]</li>
<li>减法 [借一有二]</li>
<li>乘法 [与十进制类似,00 = 0; 01=10=0;11 = 1]</li>
<li>除法 [与十进制类似]<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;加   </div><div class="line">	 1110 [被加数]</div><div class="line">   + 1011 [加数] </div><div class="line">   ------------</div><div class="line">    11001 </div><div class="line"></div><div class="line">&lt;2&gt;减</div><div class="line">     1101 [被减数]</div><div class="line">   + 1011 [减数]</div><div class="line">   -------------</div><div class="line">     0010</div><div class="line"></div><div class="line">&lt;3&gt;乘</div><div class="line">	 1001 [被乘数]</div><div class="line">   * 1010 [乘数]</div><div class="line">   --------------</div><div class="line">     0000     [部分积(1对1相乘)]</div><div class="line">    1001</div><div class="line">   0000   	 </div><div class="line">  1001</div><div class="line">  ---------------</div><div class="line">  1011010     [乘积]</div><div class="line"></div><div class="line">&lt;4&gt;除</div><div class="line">            000110    [商]</div><div class="line">		   ----------------------</div><div class="line"> [除数]110| 100110         [被除数]</div><div class="line"> 	      |  110</div><div class="line"> 	        --------</div><div class="line"> 	         01110</div><div class="line"> 	          110</div><div class="line"> 	        -------</div><div class="line"> 	            10</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>Java内置的进制转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Integer.toHexString(int i);					[十进制 -&gt; 十六进制]</div><div class="line">Integer.toOctalString(int i);				[十进制 -&gt; 八进制]</div><div class="line">Integer.toBinaryString(int i);				[十进制 -&gt; 二进制]</div><div class="line">Integer.valueOf(&quot;FFF&quot;,16).toString();		[十六进制 -&gt; 十进制]</div><div class="line">Integer.valueOf(&quot;376&quot;,8).toString();		[八进制 -&gt; 十进制]</div><div class="line">Integer.valueOf(&quot;0101&quot;,2).toString();	    [二进制 -&gt; 十进制]</div><div class="line"></div><div class="line"></div><div class="line">八进制</div><div class="line">    以8为基数的算法,逢8进1,所以“10进制的8”就是010【前面哪个0是为了和十进制区分用的,又称转义符】</div></pre></td></tr></table></figure></p>
<p>0xff为16进制<br>二进制 1111 1111<br>十进制 255<br>八进制 377<br><br></p>
<p>反码【正数是本身,负数是符号位不变,各个位取反】<br>补码【正数是本身,负数符号位不变,各个位数取反,最后+1】<br><br></p>
<p>案例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">10</div><div class="line">    【原码】0000000000000000 0000000000001010</div><div class="line">	【~10】 1111111111111111 1111111111110101(变为负数,计算机用补码存储)</div><div class="line">【~10反码】 1000000000000000 0000000000001010</div><div class="line">【~10补码】 1000000000000000 0000000000001011(计算机最终储存数字-11)</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>计算机中通常采用的字节存储机制大小端</p>
<ul>
<li>小端法(Little-Endian) [低位字节排放在内存的低地址端(即该值的起始地址,高位自己排放在内存的高地址端)]</li>
<li>大端法(Big-Endian) [高位自己排放在内存的低地址端(即该值的起始位置),低位自己排放在内存的高地址端]</li>
<li>网络字节序：TCP/IP各层协议将字节序定义为Big-Endian，因此TCP/IP协议中使用的字节序通常称之为网络字节序<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="4-循环和判断"><a href="#4-循环和判断" class="headerlink" title="4.循环和判断"></a>4.循环和判断</h2><p>循环类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;while(条件)&#123; ... &#125;</div><div class="line">&lt;2&gt;do&#123; ... &#125;while(条件);</div><div class="line">&lt;3&gt;for(变量;条件;每次循环更新)&#123; ... &#125;</div><div class="line">&lt;4&gt;for(类型 变量：类型集合)&#123; ... &#125;   【for-each循环】</div><div class="line">``</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line">循环中特有关键字</div><div class="line">+ continue 【循环跳过此次，进行下一次】</div><div class="line">+ break    【退出循环】</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">条件判断</div></pre></td></tr></table></figure></p>
<p><1><br>    if(条件){ … };</1></p>
<p><2><br>    if(条件1){ … }else if(条件2){ … };</2></p>
<p><3><br>    f(条件1){ … }else if(条件2){ … }else{ … }</3></p>
<p><4><br>    switch(变量){ case 值1: case 值2: ….; default: ….; } 【对应变量值为入口执行，遇到break退出，未遇到执行到最后】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">switch判断</div><div class="line">+ JDK7之前,switch只能支持byte,short,char,int,JDK7后支持String</div><div class="line">+ switch的表达式的值不能是null,否则会在运行时抛出NullPointerException,</div><div class="line">+ case子句不能使用null,否则会出现编译错误</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">5.数组</div><div class="line">--------------------------</div><div class="line"></div><div class="line">&amp;emsp;储存相同类型的元素，固定大小的连续集合,下标从0开始[数组元素通过索引访问]</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">特点</div><div class="line">+ 数组是一个对象</div><div class="line">+ 不是一种原生类</div><div class="line">+ 数组存储在堆中连续内存空间里</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">应用</div></pre></td></tr></table></figure></4></p>
<p><1>创建数组<br>        a. int [] number = new int[3];<br>        b. int [] number = {1,2,3};</1></p>
<p><2>赋值<br>        number[0] = 2;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">工具类</div><div class="line">java.util.Arrays 【排序,搜索,比较和填充】</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">6.函数(方法)</div><div class="line">---------------------</div><div class="line"></div><div class="line">函数类型：</div><div class="line">+ 原始类型是值传递,引用类型是引用传递</div><div class="line">+ void关键字 [返回值类型,声明后方法体可不用返回值]</div><div class="line">+ 构造函数   【无返回值类型,方法名与类名一致】</div><div class="line">+ 普通函数   </div><div class="line">+ 类函数(静态函数)</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">构造方法</div><div class="line">+ 新对象被创建时,会被调用</div><div class="line">+ 每一个类都有构造方法,程序员没有给类提供构造方法的情况下,Java编译器会为该类创建一个默认的构造方法</div><div class="line">+ 【构造方法重载】可以为一个类创建多个构造方法,每一个构造方法必须有它唯一的参数列表</div><div class="line">+ 【不支持复制构造方法】Java不支持像C++中的复制构造方法(又称为拷贝构造函数,是一种特殊的构造函数,它由编译器调用来完成一些基于同一类的其他对象的构造及初始化)</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">值传递和引用传递</div><div class="line">+ Java中只有按值传递，没有按引用传递,参考资料:[http://guhanjie.iteye.com/blog/1683637](http://guhanjie.iteye.com/blog/1683637)</div><div class="line">+ 【都是值传递】基本型变量传递的是&quot;变量副本&quot;,对象型变量传递的是&quot;对象引用的副本&quot;</div><div class="line">+ 【引用传递】传递的是对象地址,并不是原对象本身(形参与实参指向同一内存地址,对形式参数的操作就是对实际参数的操作,方法中执行的形参改变会影响实际参数的值)</div><div class="line">+ String是被final修饰的类,本身的内容是不会改变的</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">类函数</div><div class="line">+ 指的被static修饰的方法,无this指针【this不能在static方法内使用】</div><div class="line">+ 可以调用其他类方法(同为static修饰)</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">重载</div><div class="line">+ 形参列表必须不同(类型,个数or顺序)</div><div class="line">+ 访问修饰符 or 返回值 or 抛出异常 都可以不同</div><div class="line">+ 能够在一个类中或者一个子类中被重载</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">重写</div><div class="line">+ 对从基类中继承来的方法进行重写</div><div class="line">+ 返回值类型 and 函数名 and 参数列表 必须相同</div><div class="line">+ 重写方法的访问权限&gt;=被重写的方法</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">类的默认执行顺序 [Father.java 和 Child.java(extends Father)]</div><div class="line">1. 父类静态变量</div><div class="line">2 父类的静态代码块【static&#123; ... &#125;】</div><div class="line">3.子类静态变量</div><div class="line">4. 子类静态代码块</div><div class="line">5. 父类构造(非静态)代码块【&#123; ... &#125;】</div><div class="line">6 父类构造函数</div><div class="line">7. 子类构造代码块</div><div class="line">8. 子类构造函数</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">虚函数</div><div class="line">+ 在Java语言中, 所有的方法默认都是&quot;虚函数&quot;. 只有以关键字final 标记的方法才是非虚函数</div><div class="line">+ 【结论】当执行到超类的构造器时，会调用move()，但是派生类也存在重写的move(),</div><div class="line">    所以,最终只会执行派生类里的move()【超类的move()不执行】</div><div class="line">&lt;br&gt;</div></pre></td></tr></table></figure></2></p>
<p><1>Father类 【超类(父类】<br>        public class Father {<br>            public Father(){<br>                System.out.println(“Father constructor————“);<br>                move();<br>            }<br>            public void move(){<br>                System.out.println(“Father move”);<br>            }<br>        }</1></p>
<p><2>Child类 【派生类(子类)】<br>        public class Child extends Father{<br>            public Child(){<br>                System.out.println(“Child constructor————“);<br>                move();<br>            }<br>            public void move(){<br>                System.out.println(“Childe move”);<br>            }<br>        }</2></p>
<p><3>测试方法<br>        public class test{<br>            public static void main(String[] args) {<br>                        Father child = new Child();<br>        //                Child child = new Child();         两种结果一样<br>            }<br>        }</3></p>
<hr>
<p>控制台输出<br>    Father constructor————<br>    Childe move<br>    Child constructor—————-<br>    Childe move<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">终结器</div><div class="line">+ 仅在对象被垃圾收集器销毁时调用</div><div class="line">+ 关键字 protected 是为了保证在包外的代码不能访问 finalize() 方法【包外子类可以访问】</div><div class="line">+ 无法确定 finalize() 什么时候执行【如果你的程序在垃圾收集器发生之前就结束了，finalize() 方法将不会被执行。】</div></pre></td></tr></table></figure></p>
<p>finalize()结构<br>    protected void finalize( ){<br>         …<br>    }<br>``<br><br></p>
<hr>
<p><br><br></p>
<h2 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7.异常处理"></a>7.异常处理</h2><p>三种类别</p>
<ul>
<li>检测异常      [IOException]</li>
<li>运行时异常  [RunntimeException]</li>
<li>错误          [Error]<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">		 ____Error(错误)</div><div class="line">Throwable			</div><div class="line">                                            	____IOException</div><div class="line">		 _____Exception(异常)</div><div class="line">		 		         ____RunntimeException</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>RuntimeException异常</p>
<ul>
<li>运行时异常(包含子类)将由系统自动抛出,不需要使用throw语句</li>
<li>Java编译器允许忽略运行时异常,一个方法可以既不捕捉,也不声明抛出运行时异常</li>
<li>例如”除数为0”等ArithmeticException,是RuntimeExcpetion的子类<br><br></li>
</ul>
<p>常见的异常</p>
<ul>
<li>JVM异常  [由JVM在逻辑层上专门抛出]</li>
<li>程序性异常 [由应用程序或是编写API的程序明确抛出]<br><br></li>
</ul>
<p>关键字</p>
<ul>
<li>throws</li>
<li>throw</li>
<li>finally  【无论是否抛出异常,都会执行finally代码块】<br><br></li>
</ul>
<p>try,catch,finally中返回值总结<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;finally中无return,try或者catch中有return</div><div class="line">    【在return前一定会执行finally的代码块,但finally内容不会影响返回值,返回值以try或者catch执行结果为主】</div><div class="line">                try&#123;</div><div class="line">                        ....</div><div class="line">                        return 1;</div><div class="line">                &#125;catch(Exception e)&#123;</div><div class="line">                        return 2;</div><div class="line">                &#125;finally&#123;&#125;</div><div class="line"></div><div class="line">&lt;2&gt;finally中有return,try或者catch中有return</div><div class="line">     【依旧一定会执行return,返回值以finally中的结执行结果为主】</div><div class="line">                try&#123;</div><div class="line">                    return 1;</div><div class="line">                &#125;catch(Exception e)&#123;</div><div class="line">                    return 2;</div><div class="line">                &#125;finally&#123;</div><div class="line">                    return 3;</div><div class="line">                &#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>捕获异常</p>
<ul>
<li>try/catch  【 [可添加finally{}]】</li>
<li>多个catch块 【[顺序依次寻找，范围由小_大，知道找到该异常类型]】<br><br></li>
</ul>
<p>抛出异常</p>
<ul>
<li>throws [方法定义时，定义抛出异常]</li>
<li>throw  [方法题内部抛出]<br><br></li>
</ul>
<p>自定义异常 [继承Exception类,异常类和其他类一样,包含字段和函数]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class MyException extends Exception&#123;</div><div class="line">	public MyException()&#123;	</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	public MyException(String message)&#123;</div><div class="line">		super(message);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>实际应用中的经验与总结</p>
<ul>
<li>处理运行时异常时,采用逻辑去合理规避同时辅助try-catch处理</li>
<li>在多重catch块后面,可以加一个catch(Exception)来处理可能会被遗漏的异常</li>
<li>对于不确定的代码,也可以加入try-catch,处理潜在异常</li>
<li>尽量去处理异常,切忌知识简单的调用printStackTrace()去打印输出</li>
<li>具体如何处理异常,要根据不同的业务需求和异常类型去决定</li>
<li>尽量添加finally去释放占用的资源<br><br></li>
</ul>
<p>程序代码出错</p>
<ul>
<li>java调试器为jdb.exe,对程序进行调试<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="8-面向对象【继承-多态-封装-抽象和接口】"><a href="#8-面向对象【继承-多态-封装-抽象和接口】" class="headerlink" title="8.面向对象【继承,多态,封装,抽象和接口】"></a>8.面向对象【继承,多态,封装,抽象和接口】</h2><p>类和对象</p>
<ul>
<li>【类】定义对象的行为和状态，的模版</li>
<li>【对象】 具有状态和行为<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;1.类 </div><div class="line">	局部变量</div><div class="line">	类变量(静态)</div><div class="line">	实例变量(非静态)</div><div class="line"></div><div class="line">	构造器[无参／有参　构造方法]</div><div class="line">,2&gt;对象</div><div class="line">	声明</div><div class="line">	实例化</div><div class="line">	初始化</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>面向对象三大特征</p>
<ul>
<li>封装,继承,多态</li>
<li>c是面向过程,java和c++都是面向对象<br><br></li>
</ul>
<p>面向对象的五大基本原则</p>
<ul>
<li>单一职责原则  [SRP]</li>
<li>开放封闭原则  [OCP]</li>
<li>里式替换原则  [LSP]</li>
<li>依赖倒置原则  [DIP]</li>
<li>接口隔离原则  [ISF]<br><br></li>
</ul>
<p>面向对象程序设计四大基本概念</p>
<ol>
<li>继承</li>
<li>多态</li>
<li>抽象</li>
<li>封装<br><br></li>
</ol>
<p>继承</p>
<ul>
<li>【IS-A关系】 继承关系 A is-a B(B是A的父类),使用insAtanceof关键字 检查左变量 是否 右类型(同类型 or 子类)</li>
<li>【HAS-A关系】 从属关系 A has a B(B是A的组成部分,例：属性)</li>
<li>【LIKE-A关系】 组合关系 A like a B(B是A的接口)</li>
<li>【继承缺点】1.父类变-子类必须变 2.强耦合关系 3.破坏了封装,对于父类,子类可以了解父类的实现细节</li>
<li>【子类继将继承父类所有的属性和方法】注意:1.父类private方法不能直接调用;2.静态方法不能重;3.父类构造函数不能被继承</li>
<li>【子类可以重写父类方法】final修饰的method的不能重写,重写时若需要调用父类函数时用super.函数名()</li>
<li>【子类重写父类方法】子类的访问权限&gt;=父类访问权限<br><br></li>
</ul>
<p>多态</p>
<ul>
<li>【父类引用指向子类对象】父类引用,实例化子类对象</li>
<li>【多接口机制】     指父类是多态,多个继承/接口</li>
<li>【子类可以覆盖(重写)父类函数】 必要调用时候用super关键字</li>
<li>【虚函数 】无论是什么数据类型的引用，运行时会调用被覆盖方法(只运行子类函数)，在编译时都会遵循于源码</li>
<li>【编译和运行】编译时多态【重载】和运行时多态 【动态绑定】</li>
<li>继承链中调用对象的方法存在优先级【this.show(O),super.show(O)、this.show((super)O)、super.show((super)O)】</li>
<li>经典案例<a href="http://blog.csdn.net/thinkGhoster/article/details/2307001" target="_blank" rel="external">深入理解java的多态性</a><br><br></li>
</ul>
<p>封装</p>
<ul>
<li>【特点】使类中字段私有，通过共有函数访问私有字段 (例如setter和getter,是该对象对外开发的接口)</li>
<li>【特点】良好的封装能够减少耦合,可以对成员进行更加精确的控制</li>
<li>【特点】使代码具有可维护性,灵活性和扩展性[类内部的结构可以自由修改]</li>
<li>【特点】隐藏信息,实现细节</li>
<li>【特点】封装确实可以使我们容易地修改类的内部实现，而无需修改使用了该类的客户代码(在setter和getter添加相应的业务逻辑)<br><br></li>
</ul>
<p>抽象<br>+【OOP(面向对象程序设计)中的抽象类】使用关键字abstract声明,extends继承</p>
<ul>
<li>【特点】子类只能继承1个抽象类,必须实现所有抽象方法</li>
<li>【特点】接口能包含构造方法,不能被实例化</li>
<li>【特点】成员变量可以有final,也可包含非final</li>
<li>【特点】成员方法可以抽象也可以不抽象(抽象方法无方法体)</li>
<li>【特点】抽象类不能用static修饰方法(抽象类不能实例化,不能分配内存,而static修饰的方法在类实例化前就分配内存,矛盾)</li>
<li>【特点】抽象类必须被继承意义,final修饰类为终态,不能被继承,所以final不能修饰抽象类</li>
<li>【特点】抽象类可以在不提供接口方法实现的情况下实现接口。</li>
<li>【特点】以前的抽象类抽象方法默认是protected,jdk1.8后改成默认是default</li>
<li>【特点】子类抽象方法不能与父类抽象方法重名</li>
<li>【特点】abstract不能与final并列修饰同一个类</li>
<li>【特点】abstract 不能与 private、static、final 或 native 并列修饰同一个方法<br><br></li>
</ul>
<p>接口</p>
<ul>
<li>【是抽象方法的集合】 使用关键字interface声明,implements继承</li>
<li>【特点】子类可继承多个接口,必须实现接口内所有抽象方法</li>
<li>【特点】接口不能包含构造方法,不能被实例化</li>
<li>【特点】成员变量必须是public,static,final</li>
<li>【特点】成员方法必须是public,abstract,没有方法体</li>
<li>【特点】接口的成员变量默认public,static,final,需要直接附上初始值,子类实例类可以直接访问接口中的变量</li>
<li>【特点】不能用final修饰接口的成员方法</li>
<li>【特点】private和protected不能修饰接口,1.8以后支持static修饰接口,以前不支持</li>
<li>【注意】子类避免实现多个接口时,方法名出现重复<br><br></li>
</ul>
<p>抽象类与接口的区别</p>
<ol>
<li>抽象层次[抽象类是对类抽象,接口是对行为抽象]</li>
<li>跨域不同[抽象类体现继承,父类和派生类必须存在IS-A关系,接口是like-a关系]</li>
<li>设计层次[抽象类是底向上抽象而来,接口是自顶向下设计]<br><br></li>
</ol>
<hr>
<p><br><br></p>
<h2 id="9-Java的数据结构【集合框架】"><a href="#9-Java的数据结构【集合框架】" class="headerlink" title="9.Java的数据结构【集合框架】"></a>9.Java的数据结构【集合框架】</h2><p>&emsp;Java中的集合类,是一种工具类,就像是容器,储存任意数量的具有共同属性的对象,java提供集合框架[java.util包].<br><br></p>
<p>参考资源</p>
<ul>
<li>集合框架[java.util包]</li>
<li><a href="http://www.tutorialspoint.com/java/java_collection_algorithms.htm" target="_blank" rel="external">The Collection Algorithms(所有算法实现的列表</a><br><br></li>
</ul>
<p>作用</p>
<ul>
<li>在类的内部,对数据进行组织</li>
<li>简单而快速的搜索大数量的条目</li>
<li>有的集合接口,提供了一些列排列有序的元素,并且可以在序列中间快速的插入或者删除有关元素</li>
<li>有的集合接口,提供了映射关系,可以通过关键字(key)去快速查找到对应的唯一对象,而这个关键字可以是任意类型<br><br></li>
</ul>
<p>数组和集合的区别</p>
<ul>
<li>数组长度固定,集合长度可变</li>
<li>数组只能通过下标访问元素,类型固定,而有的集合可以通过任意类型查找所映射的具体对象<br><br></li>
</ul>
<p>集合框架体系图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;常用两个2根接口</div><div class="line">			  ___List(序列)[有序,可重复]</div><div class="line">	Collection       ___Queue(队列)[有序,可重复]</div><div class="line">			  ___Set(集)[无序,不可重复(通过hashcode和equals函数保证)]</div><div class="line"></div><div class="line">	Map       ___(键值对)</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>Collection类【实现集合接口的标准集合类】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">【ArrayList】   动态数组序列,异步,实现List接口</div><div class="line">【LinkedList】  双向链表,异步,实现List,Queue接口 </div><div class="line">【Vector】       动态数组,同步(线程安全)</div><div class="line">【Stack】         栈(后进先出)</div><div class="line">【HashSet】      哈希集</div><div class="line">                                (1.查询速度最快的集合; </div><div class="line">                                 2.内部HashCode实现;</div><div class="line">                                 3.内部顺序由哈希码决定;</div><div class="line">                                 4.不保证Set的迭代顺序 and 不保证顺序恒久不变),实现Set接口</div><div class="line">【LinkedHashSet】 继承HashSet,允许顺序插入迭代</div><div class="line">【TreeSet】            排序树集(1.内部TreeMap实现;2.使用元素自然顺序排序 or 使用提供的Comparator排序器排序)</div><div class="line">【HashMap】           哈希键值对</div><div class="line">                                    (1.哈希表数据结构实现;</div><div class="line">                                     2.j遇到冲突,使用散列链表的形式将所有相同的哈希地址的元素串起来)</div><div class="line">【TreeMap】           排序树键值对(</div><div class="line">                                     1.内部red-black(红-黑)数据结构实现;</div><div class="line">                                     2.实现了SortedMap接口);</div><div class="line">                                     3.需要维持内部元素的顺序,所以通常要比HashMap和HashTable慢</div><div class="line">【LinkedHashMap】     哈希键值对,允许顺序插入迭代</div><div class="line">【HashTable】     </div><div class="line">                        1.哈希表数据结构实现;</div><div class="line">                        2.解决冲突的方式与HashMap一样采用散列列表形式,不过性能比HashMap低;</div><div class="line">【Queue】	</div><div class="line">                        队列(先进先出),</div><div class="line">                        1.两类</div><div class="line">                                a.阻塞式队列(队列满了以后插入元素,抛出异常)</div><div class="line">                                b.双端队列(支持在头尾两端和移除元素)</div><div class="line"></div><div class="line">【PriorityQueue】 优先队列,是线程不安全</div><div class="line"></div><div class="line"> 【LinkedBlockingQueue】可选有界队列,线程安全,不允许有null值</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>ArrayList特性</p>
<ul>
<li>底层是基于数组实现(动态数组),动态增长内存,初始容量10,默认扩容1.5倍</li>
<li>非线程安全</li>
<li>查找效率高(通过下标直接查找指定元素),插入删除效率低(需要大量移动元素)</li>
<li>允许元素为null</li>
<li>可以指定初始容量(提升速度“效率和资源利用率”)</li>
<li>实现了Serializable接口(支持序列化，可以通过序列化传输)</li>
<li>实现了RandomAccess接口(支持快速随机访问,通过下标序号)</li>
<li>实现了Cloneable接口(能被克隆)<br><br></li>
</ul>
<p>LinkedList特性</p>
<ul>
<li>底层是基于双向循环链表(头结点不存放数据)</li>
<li>非线程安全</li>
<li>基于链表实现,不存在容量不足问题【无扩容方法】</li>
<li>查找效率低(有加速动作-index &lt;&gt; size/2),插入删除效率高</li>
<li>可作为栈,队列和双端队列来使用</li>
<li>实现了Serializable接口(支持序列化)</li>
<li>实现了Cloneable接口(能被克隆)</li>
<li>允许元素为null<br><br></li>
</ul>
<p>Vector特性</p>
<ul>
<li>线程安全(相对安全，有时候需要添加同步语句保证线程安全)</li>
<li>默认容量为10,默认扩容2倍</li>
<li>很多方法加入synchronized关键字</li>
<li>允许元素为null</li>
<li>实现了Serializable接口(支持序列化，可以通过序列化传输)</li>
<li>实现了RandomAccess接口(支持快速随机访问,通过下标序号)</li>
<li>实现了Cloneable接口(能被克隆)<br><br></li>
</ul>
<p>HashMap特性</p>
<ul>
<li>非线程安全(多线程需采用concurrent并发包下的concurrentHashMap)</li>
<li>初始容量(默认16)和加载因子(默认为0.75)</li>
<li>key和value都允许为null</li>
<li>实现了Serializable接口(支持序列化，可以通过序列化传输)</li>
<li>实现了Cloneable接口(能被克隆)<br><br></li>
</ul>
<p>Hashtable特性</p>
<ul>
<li>线程安全</li>
<li>同样基于哈希表，同样每个元素都是key-value(内部也通过单链表解决冲突问题)</li>
<li>与HashMap存储结构和解决冲突的方法是相同的</li>
<li>默认初始容量11【HashMap初始为16，要求一定为2的整数次幂】</li>
<li>key和value都不允许为null</li>
<li>实现了Serializable接口(支持序列化，可以通过序列化传输)</li>
<li>实现了Cloneable接口(能被克隆)<br><br></li>
</ul>
<p>Arrays和Collections的作用(都在java.util包内)</p>
<ul>
<li>操作数组和集合的两个工具类</li>
<li>ArrayList和Vector中大量调用Arrays.Copyof()</li>
<li>Collections中有很多static方法可以返回集合类的synchronized版本(线程安全版, 要用线程安全的结合类，首选Concurrent并发包的集合类)<br><br></li>
</ul>
<p>Comparable接口</p>
<ul>
<li>实现该接口表示,该实例可以比较大小,可以进行自然排序</li>
<li>定义”默认”的比较规则</li>
<li>需要自定义实现compareTo()函数</li>
<li>compareTo()返回正数表示大,负数表示小,0标识相等<br><br></li>
</ul>
<p>Comparator接口</p>
<ul>
<li>用于定义”临时”比较规则</li>
<li>需自定义实现compare()方法</li>
<li>Comparator和Comparable都是Java集合框架的成员<br><br></li>
</ul>
<p>Iterator(迭代器)</p>
<ul>
<li>java.util包的接口,在集合中循环遍历元素</li>
<li>支持从源集合安全的删除对象(指针,it.remove()),当打开Iterator迭代集合同时有在对集合进行修改,避免ConcurrentModifiedException</li>
<li>只能遍历Collection的子类,不能遍历Map的子类</li>
<li>Collection的实现类都实现了iterator()，返回Iterator对象(ListIterator专门遍历List,EnumerationJDK.1.0引用，作用与其相同，功能要少,只能在Hashtable,Vector和Stack中使用)</li>
<li>ListIterator(接口) 继承了 Iterator [来允许一个列表的双向遍历和元素的修改]<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;	</div><div class="line">		List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</div><div class="line">		for(int i = 0; i &lt; 100; i++)&#123;</div><div class="line">			list.add(i);</div><div class="line">		&#125;</div><div class="line">		Iterator&lt;Integer&gt; it = list.iterator();</div><div class="line">		while(it.hasNext())&#123;</div><div class="line">			System.out.print(it.next() + &quot; &quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>判断是集合中是否拥有指定元素</p>
<ul>
<li>使用contains()或者containsValue()【键值对】</li>
<li>遍历List中每一个元素，然后调用每一个元素的equals()，去跟contains()中方法参数进行比较,如果有一个元素的equals()返回true,则结果最终返回true(如果是自定义Object对象,需要根据需求重写equals方法),时间复杂度是O(n)<br><br></li>
</ul>
<p>集合排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;默认升序【注意:进行sort排序时,列表中的所有元素都必须实现Comparable接口否则编译器会提错】</div><div class="line">		Collections.sort(List&lt;T&gt; list); //默认从小到大</div><div class="line"></div><div class="line"></div><div class="line">&lt;1-2&gt;将元素反转【顺序调换】</div><div class="line">		Collections.reverse(List&lt;T&gt; list);</div><div class="line"></div><div class="line">&lt;2&gt;自定义排序 [对象外部,可改为升序 or 降序]</div><div class="line">		Collections.sort(list, new Comparator&lt;Integer&gt;() &#123;  </div><div class="line">				    @Override  </div><div class="line">				    public int compare(Integer a, Integer b) &#123;  </div><div class="line">				        return a&gt;b ?  1: ( a==b ? 0 : -1);    //a &gt;b(1) a==b(0) a&lt;b(-1)</div><div class="line">				    &#125;  </div><div class="line">				&#125;);  </div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;对象排序[实现Comparable接口,对象内部定义排序]</div><div class="line">			/*Bean对象*/</div><div class="line">			public class Person implements Comparable&lt;Person&gt;&#123;  </div><div class="line">			    private String name;  </div><div class="line">			    private int age;  </div><div class="line"></div><div class="line">			    public Person(String name, int age) &#123;  </div><div class="line">			        this.name = name;  </div><div class="line">			        this.age = age;  </div><div class="line">			    &#125;  </div><div class="line">			    </div><div class="line">			    //实现compareTo()函数</div><div class="line">			    @Override  </div><div class="line">			    public int compareTo(Person o) &#123;  </div><div class="line">			        return (o.age &lt; age) ? -1 : ((o.age==age)?0 : 1);     //这里定义根据年龄，降序 </div><div class="line">			    &#125;  </div><div class="line">			      </div><div class="line">			    //getter</div><div class="line">			    public String getName()&#123;		</div><div class="line">			    	return name; </div><div class="line">			    &#125;</div><div class="line">			    public int getAge()&#123;			</div><div class="line">			    	return age;  	</div><div class="line">			    &#125;</div><div class="line">			&#125;  </div><div class="line"></div><div class="line">			/*测试类*/</div><div class="line">			public class test&#123;</div><div class="line">				public static void main(String[] args) &#123;	</div><div class="line">					Person a = new Person(&quot;皮皮翔&quot;,5);  </div><div class="line">					Person b = new Person(&quot;皮皮勋&quot;,62);  </div><div class="line">					Person c = new Person(&quot;皮皮强&quot;,12);  </div><div class="line">					List&lt;Person&gt; plist = new ArrayList&lt;Person&gt;();  </div><div class="line">					plist.add(a);  </div><div class="line">					plist.add(b);  </div><div class="line">					plist.add(c);  </div><div class="line">					Collections.sort(plist);  </div><div class="line">					for(Person info : plist)&#123;  </div><div class="line">					    System.out.println(&quot;Name:&quot;+info.getName()+&quot;	-&gt;	Age:&quot;+info.getAge());  </div><div class="line">					&#125;  </div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">				*************输出结果**************</div><div class="line">				Name:皮皮勋	-&gt;	Age:62</div><div class="line">				Name:皮皮强	-&gt;	Age:12</div><div class="line">				Name:皮皮翔	-&gt;	Age:5</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>集合去重<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;ArrayList有序去重【自定义对象】</div><div class="line">	     //a.将集合中元素倒叙</div><div class="line">	        Collections.reverse(clist);  //反转排序</div><div class="line">	  	    //Collections.sort(clist);    //自定义对象倒叙，内部需实现Comparable接口[里面的public int compareTo(Object obj) ]</div><div class="line">	       </div><div class="line">        </div><div class="line">	    //b.将集合元素去重</div><div class="line">	        LinkedHashSet&lt;ClassMastesUser&gt;  linkSet=new LinkedHashSet&lt;ClassMastesUser&gt;(clist); [需根据需求重写hashCode()和equals(),Set集合先比较hasCode值,如果相等,再比较equals]</div><div class="line">	        clist.clear();</div><div class="line">	        clist.addAll(linkSet);</div><div class="line">	        Collections.reverse(clist);</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="10-泛型与对象序列化"><a href="#10-泛型与对象序列化" class="headerlink" title="10.泛型与对象序列化"></a>10.泛型与对象序列化</h2><p>泛型(generics)的应用</p>
<ul>
<li>限制类型参数(不能是原始类型(例:int double),必须是引用类型)</li>
<li>泛型函数</li>
<li>泛型类<br><br></li>
</ul>
<p>特点</p>
<ul>
<li>只在程序源码中存在(编译后字节码文件,已被替换为原来原生类型,并在相应类型插入强制转换代码)</li>
<li>对于运行期的Java语言来说，ArrayList<string>和ArrayList<integer>就是同一个类</integer></string></li>
<li>泛型技术实际是Java语言的一颗语法糖(Java语言中的泛型实现方法称为类型擦除,基于这种方法实现的泛型被称为伪泛型)</li>
<li>Java中集合的泛型,是防止错误输入的,只能在编译阶段有效【有泛型和无泛型的ArrayList,得到的Class对象进行==比较,返回true】</li>
<li>可以对对象的Class进行反射操作,绕过泛型添加元素<br><br></li>
</ul>
<p>简单实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;遍历打印不同类型的数组</div><div class="line">		public class test&#123;	</div><div class="line">			public static &lt;E&gt; void printArray(E [] array)&#123;</div><div class="line">				for(E element: array)&#123;    //遍历数组</div><div class="line">					System.out.print(element);</div><div class="line">				&#125;</div><div class="line">				System.out.println(); //换行</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			public static void main(String[] args) &#123;</div><div class="line">				  Integer[] intArray = &#123; 1, 2, 3, 4, 5 &#125;;</div><div class="line">			      Double [] doubleArray = &#123; 1.1, 2.2, 3.3, 4.4 &#125;;</div><div class="line">			      Character[] charArray = &#123; &apos;H&apos;, &apos;E&apos;, &apos;L&apos;, &apos;L&apos;, &apos;O&apos; &#125;;</div><div class="line">			      </div><div class="line">			      printArray(intArray);</div><div class="line">			      printArray(doubleArray);</div><div class="line">			      printArray(charArray);</div><div class="line">			      </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;泛型类</div><div class="line">		public class test&#123;	</div><div class="line"></div><div class="line">			public static void main(String[] args) &#123;</div><div class="line">				//1.声明</div><div class="line">				Box&lt;Integer&gt; iBox = new Box&lt;Integer&gt;();</div><div class="line">			    Box&lt;String&gt; sBox = new Box&lt;String&gt;();  </div><div class="line">			    </div><div class="line">			    //2.赋值</div><div class="line">			    iBox.add(10);</div><div class="line">			    sBox.add(&quot;皮皮&quot;);</div><div class="line">			    </div><div class="line">			    //3.输出</div><div class="line">			    System.out.println(iBox.get());</div><div class="line">			    System.out.println(sBox.get());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		class Box&lt;T&gt;&#123;</div><div class="line">			private T t;</div><div class="line">			public void add(T t)&#123;</div><div class="line">				this.t =t;</div><div class="line">			&#125;</div><div class="line">			public T get()&#123;</div><div class="line">				return t;</div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br></p>
<p>对象序列化</p>
<ul>
<li>Java的一种对象序列化的机制</li>
<li>对象被描述成一系列包括对象的数据,以及有关对象的类型，和在对象中存储的数据的类型<strong>的字节</strong></li>
<li>一个序列化的对象被写进文件,能在文件中被读出,并反序列化为类型信息和表示对象的字节,并且它的数据可以被用来重新创建为内存中的对象</li>
<li>整个过程都是 Java 虚拟机（JVM）独立的，也就是说，在一个平台上序列化的对象可以在另一个完全不同的平台上反序列化该对象。<br><br></li>
</ul>
<p>序列化标准</p>
<ul>
<li>类必须实现java.io.Serializable[接口]【不实现就不能序列化】</li>
<li>标记为transient(瞬态)的元素,不会进行jvm的默认序列化</li>
<li>序列化对象到文件中时候,java中标准是文件扩展名(后缀)为.ser</li>
<li>一个类实现了Serializable接口,那么其子类都能进行序列化</li>
<li>若父类没有实现Serializable接口,子类继承父类并实现Serializable接口,那么子类执行序列化操作时,父类的构造函数会被默认调用(如果都执行了序列化,则父类的构造函数是不会被调用的)<br><br></li>
</ul>
<p>案例【对象序列化和反序列化】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">		class Employee implements Serializable&#123;</div><div class="line">			public String name;</div><div class="line">			public String  address;</div><div class="line">			public transient int SSN;</div><div class="line">			public int number;</div><div class="line">			public void check()&#123;</div><div class="line">				System.out.println(&quot;name : &quot; + name + &quot; --- address : &quot; + address);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		public class test&#123;	</div><div class="line">			//测试主方法</div><div class="line">				public static void main(String[] args) &#123;</div><div class="line">					Employee e = new Employee();</div><div class="line">						e.name = &quot;皮皮&quot;;</div><div class="line">						e.address = &quot;大街上&quot;;</div><div class="line">						e.SSN = 142101;</div><div class="line">						e.number = 1;</div><div class="line">						</div><div class="line">					doSerializable(e);										 //执行序列化</div><div class="line">					doInSerializable(&quot;src/test/object.ser&quot;);    //执行反序列化</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">			//A-序列化</div><div class="line">			public static &lt;E&gt; void doSerializable(E e)&#123;//参数： 对象(泛型)</div><div class="line">				try&#123;</div><div class="line">					//1.定义</div><div class="line">					FileOutputStream fileOut = new FileOutputStream(&quot;src/test/object.ser&quot;);</div><div class="line">					ObjectOutputStream  out = new ObjectOutputStream(fileOut);</div><div class="line">					</div><div class="line">					//2.写入流</div><div class="line">					out.writeObject(e);</div><div class="line">					</div><div class="line">					//3.关闭流</div><div class="line">					out.close();</div><div class="line">					fileOut.close();</div><div class="line">					</div><div class="line">					System.out.println(&quot;序列化成功！  -&gt;	文件保存至项目根路径/src/test/object.ser&quot;);</div><div class="line">					</div><div class="line">				&#125;catch(IOException i)&#123;</div><div class="line">					i.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			//B-反序列化</div><div class="line">			public static void doInSerializable(String path)&#123; //参数：路径</div><div class="line">			</div><div class="line">				Employee e = null;    //泛型</div><div class="line">				try&#123;</div><div class="line">					//1.定义</div><div class="line">					FileInputStream  fileIn = new FileInputStream(path);</div><div class="line">					ObjectInputStream in = new ObjectInputStream(fileIn);</div><div class="line">					</div><div class="line">					//2.读取流</div><div class="line">					e = (Employee)in.readObject();</div><div class="line">					</div><div class="line">					//关闭流</div><div class="line">					in.close();</div><div class="line">					fileIn.close();</div><div class="line"></div><div class="line">					System.out.println(&quot;反序列化成功！  -&gt;	成功读取&quot; + path + &quot;文件&quot;);</div><div class="line">					</div><div class="line">				&#125;catch(IOException i)&#123;</div><div class="line">					i.printStackTrace();</div><div class="line">				&#125;catch(ClassNotFoundException c)&#123;</div><div class="line">					System.out.println(&quot;没有发现文件&quot;);</div><div class="line">					c.printStackTrace();</div><div class="line">				&#125;</div><div class="line">						</div><div class="line">				//打印输出【验证是否反序列化成功】</div><div class="line">				    System.out.println(&quot;Name: &quot; + e.name);</div><div class="line">				    System.out.println(&quot;Address: &quot; + e.address);</div><div class="line">				    System.out.println(&quot;SSN: &quot; + e.SSN);       //因为SSN设置了transient(瞬态),不能被序列化，所以输出的是SSN的类型(int)的默认值0</div><div class="line">				    System.out.println(&quot;Number: &quot; + e.number);</div><div class="line">			</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">			*******************控制台输出***********************</div><div class="line"></div><div class="line">				序列化成功！  -&gt;	文件保存至项目根路径/src/test/object.ser</div><div class="line">				反序列化成功！  -&gt;	成功读取src/test/object.ser文件</div><div class="line">				Employee对象反序列化结果-------------------&gt;</div><div class="line">				Name: 皮皮</div><div class="line">				Address: 大街上</div><div class="line">				SSN: 0</div><div class="line">				Number: 1</div><div class="line"></div><div class="line"></div><div class="line">注意：</div><div class="line">	1.object.ser是生成的序列化文件</div><div class="line">	2.Emplyee对象的SSN字段,被设置成transient(瞬态),所以没被序列化</div><div class="line">	3.反序列化时,调用readObject() ,得到结果需要强转为对象类型</div><div class="line">	4.try/catch需要捕获2个异常(IOException 和 ClassNotFoundException)</div></pre></td></tr></table></figure></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="11-静态关键字static"><a href="#11-静态关键字static" class="headerlink" title="11.静态关键字static"></a>11.静态关键字static</h2><p>&emsp; “static”关键字表明一个成员变量or成员方法可以在没有所属的类的实例变量的情况下被访问。<br><br></p>
<p>Java中的static方法不能被覆盖</p>
<ul>
<li>因为方法覆盖是基于运行时动态绑定的,而static方法是编译时静态绑定的。static跟类的任何实例都不相关,概念上不适用<br><br></li>
</ul>
<p>不可以在static环境下访问非static变量</p>
<ul>
<li>static是属于类的,在该类中所有实例的值是共享唯一的,当Java虚拟机载入类时,会对static变量进行初始化,如果代码尝试不用实例访问非static变量,编译器会报错,因为非static变量还没被创建出来,没有跟任何实例关联<br><br></li>
</ul>
<p>静态方法</p>
<ul>
<li>静态方法中,可以直接调用同类中的静态成员,但不能直接调用非静态成员[(变量 or 方法)如需调用,则要创建类的对象]</li>
<li>普通成员方法中,可以直接访问同类的非静态变量和静态变量<br><br></li>
</ul>
<p>静态初始块</p>
<ul>
<li>只在类加载时执行,只执行1依次</li>
<li>只能给静态变量赋值,不能给普通成员变量赋值<br><br></li>
</ul>
<p>类的默认执行顺序 [Father.java 和 Child.java(extends Father)]</p>
<ol>
<li>父类静态变量<br>2 父类的静态代码块【static{ … }】<br>3.子类静态变量</li>
<li>子类静态代码块</li>
<li>父类构造(非静态)代码块【{ … }】<br>6 父类构造函数</li>
<li>子类构造代码块</li>
<li>子类构造函数<br><br></li>
</ol>
<hr>
<p><br><br></p>
<h2 id="12-内部类"><a href="#12-内部类" class="headerlink" title="12.内部类"></a>12.内部类</h2><p>&emsp;《Think in java》中的一句话<code>使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响</code><br><br></p>
<p>特点：【部分摘自《Think in java》】</p>
<ol>
<li>解决多重继承的问题</li>
<li>内部类可以用多个实例[每个实例都有自己的状态信息 and 与其他外围对象的信息相互独立]</li>
<li>在单个外围类中，可以让多个内部类以不同的方式实现同一个接口，或者继承同一个类</li>
<li>创建内部类对象,不依赖于外围类对象的创建【内部类对象需要另外创建,[<br>外部类.内部类 内部类对象名 = 外部类对象名.new 内部类()]】</li>
<li>内部类并没有令人迷惑的“is-a”关系，他就是一个独立的实体</li>
<li>内部类提供了更好的封装，除了该外围类，其他类都不能访问 </li>
<li>内部类无限制访问外围类元素</li>
<li>内部类是编译时的概念【编译成功后,它就与外围类属于两个完全不同的类,会生成两个文件(例如:Test.class和Test&amp;Inner.class),它们之间的联系依然存在】</li>
<li>内部类可以使用代码块<br><br></li>
</ol>
<p>外部类和内部类的修饰符区别<br>外部类只用public,abstract,final<br>内部类可以用修饰成员变量的修饰符修饰内部类,比如private,static,protected<br><br></p>
<p>final的使用</p>
<ul>
<li>所在的方法的形参需要被内部类(局部内部类)里面使用时，该形参必须为 final<br><br></li>
</ul>
<p>四种内部类类型:</p>
<ul>
<li>成员内部类</li>
<li>局部内部类 </li>
<li>匿名内部类 </li>
<li>静态内部类<br><br></li>
</ul>
<p>成员内部类</p>
<ul>
<li>定义在Outer类的内部,相当于Outer类一个成员变量的位置,可适用任意的访问控制符(public,protected,private)</li>
<li>Inner(内部)类可以直接访问Outer(外部)类中的数据,不受访问控制符影响(可直接访问私有属性)</li>
<li>Outer类不能直接使用Inner类的成员和方法</li>
<li>定义后,必须Outer类对象来创建Inner类对象,不能直接new(例:内部类 对象名 = 外部类对象.new 内部类())</li>
<li>Outer类和Inner类具有相同成员变量or方法时,Inner默认访问自己的,如果要访问外部类,需要使用this关键字</li>
<li>编译文件后,会初相两个.class</li>
<li>当于非静态内部类,可以直接访问外围类的数据(包含私有数据)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public  class Test &#123;</div><div class="line">            private String name;</div><div class="line">            public void setName(String name)&#123;</div><div class="line">                this.name = name;</div><div class="line">            &#125;</div><div class="line">            //成员内部类</div><div class="line">            public class Persion&#123;</div><div class="line">                public void run()&#123;</div><div class="line">                    System.out.println( name + &quot;在奔跑&quot;);  //调用外围类的成员变量</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            //测试主方法</div><div class="line">            public static void main(String[] args) &#123;</div><div class="line">                Test t = new Test();</div><div class="line">                t.setName(&quot;皮皮&quot;);</div><div class="line">                Persion  p = t.new Persion();</div><div class="line">                p.run();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        *************控制台输出****************</div><div class="line">                    皮皮在奔跑</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>局部内部类</p>
<ul>
<li>不能在方法以外的地方使用</li>
<li>不能使用访问控制符(private,default,protected,public)和static修饰符<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public  class Test &#123;</div><div class="line">            public void show(final String name)&#123;  //声明final的形参，才能被内部里调用</div><div class="line">                class Person&#123;</div><div class="line">                    public  Person()&#123;</div><div class="line">                        System.out.println(name + &quot;在吃饭&quot;);  </div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                Person p = new Person();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            //主方法</div><div class="line">            public static void main(String[] args) &#123;</div><div class="line">                Test t = new Test();</div><div class="line">                t.show(&quot;皮皮&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;   </div><div class="line"></div><div class="line">    *************控制台输出****************</div><div class="line">                 皮皮在奔跑</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>匿名内部类</p>
<ul>
<li>使用时,必须继承一个类 or 实现一个接口(两者不能兼得,同时也只能各有1个)</li>
<li>本身不能是抽象的,必须实现继承or接口的所有抽象方法</li>
<li>不能定义构造函数</li>
<li>不能有static的成员变量和方法</li>
<li>类似于”局部内部类”,所以局部内部类所有限制同样生效<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">interface Wing&#123;                                              //翅膀接口</div><div class="line">        public void fly(); </div><div class="line">    &#125;</div><div class="line">    abstract class Animal implements Wing&#123;   //动物抽象类</div><div class="line">        public abstract void eat ();</div><div class="line">    &#125;</div><div class="line">    public  class Test &#123;</div><div class="line">        public void test(Animal animal)&#123;            //Test对象的测试方法，传入一个Animal对象</div><div class="line">            animal.eat();</div><div class="line">            animal.fly();</div><div class="line">        &#125;</div><div class="line">        public static void main(String[] args) &#123;</div><div class="line">            Test t  = new Test();</div><div class="line">            t.test(new Animal()&#123;                             //调用test方法,且用匿名内部类去实现 动物抽象类 and 翅膀接口的 抽象方法</div><div class="line">                @Override</div><div class="line">                public void eat()&#123;</div><div class="line">                    System.out.println(&quot;动物需要吃饭&quot;);</div><div class="line">                &#125;</div><div class="line">                @Override</div><div class="line">                public void fly()&#123;</div><div class="line">                    System.out.println(&quot;有翅膀的动物可以飞&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;   </div><div class="line"></div><div class="line"></div><div class="line">    *************控制台输出****************</div><div class="line">                动物需要吃饭</div><div class="line">                有翅膀的动物可以飞</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>静态内部类</p>
<ul>
<li>不能直接访问Outer类发的非静态成员(可通过“new 外部类().成员”)<br>+【同名问题】1.与Outer类的静态成员名相同,使用”类名.静态成员访问”;2.与Outer类的静态成员名不同,使用”静态成员名”直接访问;</li>
<li>创建静态内部类对象时,不需要外部类对象”内部类 对象名 = new 内部类()”</li>
<li>只有静态内部类才可以用关键字static<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public  class Test &#123;</div><div class="line">               static private String name;</div><div class="line">               private Integer height;</div><div class="line">               private Integer weight;</div><div class="line">               </div><div class="line">               static class Animal&#123;</div><div class="line">                   static  private String age;</div><div class="line">                   public static void show()&#123;</div><div class="line">                       name = &quot;皮皮&quot;;</div><div class="line">                       age = &quot;21&quot;;</div><div class="line">                       System.out.println(&quot;这个动物 name : &quot; + name  + &quot;------age :&quot; + age); //只能访问外部静态的name,不能访问非静态的height,weight</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               //主方法</div><div class="line">               public static void main(String[] args) &#123;</div><div class="line">                   Test.Animal.show();  //直接 外围类名.内部类名.方法名()调用</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           *************控制台输出****************</div><div class="line">               这个动物 name : 皮皮------age :21</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="13-多线程基础"><a href="#13-多线程基础" class="headerlink" title="13.多线程基础"></a>13.多线程基础</h2><p>进程</p>
<ul>
<li>程序(任务)的执行过程</li>
<li>持有资源(共享内存,共享文件)和线程<br><br></li>
</ul>
<p>线程</p>
<ul>
<li>线程是系统中最小的执行单元</li>
<li>同一进程中有多个线程</li>
<li>线程共享进程的资源</li>
<li>java工具,查看线程类型(用户or守护)和线程状态【<code>jstat.exe</code>命令行工具,<code>jvisualvm.exe</code>界面话工具】<br><br></li>
</ul>
<p>进程和线程的区别</p>
<ul>
<li>【定义】进程是执行着的应用程序,线程是进程内部的一个执行序列</li>
<li>【从属关系】进程划分大于线程,一个进程可以包含多个线程</li>
<li>【形式】进程是程序的一个动态形式,是CPU,内存等资源占用的基本单位;线程无法占用这些资源</li>
<li>【通信】进程相互独立,通信困难;线程共享一块内存区域,通信方便</li>
<li>【固定】进程执行过程中,包含比较固定的入口,执行顺序,出口;而线程的这些过程被应用程序所控制<br><br></li>
</ul>
<p>Java线程两种类型<br>1.【用户线程】运行在前台,执行具体的任务(例:程序主线程,连接网络的子线)<br>2.【守护线程】运行在后台,为其他前台线程服务<br><br></p>
<p>守护线程的特点</p>
<ul>
<li>一旦所有用户线程都结束运行,守护线程会随JVM一起结束工作(自动结束)</li>
<li>【应用】数据连接池中的和JVM虚拟机启动后的监测线程,垃圾回收线程</li>
<li>通过Thread类的<code>setDaemon(true)</code>,设置当前线程为守护线程[]</li>
<li>【注意】setDaemon(true)必须在start()方法前调用,否则会抛出IllegalThreadStateException异常</li>
<li>【注意】在守护线程中产生的新线程也是守护线程</li>
<li>【注意】不是所有任务都可以分配守护线程(比如读写操作 or 计算逻辑)<br><br></li>
</ul>
<p>线程的生命周期</p>
<ul>
<li>【新建New】</li>
<li>【可运行Runnable】调用线程的start(),此时线程只是进入线程队列,等待获取CPU服务</li>
<li>【运行 Running】处于就绪的线程,获取了PCU资源,进入运行状态,指向run()内程序代码</li>
<li>【阻塞 Blocked】由于某些原因而暂时让出CPU资源,暂停自己的执行(例如:调用sleep())</li>
<li>【死亡 Dead】 线程的run()执行完毕 or 线程调用了stop()<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> &lt;1&gt; 新建( new )：新创建了一个线程对象。</div><div class="line">&lt;2.&gt;可运行( runnable )：线程对象创建后，其他线程(比如 main 线程）调用了该对象 的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 cpu 的使用权 。</div><div class="line">&lt;3&gt;运行( running )：可运行状态( runnable )的线程获得了 cpu 时间片（ timeslice ） ，执行程序代码。</div><div class="line">&lt;4&gt; 阻塞( block )：阻塞状态是指线程因为某种原因放弃了 cpu 使用权，也即让出了 cpu timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。阻塞的情况分三种：</div><div class="line">          (一). 等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。</div><div class="line">          (二). 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁 被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。</div><div class="line">          (三). 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。            当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态。</div><div class="line">&lt;5&gt; 死亡( dead )：线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>线程优先级</p>
<ul>
<li>1到10的范围内,默认优先级为5</li>
<li>MIN_PRIORITY(表示常数1),MAX_PRIORITY(常熟10),NORM_PRIORITY(常数5)<br><br></li>
</ul>
<p>四种方式创建线程  </p>
<ol>
<li>继承Thread类，重写run方法；</li>
<li>实现Runnable接口，重写run方法，但是比继承Thread类好用，实现接口还可以继承类，避免了单继承带来的局限性；</li>
<li>实现callable接口，重写call方法(优点是可以获取返回值)</li>
<li>.使用Executor框架实现线程池<br><br></li>
</ol>
<p>停止线程的方法</p>
<ol>
<li>【使用退出的标志】全局变量,用volatie关键字修饰变量(可见性关键,保证了线程正确的读取变量的值)</li>
<li>【使用stop()】 突然立刻停止，强行关闭,已被淘汰</li>
<li>【使用interrupt()】 线程1由于sleep,join等方法进入阻塞状态,其他线程运行中调用线程1的interrup(),则清除线程1的中断状态(isterrupted()-中断标志为false和并当前线程收到InterrruptedException异常)<br><br></li>
</ol>
<p>线程之间的交互<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">【同步的实现】</div><div class="line">【wait() 】在其他线程调用此对象的notify()或者notifyAll()之前,线程等待</div><div class="line">【notify() 】随机唤醒此对象监视器上等待的单个线程</div><div class="line">【nofifyAll()】唤醒此对象监视器上等待的所有线程</div><div class="line">【可见性】一个线程对共享变量值的修改,能够及时被其他线程看到</div><div class="line">【共享变量】如果一个变量在多个线程的工作内存中都存在副本,那么这几个变量就是这几个线程的共享变量</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>同步方法和同步代码块的区别</p>
<ul>
<li>【锁】同步方法默认用this 或者当前类class对象作为锁,同步代码快可以自主选择以什么来加锁(比同步方法更细颗粒度),可以之选会发生同步问题的部分代码,而不是整个方法</li>
<li>【修饰】同步方法用关键字synchronized修饰,同步代码只修饰需要进行同步的代码用<code>synchronized(object){ 代码.... }</code><br><br></li>
</ul>
<p>在监视器(Monitor)内部,如果和做到线程同步</p>
<ul>
<li>监视器和锁在Java虚拟机中一块使用,监视器监视一块同步代码块,确保依次只有一个线程执行同步代码快</li>
<li>每一个监视器都和一个对象引用相关联</li>
<li>线程在获取锁之前不运行执行同步代码块<br><br></li>
</ul>
<p>死锁</p>
<ul>
<li>是指多个进 程因竞争资源而造成的一种僵局（互相等待），若无外力作用，这些进程都将无法向前推进</li>
<li>【死锁产生的四个必要条件】1.互斥条件;2.不剥夺条件;3.请求和保持条件;4.循环等待条件<br><br></li>
</ul>
<p>如何确保N个线程可以访问N个资源同时不导致死锁</p>
<ul>
<li>指定获取锁的顺序,并强制线程按照指定顺序获取锁(所有线程以同样顺序加锁和释放锁,就不会造成死锁了)<br><br></li>
</ul>
<p> 线程的应用实例和场景:</p>
<ol>
<li>【线程池】     实现Thread子类的实例可以执行多个实现了Runnable的线程<br>2.【共享变量】   关键字volatile声明,所有线程可见,读取最后一次修改</li>
<li>【同步关键字】 声明为synchronized<br><br></li>
</ol>
<p>Thread(继承父类)和Runnable(实现接口)的区别</p>
<ul>
<li>Runnable方式可以避免Thread方式由于Java单继承特性带来的缺陷</li>
<li>Runnable的代码可以被多个线程(Thread实例)共享,适用于多个线程处理“同一资源”的情况 【一个实现Runnable对象,分别构建三个Thread】<br><br></li>
</ul>
<p>典型例题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;java的main线程是不是最后一个退出的线程</div><div class="line">           a. JVM会在所有的非守护线程（用户线程）执行完毕后退出；</div><div class="line">           b. main线程是用户线程；</div><div class="line">           c. 仅有main线程一个用户线程执行完毕，不能决定JVM是否退出，(也即是说main线程并不一定是最后一个退出的线程)</div><div class="line"></div><div class="line">&lt;2&gt;Thread.run(),并没有启动一个新的线程，而只是调用线程中名为run()方法</div><div class="line">     Thread.start(),启动线程并调用run()方法</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt; 创建时，定义线程的名字(方便根据名字查找哪个线程正在输出)</div><div class="line">    MyRunnable runnable = new MyRunnable();</div><div class="line">    Thread thread = new Thread(runnable, &quot;New Thread Name&quot;);</div><div class="line"></div><div class="line">&lt;4&gt;得到当先线程的名字(Thread.currentThread() -&gt; 得到当前线程的引用)</div><div class="line">    String threadName = Thread.currentThread().getName();</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>Thread类常用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">【获取线程名称】getName();</div><div class="line">【取得当前线程对象】currentThread();</div><div class="line">【判断是否启动】isAlive();</div><div class="line">【强行运行[其余所有等待]】：join();</div><div class="line">【线程休眠】：sleep();</div><div class="line">【线程礼让(当前线程释放处理资源)】：yield();</div><div class="line">【配套锁】suspend()和resume()配套使用,suspend使线程进入阻塞,并不会自动恢复,必须等其对应的resume被调用时,才能使线程进入可执行状态</div><div class="line"></div><div class="line">注意：方法容易造成死锁,已被标记过时(Thread.suspend行为被打断不会导致InterruptedException)</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>ThreadLocal类</p>
<ul>
<li>【用途】用于创建一个线个线程都提供一个变量的副本,为每个线程都维护了自己独有的变量拷贝(重要作用在于数据程本地变量</li>
<li>【原理】采用哈希表的方式来为每的独立,而不是多线程的数据共享)</li>
<li>【优点】保证各个线程间数据安全,每个线程的数据不会被另外线程访问和破坏</li>
<li>【应用场景】数据库连接,既可以保证线程安全,又可以让性能不会太低,缺点是占用较多的空间<br><br></li>
</ul>
<p>java创建线程的四种方</p>
<ul>
<li>实现Runnable接口式</li>
<li>继承Thread类</li>
<li>匿名内部类[继承Thread(有对象 or 无对象)]</li>
<li>匿名内部类[实现Runnable(有对象 or 无对象)]<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;实现Runnable接口</div><div class="line">        class R implements Runnable&#123;</div><div class="line">            public void run()&#123;</div><div class="line">                for(int i = 0; i &lt; 10; i++)&#123;</div><div class="line">                    System.out.println(&quot;R线程 ：疯狂奔跑的皮皮&quot; + i );</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        public class test&#123;</div><div class="line">            public static void main(String[] args) &#123;</div><div class="line">                        Thread t = new Thread(new R());   //新建实例化Thread类,将实现Runable接口的类作为参数传入</div><div class="line">                        t.start();</div><div class="line">                        for(int i = 0;i &lt; 10;i++)&#123;</div><div class="line">                            System.out.println(&quot;Main线程 :&quot;+&quot;走路的糖糖&quot; + i );</div><div class="line">                        &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;继承Thread类</div><div class="line">        class T extends Thread&#123;</div><div class="line">            private String name;</div><div class="line">            </div><div class="line">            public T(String name)&#123;</div><div class="line">                this.name = name;</div><div class="line">            &#125;</div><div class="line">            public void run()&#123;                     //运行</div><div class="line">                for(int i = 0;i &lt; 5; i++)&#123;</div><div class="line">                    System.out.println(name+&quot;线程 :&quot;+&quot;走路的&quot; + i );</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        public class test &#123;</div><div class="line">            public static void main(String[] args) &#123;</div><div class="line">                    T t = new T(&quot;皮皮&quot;);</div><div class="line">                    t.start();</div><div class="line">                    T t2 = new T(&quot;糖糖&quot;);</div><div class="line">                    t2.start();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ***************控制台输出**************</div><div class="line">            皮皮线程 :走路的0</div><div class="line">            糖糖线程 :走路的0</div><div class="line">            糖糖线程 :走路的1</div><div class="line">            皮皮线程 :走路的1</div><div class="line">            皮皮线程 :走路的2</div><div class="line">            皮皮线程 :走路的3</div><div class="line">            皮皮线程 :走路的4</div><div class="line">            糖糖线程 :走路的2</div><div class="line">            糖糖线程 :走路的3</div><div class="line">            糖糖线程 :走路的4</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;匿名内部类[继承Thread(有对象 or 无对象)]</div><div class="line">        /*有对象*/</div><div class="line">        public class test &#123;</div><div class="line">            public static void main(String[] args) &#123;</div><div class="line">                    Thread t = new Thread(&quot;皮皮&quot;)&#123;</div><div class="line">                        public void run()&#123;                     //运行</div><div class="line">                            for(int i = 0;i &lt; 5;i++)&#123;</div><div class="line">                                System.out.println(this.getName()+&quot;线程 :&quot;+&quot;走路的&quot; + i );</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;;</div><div class="line">                    t.start();</div><div class="line">                    </div><div class="line">                    //继续mian线程</div><div class="line">                    for(int i = 0;i&lt; 5; i++)&#123;</div><div class="line">                            System.out.println(&quot;糖糖开始奔跑&quot;+i);</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;   </div><div class="line">    </div><div class="line"></div><div class="line">        /* 无对象*/</div><div class="line">        public class test &#123;</div><div class="line">            public static void main(String[] args) &#123;</div><div class="line">                    new Thread(&quot;皮皮&quot;)&#123;</div><div class="line">                        public void run()&#123;                     //运行</div><div class="line">                            for(int i = 0;i &lt; 5;i++)&#123;</div><div class="line">                                System.out.println(this.getName()+&quot;线程 :&quot;+&quot;走路的&quot; + i );</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;.start();</div><div class="line">                    </div><div class="line">                    //继续mian线程</div><div class="line">                    for(int i = 0;i&lt; 5; i++)&#123;</div><div class="line">                            System.out.println(&quot;糖糖开始奔跑&quot;+i);</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;匿名内部类[实现Runnable(有对象 or 无对象)]</div><div class="line">        /* 有对象*/</div><div class="line">        public class test &#123;</div><div class="line">            public static void main(String[] args) &#123;</div><div class="line">                    Thread  t = new Thread(new Runnable() &#123;</div><div class="line">                        @Override</div><div class="line">                        public void run() &#123;</div><div class="line">                            for(int i = 0;i &lt; 5;i++)&#123;</div><div class="line">                                System.out.println(&quot;线程 :&quot;+&quot;走路的&quot; + i );</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                    t.start();</div><div class="line">                    </div><div class="line">                    //继续mian线程</div><div class="line">                    for(int i = 0;i&lt; 5; i++)&#123;</div><div class="line">                            System.out.println(&quot;糖糖开始奔跑&quot;+i);</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        /* 无对象*/</div><div class="line">        public class test &#123;</div><div class="line">            public static void main(String[] args) &#123;</div><div class="line">                    new Thread(new Runnable() &#123;</div><div class="line">                        @Override</div><div class="line">                        public void run() &#123;</div><div class="line">                            for(int i = 0;i &lt; 5;i++)&#123;</div><div class="line">                                System.out.println(&quot;线程 :&quot;+&quot;走路的&quot; + i );</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;).start();</div><div class="line">                    </div><div class="line">                    //继续mian线程</div><div class="line">                    for(int i = 0;i&lt; 5; i++)&#123;</div><div class="line">                            System.out.println(&quot;糖糖开始奔跑&quot;+i);</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>java concurrent包下的类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">【Semaphore】控制某个资源可被同时访问的个数</div><div class="line">【ReentrantLock】具有与使用ynchronized方法和语句锁访问的隐式监视器相同的一些基本行为和语义,功能更强大</div><div class="line">【Future(接口)】表示异步计算的结果</div><div class="line">【CountDownLatch】可以用来在一个线程中等待多个线程完成任务的类</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>多线程编程常用的交互模型</p>
<ul>
<li>Producer-Consumer模型</li>
<li>Read-Writer Lock模型</li>
<li>Future模型</li>
<li>Woker Thread模型<br><br></li>
</ul>
<p>Java5并发编程工具</p>
<ul>
<li>java.uitl.concurent</li>
<li>线程池ExecutorService</li>
<li>Callable 和Futrue</li>
<li>BlockingQueue<br><b></b></li>
</ul>
<p>Java内存模型(JMM ~ Java Memory Model)</p>
<ul>
<li>【定义】描述了Java程序中各种变量(线程共享变量)的访问规则,以及在JVM中将变量存储到内存和从内存中取出变量,这样的底层细节</li>
<li>【特点】所有变量都存储在主内存</li>
<li>【特点】每个线程都有自己独立的”工作内存”,里面保存该线程使用到的变量的副本(主内存中该变量的一份拷贝)</li>
<li>【规定1】线程对共享变量的所有操作都必须在自己的工作内存中进行,不能直接从主内存中读写</li>
<li>【规定2】不同线程之间无法直接访问其他线程工作内存中的变量,线程间变量值的传递需要通过主内存来完成<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;JMM模型图</div><div class="line">	线程1 &lt;---&gt; 工作内存【X的副本1】	&lt;---&gt;       主</div><div class="line"></div><div class="line">	线程2 &lt;---&gt; 工作内存【X的副本2】    &lt;---&gt;       内【共享变量X】</div><div class="line"></div><div class="line">	线程3 &lt;---&gt; 工作内存【X的副本3】	&lt;---&gt;       存</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;共享变量可见性的原理</div><div class="line"></div><div class="line">	A.原状态</div><div class="line">		  线程1   工作内存1(X=0)</div><div class="line">							主内存(X=0)</div><div class="line">	            线程2   工作内存2(X=0)</div><div class="line"></div><div class="line">	B.线程1的X变为1的步骤</div><div class="line">	    线程1 ---&gt;  工作内存1(X=1) ---&gt;</div><div class="line">						          主内存(X=1)</div><div class="line">	    线程2 &lt;---  工作内存2(X=1) &lt;---</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>重排序</p>
<ul>
<li>【定义】代码书写顺序与实际执行的顺序不同,指令重排序是编译器or处理器为了提高程序性能而做的优化</li>
<li>【as~if~serial语义】无论如何重排序,程序执行的结果应该与代码顺序执行的结果一致(Java编译器,运行时和处理器都会保证Java在单线程下遵循as~if~serial语义)</li>
<li>【可见性】重排序不会给单线程带来内存可见性问题,但是多线程中程序交错执行时,重排序可能会造成内存可见性问题</li>
<li>树级关系的代码禁止重排序<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">三种重排序</div><div class="line">        1.编译器优化的重排序(编译器优化)</div><div class="line">        2.指令级并行重排序(处理器优化)</div><div class="line">        3.内存系统的重排序(处理器优化)</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>线程可见性<br>1.实现共享变量的可见性,保证两点<br>2.导致共享变量在线程间不可见的原因<br>3.Java”语言层面”支持的可见性实现方式<br>4.synchronized关键字<br>5.volatile关键字<br>6.保证变量自增(x++)操作的原子性的方式<br>7.synchronized和volatile比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;实现共享变量的可见性,保证两点</div><div class="line">	a.线程修改后的共享变量值能够及时从工作内存刷新到主内存中</div><div class="line">	b.其他线程能够及时把共享变量的最新值从主内存更新到自己的</div><div class="line"></div><div class="line">&lt;2&gt;导致共享变量在线程间不可见的原因</div><div class="line">	a.线程的交叉执行</div><div class="line">	b.重排序结合线程交叉执行</div><div class="line">	c.共享变量更新后的值,没有在工作内存与主内存间及时更新</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;Java&quot;语言层面&quot;支持的可见性实现方式</div><div class="line">	a.synchronized关键字</div><div class="line">	b.volatile关键字</div><div class="line"></div><div class="line">&lt;4&gt;synchronized关键字</div><div class="line">	(1)说明</div><div class="line">		a.原子性(同步)【能够实现互斥锁,保证任何一时刻都只有1个线程在执行锁内的代码】</div><div class="line">		b.可见性</div><div class="line"></div><div class="line">	(2)JMM关于synchronized的两条规定</div><div class="line">		a.线程解锁前,必须把共享变量的最新值刷新到主内存中</div><div class="line">		b.线程加锁时,将清空工作内存中共享变量的值,从而使用共享变量时,需要从主内存中重新读取最新的值【注意:加锁与解锁需要是同一把锁,线程解锁前对共享变量的修改在下次加锁时对其他线程可见】</div><div class="line"></div><div class="line">	(3)线程执行互斥代码的过程</div><div class="line">		a.获得互斥锁</div><div class="line">		b.清空工作内存</div><div class="line">		c.从主内存拷贝变量的最新副本到工作内存</div><div class="line">		d.执行代码</div><div class="line">		e.将更改后的共享变量的值刷新到主内存</div><div class="line">		f.释放互斥锁</div><div class="line"></div><div class="line">	(4)synchronized解决可见性的问题</div><div class="line">		a.保证了锁内部代码的原子性,避免线程在锁内部交叉执行</div><div class="line">		b.根据synchronized的两台可见性规范,来实现共享变量的及时更新</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;5&gt;volatile关键字</div><div class="line">	(1)说明</div><div class="line">		a.轻量级的同步锁</div><div class="line">		b.能保证可见性</div><div class="line">		c.不能保证volatile变量相关操作的原子性</div><div class="line"></div><div class="line">	(2)volatile如何实现内存可见性【通过加入内存屏障和静止重排序优化来实现】</div><div class="line">		a.对volatile变量执行写操作时,会在写操作后加入一条store屏障指令</div><div class="line">		b.对volatile变量执行读操作时,会在读操作前加入一条load屏障指令</div><div class="line">		【volatile变量每次被线程访问时,都强迫从主内存中重读该变量的值,而当该变量发生变化时,又会强迫线程将最新的值刷新到主内存,这样在任何时刻,不同的线程总能看到该变量的最新值】</div><div class="line"></div><div class="line">	(3)线程写volatile变量的过程</div><div class="line">		a.改变线程工作内存中volatile便利nag副本的值</div><div class="line">		b.将改变后的副本的值从工作内存刷新到主内存</div><div class="line"></div><div class="line">	(4)线程读volatile变量的过程</div><div class="line">		a.从主内存中读取volatile变量的最新值到线程的工作内存中</div><div class="line">		b.从工作内存中读取volatile变量的副本</div><div class="line"></div><div class="line">	(5)【适用场合】要在多线程中安全的使用volatile变量,必须同时满足</div><div class="line">		a.对变量的写入操作不依赖当前值</div><div class="line">			.不满足: number++,count = count * 5等;</div><div class="line">			.满足： boolean变量,记录温度变化的变量等</div><div class="line">		b.该变量没有包含在具有其他变量的的不定式中【程序中有多个volatile变量,每个变量的状态应该独立与其他变量】</div><div class="line">			.不满足:不定式low &lt; up【例:程序中存在两个volatile变量low和up,这两个直接进行比较】</div><div class="line">	</div><div class="line"></div><div class="line"></div><div class="line">&lt;6&gt;保证变量自增(x++)操作的原子性的方式</div><div class="line">	(1)使用synchronized关键字</div><div class="line">		A./*修饰方法体*/</div><div class="line">			public synchronized void increate()&#123;&#125;</div><div class="line"></div><div class="line">		B./*加锁代码块*/</div><div class="line">			private final Ojbect lockObj = new Object();</div><div class="line"></div><div class="line">			public void transfer()&#123;</div><div class="line">				synchronized(lockObj)&#123;</div><div class="line">					//获得lockObj对象锁的线程.能够进入这块区域【java的语法保证了同一时间只能有一个线程获得lockObj】</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">	(2)使用ReentrantLock(java.util.concurrent.locaks包下)</div><div class="line">		private Lock lock = new ReentrantLock();</div><div class="line">		private int number = 0;</div><div class="line"></div><div class="line">		public void increase()&#123;</div><div class="line"></div><div class="line">			lock.lock();//加锁</div><div class="line">			try&#123;</div><div class="line">				this.number++;</div><div class="line">			&#125;finally&#123;</div><div class="line">				lock.unlock();//释放锁</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	(3)使用AtomicInterger(vava.util.concurrent.atomic包下)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;7&gt;synchronized和volatile比较</div><div class="line">	a.volatile不需要加锁,比synchronized更轻量级,不会阻塞线程</div><div class="line">	b.从内存可见性角度来说,volatile读相当于加锁,volatile写相当于解锁</div><div class="line">	c.synchronized既能保证可见性,又能保证原子性,而volatile只能保证可见性,无法保证原子性</div><div class="line">	d.volatile比synchronized更轻量级,但是更多先知,所有没有synchronized使用广泛</div><div class="line">	e.【扩展】final也可以保存内存可见性</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;8&gt;扩展两个问题</div><div class="line">	 (1)问:即时没有保证可见性的措施,为什么很多时候共享变量依然能偶在主内存和工作内存中得到及时的更新?</div><div class="line"></div><div class="line">	 	答:一般只有在短时间内高并发的情况下才会出现变量不能及时更新的情况,因为CPU在执行时会很快的刷新缓存,所以一般情况下很难看到这种问题</div><div class="line"></div><div class="line"></div><div class="line">	 (2)问:64位(long,double)变量的读写可能不是原子操作如何解决?</div><div class="line">	 		【Java内存模型运行JVM将没有被volatile修饰的64为数据类型读写操作分为两次32位的读写操作来进行】</div><div class="line"></div><div class="line">	 	答:可能会导致出现读取到&quot;半个变量&quot;的情况</div><div class="line">	 		解决方案是:加volatile关键字</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>扩展定义(自己去了解)</p>
<ul>
<li>【线程控制逃逸规则】 如果一个资源的创建，使用，销毁都在同一个线程内完成，且永远不会脱离该线程的控制，则该资源的使用就是线程安全的</li>
<li>【争用条件】 多个线程同时共享访同一数据(内存区域)时,每个线程都尝试操作该数据,从而导致数据破外(corrupted)的现象]</li>
<li>【happens-before原则】通过synchronized,volatile,final实现这一原则</li>
<li>【Locks和Condition对象】5.0版本后引入,java锁机制和等待条件的高层实现</li>
<li>【线程安全性】原子性与可见性,通过java.util.concurrent.atomic避免原子性编程的问题,如何使用synchronized和voliatile进行可见性编程,避免发生死锁(DeadLocks)<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="14-Java网络编程-Socket编程"><a href="#14-Java网络编程-Socket编程" class="headerlink" title="14.Java网络编程(Socket编程)"></a>14.Java网络编程(Socket编程)</h2><p>参考资料</p>
<ul>
<li><a href="http://www.cnblogs.com/obama/p/3292335.html" target="_blank" rel="external"> TCP/IP 相关知识点</a><br><br></li>
</ul>
<p>TCP是什么</p>
<ul>
<li>【定义】TCP/IP是目前世界上应用最为广泛的协议,是以TCP和IP为基础的不同层次上多个协议的集合(也称TCP/IP 协议栈)</li>
<li>【特点】为实现网络中不同计算机之间的通信,每台机器必须有一个唯一的标识(IP地址),目前常用的是IPv4版本(定义IP地址的长度为32位的二进制),端口用于区分不同应用程序,端口号范围为0 ~ 65535(其中0 ~ 1023 为系统保留),IP地址和端口号组成Socket(Socket是网络上运行的程序之间双向通信链路的终结点,是TCP和UDP基础)<br><br></li>
</ul>
<p>网络模型5层</p>
<ol>
<li>【应用层】HTTP,FTP,SMTP</li>
<li>【传输层】TCP/IP协议,UDP</li>
<li>【网络层】 TCMP,ARP,RARP(ARP和RARP工作内容在数据链路层)</li>
<li>【数据链路层】</li>
<li>【物理层】  网线,网卡<br><br></li>
</ol>
<p>各种网络协议</p>
<ul>
<li>【TCP】         传输控制协议</li>
<li>【IP】           互联网协议</li>
<li>【FTP 】        文本传输协议</li>
<li>【SMTP】      简单邮件传输协议</li>
<li>【Telnet】     远程登录协议</li>
<li>【DNS 】       域名解析服务</li>
<li>【TETP】       简单文件传输协议</li>
<li>【HTTP】      超文本传输协议</li>
<li>【HTTPS 】  安全的超文本传输协议<br><br></li>
</ul>
<p>网路关键词</p>
<ul>
<li>URL [统一资源定位符,四部分组成“协议”“主机”“端口”“路径”]<br><br></li>
</ul>
<p>TCP/IP的三次握手<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;客户端向服务器发送SYN包(syn =j),进入SYN_SEDN状态(等待服务器确认)</div><div class="line">&lt;2&gt;服务器接收SYN包,确认SYN包,此时syn = j + 1,同时向客户端发送1个SYN包(syn = k)【即是SYN+ACK包】,进入SYN_RECV状态[等待客户端确认]</div><div class="line">&lt;3&gt;客户端接收到SYN+ACK包,向服务器发送ACK确认包,此时客户端+服务器,都进入ESTABLSIHED状态</div></pre></td></tr></table></figure></p>
<p>Java提供网络功能的四大类(java.net包下)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+ 【InetAddress 】此类物联网协议(IP)地址,用于获取网络上指定机器的IP信息</div><div class="line">+ 【URL】 表示统一资源定位符,指向互联网的&quot;资源&quot;,可通过openStream()获取指定资源的输入流,通过流读取,访问网络上的数据</div><div class="line">+ 【ServerSocket】 TCP服务端</div><div class="line">+ 【Socket】 使用TCP协议实现网络通信的Socket相关类</div><div class="line">+ 【DatagramPacket】 表示数据包</div><div class="line">+ 【DatagramSocket】 进行端到端通信的类</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>TCP编程</p>
<ul>
<li>TCP协议是面向连接,可靠的,有序的,以字节流的方式发送数据</li>
<li>基于TCP协议实现网络通信的类(服务端的ServerSocket类 和 客户端的Socket类)<br><br></li>
</ul>
<p>UDP编程</p>
<ul>
<li>UDP协议(用户数据报协议)是无连接,不可靠的,无序的</li>
<li>以数据报作为数据传输的载体</li>
<li>将传输的数据定义成数据报,在数据报中指明数据所要达到的Socket,然后再将数据报发送出去<br><br></li>
</ul>
<p>Socket通信注意</p>
<ul>
<li>在服务端与多个客户端通信时,注意多线程的优先级[未设置优先级可能会导致运行时速度非常慢,适当将另启的线程优先级降低]</li>
<li>是否关闭输入流和输出流【同一个Socket,直接Socket关闭时,同时会将流关闭(不需要单独去关闭输入输出流)】</li>
<li>使用TCP通信传输对象【对象的形式进行传输,在流中使用ObjectInputStream和ObjectOutputStream进行传输,需要序列化(os.writeObject(user))】</li>
<li>socket编程传递文件【IO的知识,通过输入输出流,读取文件的数据,并发送到服务器端】<br><br></li>
</ul>
<p>Socket通信实现步骤【TCP编程】<br>1.创建ServerSocket和Socket<br>2.打开连接到Socket的输入/输出流<br>3.按照协议对Socket进行读/写操作<br>4.关闭输入输出流,关闭Socket<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">启动步骤:</div><div class="line">	先启动服务端</div><div class="line">	再启动客户端</div><div class="line"></div><div class="line">服务器端</div><div class="line">	a.创建ServerSocket对象，绑定监听端口</div><div class="line">	b.通过accept()方法监听客户端请求</div><div class="line">	c.连接建立后,通过输入流读取客户端发送的请求信息</div><div class="line">	d.通过输出流向客户端发送响应信息</div><div class="line"></div><div class="line">客户端</div><div class="line">	a.创建Socket对象,指明需要连接的服务器的地址和端口号</div><div class="line">	b.连接建立后,通过输出流向服务器端发送请求信息</div><div class="line">	c.通过输入流获取服务器响应的信息</div><div class="line">	d.关闭相关资源</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">服务端</div><div class="line">		public static void main(String [] args)&#123;</div><div class="line">			try&#123;</div><div class="line">				ServerSocket serverSocket = new ServerSocket(888);</div><div class="line">				Socket socket = serverSocket.accept();</div><div class="line"></div><div class="line">				//等待</div><div class="line">				InputStrema is = socket.getInputStream();</div><div class="line">				InputStreamReader isr = new InputStreamReader(is);</div><div class="line">				BufferedReader br = new BufferedReader(isr);</div><div class="line">				String info = null;</div><div class="line">				while((info = br.readLine()) != null)&#123;</div><div class="line">					System.out.println(info);</div><div class="line">				&#125;</div><div class="line">				socket.shudownInput();//关闭输入流</div><div class="line"></div><div class="line">				//获取输出流,相应客户端</div><div class="line">				OutputStream os = socket.getOutputStream();</div><div class="line">				PrintWriter pw = new PrintWrtier(os);</div><div class="line">				pw.write(&quot;欢迎您！&quot;);</div><div class="line">				pw.flush();    //刷新缓存[将缓存输出]</div><div class="line"></div><div class="line"></div><div class="line">				//关闭资源</div><div class="line">				pw.close();</div><div class="line">				os.close();</div><div class="line">				br.close();</div><div class="line">				isr.close();</div><div class="line">				is.close();</div><div class="line">				socket.close();</div><div class="line">				serverSocket.close();</div><div class="line"></div><div class="line">			&#125;catch(Exception e)&#123;</div><div class="line">				e.printStrackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">客户端</div><div class="line">		public static void main(String [] args)&#123;</div><div class="line">			try&#123;</div><div class="line">				Socket socket = new Socket(&quot;localhost&quot;,8888);</div><div class="line"></div><div class="line">				//发送</div><div class="line">				OutputStream os = socket.getOutputStream();</div><div class="line">				PrintWriter pw = new PrintWriter(os);</div><div class="line">				pw.write(&quot;用户名:admin - 密码:123&quot;);</div><div class="line">				pw.flush();  //调用此步发送信息	</div><div class="line">				socket.shutdownOutput();//关闭输出流</div><div class="line"></div><div class="line">				//获取输入流,读取服务器端的响应</div><div class="line">				InputStream is = socket.getInputStream();</div><div class="line">				InputStreamReader isr = new InputStreamReader(is);</div><div class="line">				BufferedReader br = new BufferedReader(isr);</div><div class="line">				String info = null;</div><div class="line">				while((info = br.readLine()) != null)&#123;</div><div class="line">					System.out.println(&quot;这里是客户端,服务器端的响应&quot; + info);</div><div class="line">				&#125;</div><div class="line"></div><div class="line"></div><div class="line">				//关闭资源</div><div class="line">				br.close();</div><div class="line">				isr.close();</div><div class="line">				is.close();</div><div class="line">				pw.close();</div><div class="line">				os.close();</div><div class="line">				socket.close();</div><div class="line"></div><div class="line"></div><div class="line">			&#125;catch(UnknowHostException e)&#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;catch(IOException e)&#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p>多线程服务器[TCP编程,实现服务器与多个客户端之间的通信]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">基本步骤</div><div class="line">	a.服务器创建ServerSocket,循环调用accept()等待客户端连接</div><div class="line">	b.客户端创建一个socket并请求和服务器端连接</div><div class="line">	c.服务器端接受客户端请求,创建socket与客户建立专线连接</div><div class="line">	d.建立连接的两个socket在一个单独的线程上对话</div><div class="line">	d.服务器端继续等待新的连接</div><div class="line"></div><div class="line">		/*一.服务端*/</div><div class="line">		public class Server &#123;</div><div class="line">			/*main方法*/</div><div class="line">			public static void main(String [] args)&#123;</div><div class="line">				try&#123;</div><div class="line">					//A.启动服务端,监听8888端口</div><div class="line">					System.out.println(&quot;【服务器】&quot;);</div><div class="line">					ServerSocket serverSocket = new ServerSocket(8888);</div><div class="line">					</div><div class="line">					</div><div class="line">					//B.监听8888端口[若有客户端响应,则启动服务器线程处理专线连接Socket]</div><div class="line">					int client = 1;</div><div class="line">					while(true)&#123;</div><div class="line">						System.out.println(&quot;服务器正在监听8888端口 ----------&gt;&quot;);</div><div class="line">						Socket socket = serverSocket.accept();</div><div class="line">						</div><div class="line">						System.out.println(&quot;----------Client:&quot;+client + &quot;------------&quot;);</div><div class="line">						ServerThread sst = new ServerThread(socket);</div><div class="line">						Thread thread = new Thread(sst);</div><div class="line">						</div><div class="line">						thread.start();</div><div class="line">						client++;</div><div class="line">					&#125;</div><div class="line">					</div><div class="line">					</div><div class="line">				&#125;catch(Exception e)&#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		/*二.服务器线程*/</div><div class="line">		class ServerThread implements Runnable&#123;</div><div class="line">			</div><div class="line">			private Socket socket;</div><div class="line">			</div><div class="line">			public ServerThread(Socket socket) &#123;</div><div class="line">				this.socket = socket;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			/*线程运行*/</div><div class="line">			public void run()&#123;</div><div class="line">				InputStream is = null;</div><div class="line">				InputStreamReader  isr = null;</div><div class="line">				BufferedReader br = null;</div><div class="line">				OutputStream  os = null;</div><div class="line">				PrintWriter pw = null;</div><div class="line">				</div><div class="line">				try&#123;</div><div class="line">					//A.接收客户端信息,接收完后关闭输入流</div><div class="line">					 is = socket.getInputStream();</div><div class="line">					 isr = new InputStreamReader(is);</div><div class="line">					 br = new BufferedReader(isr);</div><div class="line">					String info = null;</div><div class="line">					while((info = br.readLine()) != null)&#123;</div><div class="line">						System.out.println(info);</div><div class="line">					&#125;			</div><div class="line">					socket.shutdownInput();  //关闭输入流</div><div class="line">					</div><div class="line">					//B.向客户端发送信息</div><div class="line">					os = socket.getOutputStream();</div><div class="line">					pw = new PrintWriter(os);</div><div class="line">					pw.write(&quot;来自服务器的信息(&quot;+ socket.getLocalAddress() +&quot;):  欢迎登录！&quot;);</div><div class="line">					pw.flush();</div><div class="line">					</div><div class="line">					</div><div class="line">				&#125;catch (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;finally&#123;</div><div class="line">					</div><div class="line">					//C.关闭资源</div><div class="line">					try&#123;</div><div class="line">						if(pw != null) pw.close();</div><div class="line">						if(os != null) os.close();</div><div class="line">						if(br != null) br.close();</div><div class="line">						if(isr != null) isr.close();</div><div class="line">						if(is != null) is.close();</div><div class="line">						if(socket != null) socket.close();</div><div class="line">					&#125;catch (Exception e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">**************************************************************</div><div class="line"></div><div class="line">		/*客户端*/</div><div class="line">		public class Client &#123;</div><div class="line">			/*main方法*/</div><div class="line">			public static void main(String[] args) &#123;</div><div class="line">				try&#123;</div><div class="line">					</div><div class="line">					//A.向服务器发送信息,接收完后关闭输出流</div><div class="line">				    System.out.println(&quot;【客户端】&quot;);</div><div class="line">					Socket socket = new Socket(&quot;localhost&quot;,8888);</div><div class="line">					OutputStream os = socket.getOutputStream();</div><div class="line">					PrintWriter pw = new PrintWriter(os);</div><div class="line">					pw.write(&quot;来自客户端的信息(&quot; + socket.getInetAddress() + &quot;): 登录：用户名 suvan - 密码 123&quot;);</div><div class="line">					pw.flush();</div><div class="line">					socket.shutdownOutput(); //关闭输出流</div><div class="line">					</div><div class="line">					//B.向服务器发送信息</div><div class="line">					InputStream is = socket.getInputStream();</div><div class="line">					InputStreamReader isr = new InputStreamReader(is);</div><div class="line">					BufferedReader br = new BufferedReader(isr);</div><div class="line">					String info = null;</div><div class="line">					while((info = br.readLine()) != null)&#123;</div><div class="line">						System.out.println(info);</div><div class="line">					&#125;</div><div class="line">					</div><div class="line">					//C.关闭资源</div><div class="line">					br.close();</div><div class="line">					is.close();</div><div class="line">					is.close();</div><div class="line">					pw.close();</div><div class="line">					os.close();</div><div class="line">					socket.close();</div><div class="line">					</div><div class="line">				&#125;catch (UnknownHostException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;catch (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p>UDP的Socket通信实现步骤【UDP编程】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">服务器端</div><div class="line">	a.创建DatagramSocket,指定端口号</div><div class="line">	b.创建DatamPacket</div><div class="line">	c.接收客户端发送的数据信息</div><div class="line">	d.读取数据</div><div class="line"></div><div class="line">客户端</div><div class="line">	a.定义发送信息</div><div class="line">	b.创建DatagramPacket(数据报),包含要发送的信息</div><div class="line">	c.创建DatagramSocket</div><div class="line">	d.发送数据</div><div class="line"></div><div class="line"></div><div class="line">服务端</div><div class="line">	public static void main(String [] args)&#123;</div><div class="line">		try&#123;</div><div class="line"></div><div class="line">			//A.定义服务器</div><div class="line">			DatagramSocket socket = new DatagramSocket(8888);</div><div class="line">			byte [] data = new byte[1024];//字节数组,指定接收数据报大小</div><div class="line">			DatagramPacket packet = new DatagramPacket(data, data.length);</div><div class="line"></div><div class="line">			//B.接收到数据报之前一直阻塞</div><div class="line">			System.out.println(&quot;*****服务器端启动,正在监控8888端口***&quot;);</div><div class="line">			socket.receive(packet);   </div><div class="line"></div><div class="line">			//C.读取数据</div><div class="line">			String info = new String(data,0,packet.getLength());</div><div class="line">			System.out.println(&quot;来自客户端的数据: &quot; + info);</div><div class="line"></div><div class="line"></div><div class="line">			//D.向客户端发送数据</div><div class="line">			InetAddress adress = packet.getAddress();//获取客户端IP地址</div><div class="line">			int clientPort = packet.getPort(); //获取客户端端口</div><div class="line">			byte [] data2 = &quot;服务器端欢迎您!&quot;.getBytes();</div><div class="line"></div><div class="line">			DatagramPacket packet2 = new DatagramPacket(data2,data2.length,address,clentPort);</div><div class="line"></div><div class="line">			socket.send(packet2);</div><div class="line"></div><div class="line">			//E.关闭资源</div><div class="line">			socket.close();</div><div class="line"></div><div class="line"></div><div class="line">		&#125;catch(IOException e)&#123;</div><div class="line">			e.printStrackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">客户端</div><div class="line">	public static void main(String [] args)&#123;</div><div class="line"></div><div class="line">		try&#123;</div><div class="line">			//A.定义服务器地址,端口号,数据</div><div class="line">			InetAddress address = InetAddress.getByName(&quot;localhost&quot;);</div><div class="line">			int serverPort = 8888;</div><div class="line">			byte [] data = &quot;用户名: admin - 密码: 123&quot;.getBytes();</div><div class="line"></div><div class="line">			//B.创建数据报[包含发送的数据信息]</div><div class="line">			DatagramPacket packet = new DatagramPacket(data,data.length,address,serverPort);</div><div class="line"></div><div class="line">			//C.创建DatagramSocket对象</div><div class="line">			DatagramSocket socket = new DatagramSocket();</div><div class="line"></div><div class="line">			//D.向服务器发送数据报</div><div class="line">			socket.send(packet);</div><div class="line"></div><div class="line"></div><div class="line">			//E.接收服务器端的响应数据</div><div class="line">			byte [] data2 = new byte[1024];</div><div class="line">			DatagramPacket packet2 = new DatagramPacket(data2,data2.length);</div><div class="line"></div><div class="line">			socket.receive(packet);</div><div class="line"></div><div class="line">			String serverInfo = new String(data2,0, packet2.getLength());</div><div class="line">			System.out.println(&quot;来自服务器端的信息:&quot; + serverInfo);</div><div class="line"></div><div class="line">			//F.关闭资源</div><div class="line">			socket.close();</div><div class="line"></div><div class="line"></div><div class="line">		&#125;catch(UnknownHostException e)&#123;</div><div class="line">				e.printStrackTrace();</div><div class="line">		&#125;catch(SocketException e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="15-IO体系构图"><a href="#15-IO体系构图" class="headerlink" title="15.IO体系构图"></a>15.IO体系构图</h2><p>参考资料：</p>
<ul>
<li><a href="http://www.cnblogs.com/rocomp/p/4783208.html" target="_blank" rel="external">Java I/O输入输出流详解【大体介绍】</a></li>
<li><a href="https://my.oschina.net/waylau/blog/604550" target="_blank" rel="external">Java 编程要点之 I/O 流详解【主要是原理】 </a><br><br></li>
</ul>
<p>构图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;							</div><div class="line">					  |		FileInputOut(文件输入流)</div><div class="line">					  |		PipedInputOut(管道输入流)			           |          LineNumberInputStream(行号输入流)</div><div class="line">					  |		FiterInputOut (缓冲输入流)                          -&gt;|	|          DataInputStream(数据输入流)</div><div class="line">		InpputStrema-&gt;	  | 	           ByteArrayInputStream(字节数组输入流)	           |	BufferedInputStream(缓冲输入流)</div><div class="line">		(字节输入流)  |	  |	            SequenceInputStrema(顺序输入流)		           |	PushbackInputStream(回压输入)</div><div class="line">					  |		StringBufferInputStream(缓冲字符输入流)		</div><div class="line">					  |		ObjectInputStream(对象输入流)</div><div class="line">字节流</div><div class="line"></div><div class="line">					  |		FileOutputStream(文件输出流)</div><div class="line">					  | 	           PipedOutputStream(管道输出流)			|	DataOutputStream(数据输出流)</div><div class="line">	    OutputStream-&gt;              |		FilterOutputStream(过滤器输出流)	          -&gt;         |          BufferedOutputStream(缓冲输出流)</div><div class="line">	    (字节输出流)                   |		ByteArrayOutputStream(字节数组输出流)              |	PrintWriter(格式化输出流)	</div><div class="line">					  |		ObjectOutStream(数学怒输)				 </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	  				  |		BufferedReader(缓冲输入流)			   -&gt;|	LineNumberReader(行号输入流)</div><div class="line">	  				  |		CharArrayReader(字符数组输入流)		   </div><div class="line">	  	Reader		  |		InputStreamReader(字符输入流)		   -&gt;|	FileReader(文件输入流)</div><div class="line">	  	(字符输入流)  -&gt;       |		FilterReader(过滤器输入流)			   -&gt;|  PushbackReader(回压输入流)</div><div class="line">	  				  |		PipedReader(管道输入流)				   </div><div class="line">	  				  | 	          StringReader(字符输入流)			   </div><div class="line"></div><div class="line">字符流</div><div class="line">	  				  |		BufferedWriter(缓冲输出流)</div><div class="line">	  				  |		CharArrayWriter(字符数组输出流)</div><div class="line">	  	Writer		  | 	           FilterWriter(过滤器输出流)</div><div class="line">	  	(字符输出流)    -&gt;     |		OutputStreamWriter(字符输出流)		  -&gt;|	FileWriter(文件输出流)</div><div class="line">	  				  |		PipedWriter(管道输出流)				  </div><div class="line">	  				  |		StringWriter(字符输出流)</div><div class="line">	  				  |		PrintWriter(标准字符输出流)	</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;输入流基本方法</div><div class="line">	int b = in.read();   [读取一个字节无符号填充到int低八位置,-1是EOF(结尾)]</div><div class="line">	in.read(byte [] buf); [读取数据填充到字节数组buf]</div><div class="line">	int read(byte [] buf, int start,int size); [读取数组填充到字节数组buf,从start位置开始,存放size长度的数据]</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;输出流基本方法</div><div class="line">	out.write(int b);	[写出一个byte到流,b的低八位]</div><div class="line">	out.write(byte [] buf); [将buf字节数组都写到流]</div><div class="line">	out.write(byte [] buf,int start,int size);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">注意：</div><div class="line">	键盘是输入流【往记事本写东西,是从键盘中读到数据,写到txt文本文件里】</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="16-解析Java注解"><a href="#16-解析Java注解" class="headerlink" title="16.解析Java注解"></a>16.解析Java注解</h2><p>&emsp;Java提供了一种原程序中的元素关联任何信息和任何元数据的途径和方法<br><br></p>
<p>参考资料</p>
<ul>
<li><a href="http://blog.csdn.net/zen99t/article/details/50351575" target="_blank" rel="external">注解反射生成SQL语句</a><br><br></li>
</ul>
<p>JDK常见注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;JDK自带</div><div class="line">	@Override    //表示覆盖父类的方法,重写</div><div class="line">	@Deprecated   //表示该方法已经过时</div><div class="line">	@Suppvisewarnings//忽略警告</div><div class="line">		【例：@SuppressWarnings(&quot;deprecation&quot;)  忽略deprecation的警告】</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;第三方注解</div><div class="line">			__@Autowired  //自动依赖注入bean</div><div class="line">	Spring  __@Service</div><div class="line">			__@Repository</div><div class="line"></div><div class="line">			__@InsertProvider</div><div class="line">	Mybatis __@UpdateProvider</div><div class="line">			__@Options</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>注解的分类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;按照运行机制区分</div><div class="line">	a.源码注解    【只在源码中存在,编译成.class文件就不存在】</div><div class="line">	b.编译时注解  【在源码和.class文件中都存在,运行时忽略】</div><div class="line">	c.运行时注解  【在运行阶段还起作用,可以通过反射读取,甚至会影响运行逻辑的注解(例:@Autowired)】</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;按照来源分</div><div class="line">	a.JDK的注解</div><div class="line">	b.第三方注解</div><div class="line">	c.自定义注解</div><div class="line"></div><div class="line">&lt;3&gt;元注解</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>自定义注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;语法要求</div><div class="line">		@Target&#123;ElementType.METHOD,ElementType.TYPE&#125;     </div><div class="line">		@Retention(RetentionPolicy.RUNTIME)</div><div class="line">		@Inherited</div><div class="line">		@Documented</div><div class="line">		public @interface Description&#123;</div><div class="line">			String desc();</div><div class="line">			String author();</div><div class="line"></div><div class="line">			int age() default 18;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">			a.使用@interface关键字定义注解</div><div class="line">			b.成员以无参无异常方式声明</div><div class="line">			c.可以用default为成员指定一个默认值</div><div class="line">			d.成员类型是受限的,合法的类型包括原始基本类型以及String,Class,Annotation,Enumeration</div><div class="line">			d.如果注解只有一个成员,成员名必须取名为value(),在使用时,可以忽略成员名和赋值号(=)</div><div class="line">			e.注解类可以没有成员,没有成员的注解称为&quot;标识注解&quot;</div><div class="line"></div><div class="line"></div><div class="line">			顶部四行就是元注解</div><div class="line">				_.Target作用域</div><div class="line">					ElementType.MODEHOD       //方法声明</div><div class="line">								.CONSTRUCTOR  //构造方法声明</div><div class="line">								.FIELD 		  //字段声明</div><div class="line">								.LOCAL_VARIABLE//局部变量声明</div><div class="line">								.PACKAGE  	  //包声明</div><div class="line">								.PARAMETER    //参数声明</div><div class="line">								.TYPE         //类,接口</div><div class="line">				_.Retention生命周期</div><div class="line">            	     			RententionPlicy.SOURCE    //源码注解</div><div class="line">            	     						   .CLASS     //编译时注解</div><div class="line">            	     						   .RUNTIME   //运行时注解</div><div class="line">	     		            _.@Inherited标识性元注解</div><div class="line">	     			           运行子类继承</div><div class="line">	     		            _.@Documented</div><div class="line">	     			           生成javadoc时会包含注解信息</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;使用自定义注解【根据元注解的约束使用,定义在方法体上】</div><div class="line">		@Description(desc=&quot;I am suvan&quot;,author=&quot;suvan&quot;,age=18)</div><div class="line">		public String penColor()&#123;</div><div class="line">			return &quot;red&quot;;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>反射解析注解</p>
<ul>
<li>【概念】通过反射获取类,函数or成员上的”运行时”注解信息,从而实现动态控制程序运行的逻辑<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;通过反射</div><div class="line">		public static void main(String [] args)&#123;</div><div class="line">			try&#123;</div><div class="line">				//A.类加载器加载类</div><div class="line">				Class c = Class.forName(&quot;com.ann.test.Child&quot;);</div><div class="line"></div><div class="line">				//B.判断是否存在指定注解</div><div class="line">				boolean isExist = c.isAnnotationPresent(Description.class);</div><div class="line">				if(isExist)&#123;</div><div class="line">					Description d = (Description)c.getAnnotation(Description.class);//得到注解实例</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				//C.找到方法上注解</div><div class="line">				Method [] ms = c.getMethod();</div><div class="line">				Description d =(Description)ms[0].getAnnotation(Description.class);</div><div class="line"></div><div class="line">				//C-2</div><div class="line">				Annotation [] as = ms[0].getAnnotations();</div><div class="line">				for(Annotation a: as)&#123;</div><div class="line">					if(a instanceof Description)&#123; //注解属于Description类型</div><div class="line">						Description d = (Description)a;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line"></div><div class="line">			&#125;catch(ClassNotFoundException e)&#123;&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">《2》</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="17-VM虚拟机【管理内存分区】"><a href="#17-VM虚拟机【管理内存分区】" class="headerlink" title="17.VM虚拟机【管理内存分区】"></a>17.VM虚拟机【管理内存分区】</h2><p>Java内存区域</p>
<ol>
<li>线程共享区</li>
<li>线程私有区<br><br></li>
</ol>
<p>线程共享区</p>
<ol>
<li>【Java Heap(堆)】虚拟机管理内存中最大一块,所有线程共享,几乎所有对象实例和数组都在这分配内存。垃圾收集器管理主要区域,又被称为”GC堆”</li>
<li>【方法区】储存已经被虚拟机加载的类信息，常量，静态变量，即是编译器后的代码等数据，又称“永久代”<br><br></li>
</ol>
<p>线程私有(随线程产生和消亡,因此不需要过多考虑内存回收的问题)</p>
<ol>
<li>【虚拟机栈 】描述Java方法执行的内存模型，执行Java方法服务</li>
<li>【本地方法栈】使用到本地操作系统(Native)服务</li>
<li>【程序计数器】一块较小内存区域，当前线程所执行的字节码的行号指示器<br><br></li>
</ol>
<p>方法调用</p>
<ul>
<li>方法调用时,会创建栈帧在栈中,调用完是程序自动出栈释放,俄不是gc<br><br></li>
</ul>
<p>垃圾回收(Garbage Collection,缩写GC)算法</p>
<ul>
<li>【标记清除】标记_清除两阶段(缺点：1.效率低 2.产生大量不连续的内存碎片)</li>
<li>【标记整理】清理后后让所有存活的对象一致后移(缺点：标记-清除后需进行对象移动，成本相对较高)</li>
<li>【复制算法】 将可用内存划分为大小相等两块，每次只使用一块,用完将存活对象复制到另一块,然后把之前的一次性清理掉(缺点：1.系统内存折半)适用于新生代(存活对象少,垃圾对象多)</li>
<li>【标记-压缩】清除标记对象时,还将所有存活对象压缩到内存的一端,之后清理边界所有空间(适用于老年代)<br><br></li>
</ul>
<p>垃圾收集动作</p>
<ul>
<li>Minor GC [指对新生代的回收]【Java对象大多朝生夕灭,所以Minor GC频繁,回收速度较快】</li>
<li>Major GC [年老代的回收]</li>
<li>Full GC[对整个堆进行扫描和回收]【值发生在老年代GC,出现了Major G C,经常伴随至少一次Minor GC(并非绝对).MajorGC的速度一般会比Minor GC慢 10倍以上】<br><br></li>
</ul>
<p>JVM类加载器(ClassLoader)</p>
<ul>
<li>【Bootstrap ClassLoader(启动类加载器)】加载JVM自身工作需要的类</li>
<li>【Application ClassLoader(扩展类加载器)】加载ClassPath指定的库类,一般情况下是程序中的默认类下载器</li>
<li>【Extension ClassLoader(应用程序类加载器)】加载“%JAVA_HOME%\lib\ext目录下的库类”<br><br></li>
</ul>
<p>JVM加载类的实现方式</p>
<ul>
<li>【双亲委托模型】如果一个类加载器收到类加载请求,先请求委托给自己的父加载器,每一层的类加载器都是如此,因此所有的类加载请求最终都应该传到顶层BootStrap ClassLoader,只有当父加载器反馈自己无法完成加载请求时,子加载器才会尝试自己加载</li>
<li>【上述模型主要为了解决类载入过程中的安全性问题】如果有人编写了一个java.lang.Object类,借此欺骗JVM,现在要使用自定义ClassLoader来加载该类,但是双亲委托模型不会让它成功,JVM会优先在BootStrap ClassLoader的路径下找到java.lang.Ojbect类,并载入它<br><br></li>
</ul>
<p>Java类的加载过程</p>
<ul>
<li>加载Loading(生成java.lang.Class对象)</li>
<li>验证Verfication</li>
<li>准备Preparation</li>
<li>解析Resolution(1.类方法发生在该过程)</li>
<li>初始化Initialization</li>
<li>使用Using</li>
<li>卸载Unloading<br><br></li>
</ul>
<p>JVM内存配置参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-Xmx  最大堆大小</div><div class="line">-Xms  初始堆大小【即是最小内存值】</div><div class="line">-Xmn  年轻代大小</div><div class="line">-XXurvivorRatio  年轻代中&quot;Eden区&quot;与&quot;Survivor&quot;区大小比值【Eden是Survior的倍数】</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">一般情况将年轻代分为1块Eden和2块Survivor</div><div class="line">举例：</div><div class="line">        -Xmn=5120m</div><div class="line">        -XXurvivorRatio=3</div><div class="line"></div><div class="line">        计算Survivor区大小</div><div class="line">            Eden:Survivor = 1:3</div><div class="line">            年轻代 = Eden + Survivor = 3x + x + x =5120</div><div class="line">            可得出x=1024</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>内存调试工具</p>
<ul>
<li>jmap  [关擦运行中jvm物理内存的占用情况]</li>
<li>jstack [Linux特有,观察jvm中所有线程的运行情况和线程当前状态]</li>
<li>jconsole [图形化界面,可以观察java进程的gc.class.内存等信息]<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="18-了解Java中的内存泄漏"><a href="#18-了解Java中的内存泄漏" class="headerlink" title="18.了解Java中的内存泄漏"></a>18.了解Java中的内存泄漏</h2><p>&emsp;指无用对象(不再使用的对象)持续占有内存或无用对象的内存得不到及时释放，从而造成内存空间的浪费。<br><br></p>
<p>Java的内存</p>
<ul>
<li>【栈内存】主要存放一些基本类型的变量,数组和对象的引用</li>
<li>【堆内存】主要存放一些对象<br><br></li>
</ul>
<p>Java中判断内存控件是否符合垃圾收集标准</p>
<ol>
<li>给对象赋予了控制null,以下再没有调用过</li>
<li>给对象赋予新值,这样冲洗分配了内存空间<br><br></li>
</ol>
<p>Java中内存泄漏发生的场景</p>
<ol>
<li>静态集合类引起的内存泄漏</li>
<li>当集合里面的对象属性被修改时,再调用remove()方法是不起作用【remove不掉,造成内存泄漏<br>】</li>
<li>监听器【数据库连接,网络连接，io连接】</li>
<li>内部类和外部模块的引用【内部类没释放 和 A调用B的一个public方法,传入一个对象(这里就标识B模块保持了该对象的引用)】</li>
<li>单例模式【单例对象在初始化后将在JVM整个生命周期存在(以静态变量的方式),如果单例对象持有外部的引用，该独享不能被JVM正常回收】<br><br></li>
</ol>
<blockquote>
<p>内存溢出：是指程序所需要的内存超出了系统所能分配的内存(包括动态扩展)的上限</p>
</blockquote>
<hr>
<p><br><br></p>
<h2 id="19-专业术语"><a href="#19-专业术语" class="headerlink" title="19.专业术语"></a>19.专业术语</h2><p>术语</p>
<ul>
<li>EJB(Enterprise JavaBean-企业级JavaBean)一个用来构筑企业级应用的服务器端可被管理组件</li>
<li>POJO(Plain Ordinary Java Object-普通的JavaBeans)简单的java对象</li>
<li>IoC(Inversion of Control-控制反转),是面向对象编程中的一种设计原则，用于代码之间的耦合度【常见方式：依赖注入(Dependency Injection)】</li>
<li>AOP(aspect-oriented programming -面向方面程序设计)</li>
<li>Framework(架构)</li>
<li>ISP(Interface Segregation Principle)面向对象的核心原则,表明使用多个专门的接口比使用单一的接口好<br><br></li>
</ul>
<p>面向对象</p>
<ul>
<li>OOA(面向对象分析)</li>
<li>OOD(面向对象设计)</li>
<li>OOP(面向对象编程)</li>
<li>UML(统一建模语言)<br><br></li>
</ul>
<p>语言</p>
<ul>
<li>HTML(Hyper Text Markup Language - 超文本标记语言)</li>
<li>CSS(Cascade Style Sheet - 层叠样式表)</li>
<li>JS(JavaScript - 脚本语言)</li>
<li>XML(Extensible Markup Language - 描述结构话数据语言)</li>
<li>DOM(Document Object Model - 文档对象模型)</li>
<li>JSP(Java Server Pages - Java服务器网页)</li>
<li>EL(Expression Language - 表达式)<br><br></li>
</ul>
<p>网络</p>
<ul>
<li>HTTP(HyperText Transfer Protocol - 超本文传输协议)</li>
<li>C/S和B/S模式(客户机/服务器 和 浏览器/服务器)<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="20-程序设计"><a href="#20-程序设计" class="headerlink" title="20.程序设计"></a>20.程序设计</h2><p>java自带程序</p>
<ul>
<li>java用来运行一个.class文件</li>
<li>javadoc用来生产api文档</li>
<li>jar用来生成jar包</li>
<li>javadoc用来把.java文件编译成.class文件<br><br></li>
</ul>
<p>程序设计中,模块划分的原则是</p>
<ul>
<li>高内聚,低耦合【模块内具有高内聚度,模块间具有低耦合度】<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="21-项目管理"><a href="#21-项目管理" class="headerlink" title="21.项目管理"></a>21.项目管理</h2><p>&emsp;Ant和Maven都是基于Java构建(build)工具<br>&lt;br&lt;</p>
<p>Ant特点</p>
<ul>
<li>Ant是软件构建工具</li>
<li>没有一个约定的目录结构【必须明确让ant做什么,什么时候做,编译,打包】</li>
<li>没有生命周期【必须定义目标及其实现的任务序列】</li>
<li>没有集成依赖管理</li>
<li>Maven<br><br></li>
</ul>
<p>Maven特点</p>
<ul>
<li>软件项目管理和理解工具</li>
<li>拥有约定【知道代码在哪,放哪去】</li>
<li>拥有生命周期【执行mvn install就可以自动执行编译,测试,打包构建过程,只需定义pox.xml,把源码放到默认目录】</li>
<li>拥有依赖管理,仓库管理<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="22-数据结构基础"><a href="#22-数据结构基础" class="headerlink" title="22.数据结构基础"></a>22.数据结构基础</h2><p>C++ STL(标准模板库)的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">【vector】底层数据结构为数组,支持快速随机访问,容量大小有限制(扩容耗时)</div><div class="line">【list】底层数据结构为双向链表,支持快速增删</div><div class="line">【deque(双端队列)】底层结构为一个中央控制器和多个缓冲区,支持首尾(中间不能)快速增删,也支持随机访问</div><div class="line">【stack】底层一般用23实现,封闭头部即可</div><div class="line">【queue】底层一般用23实现,封闭头部即可</div><div class="line">【priority_queue(优先队列)】底层数据结构一般为vector底层容器,heap(堆)为处理规则来管理底层容器实现</div><div class="line">【set】底层数据结构为红黑树,有序,不重复,支持快速增删</div><div class="line">【multiset(多重集)】底层数据结构为红黑树,有序,可重复</div><div class="line">【map】底层数据数据结构为红黑树,有序,不重复,支持快速增删</div><div class="line">【multimap(多重映射)】底层数据结构为红黑树,有序,可重复</div><div class="line">【hash_set】底层数据结构为hash表,无序,不重复</div><div class="line">【hash_multiset】底层数据结构为hash表,无序,可重复</div><div class="line">【hash_map】底层数据结构为hash表,无序,不重复</div><div class="line">【hash_multimap】底层数据结构为hash表,无序,可重复</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>数据的逻辑结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">                                    _一般线性表（顺序存储结构和链式存储结构）</div><div class="line">                —线性结构  _受限的线性表(栈,队列,串)</div><div class="line">                                    _线性表的推广(数组,广义表)</div><div class="line">逻辑结构</div><div class="line">                                        _集合</div><div class="line">                —非线性结构   _树形结构(一般树,二叉树)</div><div class="line">                                        _图形结构(有向图,无向图)</div><div class="line"></div><div class="line"></div><div class="line">注意：</div><div class="line">        a.栈是逻辑结构,链表是存储结构</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>线性结构</p>
<ul>
<li>【定义】线性结构指的是数据元素之间存在”一对一”线性关系的数据结构</li>
<li>【组成】线性表是具有n个”数据元素”的有限序列(n&gt;0), 线性表由若干个数据元素组成,而数据元素又由若干个数据项组成</li>
<li>【常用的线性结构】线性表,堆,栈,队列,双队列,数组,串,广义表</li>
<li>【常见的非线性结构】二维数组,多维数组 ,树(二叉树等),图<br>+【有序表归并最多比较】将两个各有n个元素的有序表归并成一个有序表,其最多的比较次数是2n-1【想象两个序列(135),(2,4,6)的插入,最多需要比较5次】<br>+【折半查找计算】设有100个元素的有序表,采用折半查找方法时,成功时候最大的比较次数为7(使用log100,计算100能被2除多少次<br><br></li>
</ul>
<p>链表</p>
<ul>
<li>【定义】链表是线性表的链式存储结构</li>
<li>【定义】链表是一块不连续的动态空间,长度可变;链表需要按顺序检索节点,效率低</li>
<li>【优点】适合随机存取,可以快速插入和删除节点,大小动态分配,长度不固定,不存在越界问题,</li>
<li>【存储单元地址】线性表链式存储结构的所有节点之间的存储单元地址可连续可不连续</li>
<li>【静态链表】用数组实现,静态链表的指针表示下一个元素在数组中的位置,需要分配较大的空间,元素插入与删除时不需要移动元素(需要改的是游标,用空间换取时间)</li>
<li>【前驱和后继节点】前驱(llink,left,pointr),后继(rlink,right,next)<br>优点】</li>
<li>【单链表的存储密度】小于1,(存储密度=单链表数据项所占空间/节点所占空间)</li>
<li>【判断链表有没有环】1.直接遍历判断;2.反转指针;3.快慢指针(追赶法)</li>
<li>【链表相交问题】1.有环的单向链表和无环的单向链表不能相交(会被迫存在1个环,起点可能变化);2.两个单向链表之间相交可以存在环,它们的尾节点一定相同</li>
<li>【双向循环链表插入节点】要先入链(先将被插入的节点的前后链接好),后断链(再将原链表的前后关系节点断链,指向新的引用)</li>
<li>【判空条件】1.带头节点单向链表的判空条件是head.next==null(不带头节点是head==nul)；2.带头节点的单向循环链表的判空条件是head.next==head</li>
<li>【二叉链表存储树】(二叉树链表根节点指针)左孩子,右兄弟(指向树的根节点)<br>+【二叉链表指针域】在含有n个节点的二叉链表中,有n+1个空链(空指针)域,n-1个非空链域<br><br></li>
</ul>
<p>顺序表</p>
<ul>
<li>【求存储地址】在顺序表中,只要知道”基地址和结点大小”,就可在相同时间内求出任一结点的存储地址</li>
<li>线性表的顺序存储结构是一种”随机存取的存储结构”<br><br></li>
</ul>
<p>散列表</p>
<ul>
<li>【定义】是用散列法存储的线性表<br><br></li>
</ul>
<p>串</p>
<ul>
<li>【定义】是一种特殊的线性表,每个节点是一个字符,页可称为字符串<br><br></li>
</ul>
<p>栈</p>
<ul>
<li>【特点】栈可以是顺序存储,也可以是链式存储,与存储结构无关</li>
<li>【深度 or 广度】深度优先遍历用“栈”,广度优先遍历用”队列”</li>
<li>【栈】是数据结构,先进后出(常用于函数调用.例如main中调用各种方法,java虚拟机栈帧),栈是解决封闭对应问题的有效方法,</li>
<li>【遍历】”后序线索树”的遍历仍然需要栈的支持(因为在前序和中序遍历最后访问的都是左or右节点,后序遍历最后访问的是子树的根节点,子树根节点的两个指针域都指向子树了,所以不能空出来存放线索信息,只能借助栈存储)</li>
<li>【判空】<code>s-top</code>是栈顶针,空栈为-1,<code>s-&gt;top++</code>(插入元素),<code>s-&gt;top--</code>(出栈),<code>s-top=maxSize-1</code>(栈满)</li>
<li>【递归】递归工作栈包括(返回地址,本层局部电量和递归调用的形参代换为实参),无论递归过程有没使用局部变量,转换为非递归过程都需要用栈来模拟这个递归调用的过程</li>
<li>【递归】不是所有的递归转换为非递归都是要用到栈。转化为非递归主要有两种方法(1.对于尾递归或单向递归,可以用循环结构算法代替;2.另外一个才是栈的方法)</li>
<li>【元素个数】在栈中,栈顶指针的动态变化决定栈中元素的个数<br><br></li>
</ul>
<p>队列</p>
<ul>
<li>【队列】当队列中只有一个元素时，出队后需要清空对头和队尾指针</li>
<li>【循环队列】可以顺序存储,也可以链式存储</li>
<li>【STL优先级队列】用堆来实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">循环队列的计算问题</div><div class="line">1.队空条件：rear==front   </div><div class="line">2.队满条件：(rear+1) %QueueSIze==front   </div><div class="line">3.计算队列长度(队内元素)：（rear-front+QueueSize）%QueueSize   </div><div class="line">4.入队：（rear+1）%QueueSize   </div><div class="line">5.出队：（front+1）%QueueSize</div><div class="line">发</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>广义表<br>+【三个特性】1.层次性(广义表元素可以是子表,子表的元素仍然可以是子表);2.共享性(广义表可被其他广义表共享);3.递归性(广义表可以是其自身的一个子表)</p>
<ul>
<li>【求长度】广义表(((a,b,c),d,e,f))的长度是1【有三对括号】</li>
<li>【表头 or  表尾】一个非空广义表,1.表头(元素or子表);2.表尾(只能是子表,将除了第一个元素之外的所有元素,看作一个广义表)<br>+【广义表表达式】广义表A是(d,e,f)的话,head(A)只取d,tail(A)取(e,f)<br><br></li>
</ul>
<p>线性结构的比较</p>
<ul>
<li>【顺序表和链表】顺序表结构适宜进行随机查询(查询快),链表结构适合进行随机存取;(存取快)</li>
<li>【顺序表和链表】顺序表是一种随机存取的线性结构,链表是一种顺序存取的线性结构(因为存储地址不一定连续,即逻辑上位置不一定相邻,只能通过逐个指针顺序进行存储)</li>
<li>【顺序表和链表】顺序表可以用折半查询,链表不可以(因为折半查询要求线性表必须要顺序存储,且要有序)</li>
<li>【顺序栈和链栈】链表栈的比较明显的优势,是通常不会出现栈满的情况(链栈采用非连续的内存存储的模式,意味着可以从未使用的内存中开辟一个空间,很容易添加一个节点，对于连续存储的顺序栈而言,是很难增加大小的)<br><br></li>
</ul>
<p>数组</p>
<ul>
<li>数组的插入,删除需要移动数组元素,平均移动n/2<br><br></li>
</ul>
<p>二叉树<br><br></p>
<p>矩阵</p>
<ul>
<li>【稀疏矩阵压缩的存储方法】是三元组和十字链表<br><br></li>
</ul>
<p>图</p>
<ul>
<li>【无向图存储】邻接矩阵,邻接表,多重邻接表,边集数组</li>
<li>【有向图存储】邻接矩阵,邻接表,十字链表,边集数组<br><br></li>
</ul>
<hr>
<p><br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h1 id="二-常用操作"><a href="#二-常用操作" class="headerlink" title="二.常用操作"></a>二.常用操作</h1><h2 id="1-操作日期和时间"><a href="#1-操作日期和时间" class="headerlink" title="1.操作日期和时间"></a>1.操作日期和时间</h2><p>常用类</p>
<ul>
<li>java.util.Date【基础日期类】</li>
<li>java.util.GregorianCalendar【是一个Calendar(日历)类的具体实现】<br><br></li>
</ul>
<p>案例<br>1.获取当前时间<br>2.使用SimpleDateFormat格式化日期<br>3.字符串转换为日期<br>4.测量指定操作的具体执行时间<br>5.Calendar获取时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;获取当前时间</div><div class="line">	Date date = new Date();</div><div class="line">	System.out.println(&quot;当前时间:&quot; + date.toString());</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;使用SimpleDateFormat格式化日期</div><div class="line">	Date date = new Date();			 </div><div class="line">	SimpleDateFormat sdf = new SimpleDateFormat(&quot;E yyyy-MM-dd &apos;at&apos; hh:mm:ss a zzz&quot;);</div><div class="line">	System.out.println(&quot;格式化后日期：  &quot; + sdf.format(date));</div><div class="line">			</div><div class="line">			输出：  格式化后日期：  星期一 2017-03-20 at 10:54:04 上午 CST</div><div class="line">								   【星期     日期         时间   时辰 时区】</div><div class="line"></div><div class="line"></div><div class="line">					格式简码</div><div class="line">						G 	时代指示器 	AD</div><div class="line">						y 	四位数年份 	2001</div><div class="line">						M 	年中的月份 	July or 07</div><div class="line">						d 	月份中日期 	10</div><div class="line">						h 	时间 A.M./P.M.(1~12) 	12</div><div class="line">						H 	天中的小时 (0~23) 	22</div><div class="line">						m 	小时中的分钟 	30</div><div class="line">						s 	分钟中的秒钟 	55</div><div class="line">						S 	毫秒 	234</div><div class="line">						E 	星期中的天 	Tuesday</div><div class="line">						D 	年中的天 	360</div><div class="line">						F 	月中星期中的天 	2 (second Wed. in July)</div><div class="line">						w 	年中的星期 	40</div><div class="line">						W 	月中的星期 	1</div><div class="line">						a 	A.M./P.M. 标记 	PM</div><div class="line">						k 	天中的小时(1~24) 	24</div><div class="line">						K 	小时A.M./P.M. (0~11) 	10</div><div class="line">						z 	时区 	东部标准时间</div><div class="line">						&apos; 	脱离文本 	分隔符</div><div class="line">						&quot; 	单引号 	`</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;字符串转换为日期</div><div class="line">		SimpleDateFormat ft = new SimpleDateFormat (&quot;yyyy-MM-dd&quot;); </div><div class="line">		String input = &quot;1818-11-11&quot;;</div><div class="line">		Date t; </div><div class="line">			   </div><div class="line">		try &#123; </div><div class="line">			t = ft.parse(input); </div><div class="line">			System.out.println(&quot;日期: &quot; +t); </div><div class="line">		&#125; catch (ParseException e) &#123; </div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">				输出 : 日期: Wed Nov 11 00:00:00 CST 1818</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;测量指定操作的具体执行时间</div><div class="line">		long start = System.currentTimeMillis( ); //获得自1970年1月1日午夜十二时起已经过的毫秒数</div><div class="line">			...</div><div class="line">		long end = System.currentTimeMillis( );</div><div class="line">		System.out.println(&quot;程序执行时间:&quot; + (start -end));</div><div class="line"></div><div class="line"></div><div class="line">&lt;5&gt;Calendar获取时间</div><div class="line">			//1.Calendar是抽象类,需要通过静态方法获取对象</div><div class="line">			Calendar c = Calendar.getInstance();</div><div class="line">			  //c1.set(2009, 6 - 1, 12);//把Calendar对象c1的年月日分别设这为：2009、6、12</div><div class="line"></div><div class="line"></div><div class="line">			//2.获取年月日时分秒</div><div class="line">			int year = c.get(Calendar.YEAR);</div><div class="line">			int month = c.get(Calendar.MONTH);</div><div class="line">			int day = c.get(Calendar.DAY_OF_MONTH);</div><div class="line">			int hour = c.get(Calendar.HOUR_OF_DAY);</div><div class="line">			int minute = c.get(Calendar.MINUTE);</div><div class="line">			int second = c.get(Calendar.SECOND);</div><div class="line"></div><div class="line">			//3.将Calendar对象转换为Date对象</div><div class="line">			Date date = c.getTime();</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="2-自定义异常"><a href="#2-自定义异常" class="headerlink" title="2.自定义异常"></a>2.自定义异常</h2><p>关键字</p>
<ul>
<li>throw   (方法体内抛出)</li>
<li>throws  (方法定义时抛出)<br><br></li>
</ul>
<p>流程</p>
<ol>
<li>定义一个类继承Exception</li>
<li>根据情况是否添加构造方法</li>
<li>在某个方法抛出该异常</li>
<li>捕获该异常<br><br></li>
</ol>
<p>应用场景</p>
<ul>
<li>异常链 (throws向上层抛出异常….)<br><br></li>
</ul>
<p>设计程序时应注意：</p>
<ul>
<li>try块不宜过长(仔细区分每快抛出异常)</li>
<li>保证所有资源都被正确释放 (充分运用finally关键字)</li>
<li>catch尽量指定具体的异常类型(减少使用Exception类)</li>
<li>处理异常(不应只是打印输出,可选择(1.处理; 2.上抛; 3.封装异常))</li>
<li>异常处理模块提供适量信息(便于错误的理解和阅读)</li>
<li>不要在finally处理返回值</li>
<li>不要在构造函数抛出异常</li>
</ul>
<p>自定义异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class MyException extends Exception&#123;</div><div class="line">        public MyException()&#123; </div><div class="line">            //根据实际情况判断是否需要使用无参构造函数</div><div class="line">        &#125;  </div><div class="line">        public MyException(String message)&#123;</div><div class="line">            super();</div><div class="line">            System.out.println(message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public  class Test &#123;</div><div class="line">        public void show(int i) throws MyException&#123;</div><div class="line">            if(i == -1)&#123;</div><div class="line">                throw new MyException(&quot;当前值为-1，抛出异常&quot;); //跳到异常类MyException里的有参构造函数</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        public static void main(String[] args) &#123;</div><div class="line">            Test t = new Test();</div><div class="line">            try&#123;</div><div class="line">                 t.show(-1);</div><div class="line">                </div><div class="line">            &#125;catch(MyException my)&#123;</div><div class="line">                System.out.println(&quot;成功捕获MyException异常***************&quot;);</div><div class="line">                my.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="3-反射操作"><a href="#3-反射操作" class="headerlink" title="3.反射操作"></a>3.反射操作</h2><p>&emsp;Java 反射机制可以让我们在编译期(Compile Time)之外的运行期(Runtime)检查类，接口，变量以及方法的信息。反射还可以让我们在运行期实例化对象，调用方法，通过调用 get/set 方法获取变量的值<br><br></p>
<p>Java反射机制提供以下功能</p>
<ul>
<li>运行时判断任意一个对象所属的类</li>
<li>运行时构造任意一个类的对象</li>
<li>运行时判断任意一个类所具有的成员变量和方法</li>
<li>运行时调用任意一个对象的方法</li>
<li>生成动态代理<br><br></li>
</ul>
<p>反射常用类</p>
<ul>
<li>java.lang.class   (类)</li>
<li>java.lang.reflect (包)<br><br></li>
</ul>
<p>获取Class对象的三种方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Foo foo1 = new Foo()</div><div class="line"></div><div class="line">	&lt;1&gt;方式1</div><div class="line">			Class c1 = Foo.class;</div><div class="line">	&lt;2&gt;方式2</div><div class="line">			Class c2 = foo1.getClass();</div><div class="line">	&lt;3&gt;方式3[动态加载类(编译时刻加载是&quot;静态加载类&quot;,运行时刻加载是&quot;动态加载类&quot;)]</div><div class="line">			Class c3 = null;</div><div class="line">			try &#123;</div><div class="line">				c3 = Class.forName(&quot;com.imooc.reflect.Foo&quot;);</div><div class="line">			&#125; catch (ClassNotFoundException e) &#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line">            注意:</div><div class="line">            	(1)c1 == c2 == c3</div><div class="line">            	(2)可通过类的类类型创建该类的实例对象</div><div class="line">            		try &#123;</div><div class="line">            			Foo foo = (Foo)c1.newInstance();//需要强转</div><div class="line">            		&#125; catch (InstantiationException e) &#123;</div><div class="line">            			e.printStackTrace();</div><div class="line">            		&#125; catch (IllegalAccessException e) &#123;</div><div class="line">            			e.printStackTrace();</div><div class="line">            		&#125;</div><div class="line">            	(3)new创建对象,是&quot;静态加载类&quot;,在编译时刻就需要加载所有的可能用到的类【特点：一个出错,全盘出错】</div><div class="line">            	   Class.forName()是动态加载类,在运行时刻加载,可通过Class类类型,创建该类对象</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>反射获取指定对象的各种信息(成员函数,成员变量,构造函数)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">package com.imooc.reflect;</div><div class="line"></div><div class="line">import java.lang.reflect.Constructor;</div><div class="line">import java.lang.reflect.Field;</div><div class="line">import java.lang.reflect.Method;</div><div class="line"></div><div class="line">public class ClassUtil &#123;</div><div class="line">	/**</div><div class="line">	 * 获取的成员函数对象的信息</div><div class="line">	 * @param obj 该对象所属类的信息</div><div class="line">	 */</div><div class="line">	public static void printClassMethodMessage(Object obj)&#123;</div><div class="line">		//1.要获取类的信息  首先要获取类的类类型</div><div class="line">		Class c = obj.getClass();			//传递的是哪个子类的对象  c就是该子类的类类型</div><div class="line">		System.out.println(&quot;类名:&quot;+c.getName());</div><div class="line"></div><div class="line"></div><div class="line">		//2获取Method对象集合</div><div class="line">		Method[] ms = c.getMethods();</div><div class="line">		for(int i = 0; i &lt; ms.length;i++)&#123;</div><div class="line">			</div><div class="line">			//a,得到方法的名称</div><div class="line">			System.out.print(&quot;\t方法名-&quot; + ms[i].getName()+&quot;(&quot;);</div><div class="line">			</div><div class="line">			//b.得到方法的返回值类型的类类型</div><div class="line">			Class returnType = ms[i].getReturnType();</div><div class="line">			System.out.print(&quot;返回值类型:&quot; +returnType.getName()+&quot; &quot;);</div><div class="line">			</div><div class="line">			//c.获取参数类型---&gt;得到的是参数列表的类型的类类型</div><div class="line">			Class[] paramTypes = ms[i].getParameterTypes();</div><div class="line">			System.out.print(&quot;参数类型:&quot;);</div><div class="line">			for (Class class1 : paramTypes) &#123;</div><div class="line">				System.out.print(class1.getName()+&quot;,&quot;);</div><div class="line">			&#125;</div><div class="line">			System.out.println(&quot;)&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">    /**</div><div class="line">     * 获取成员变量对象的信息</div><div class="line">     * @param obj</div><div class="line">     */</div><div class="line">	public static void printFieldMessage(Object obj) &#123;</div><div class="line">	    //1.获取传入对象的类类型</div><div class="line">		Class c = obj.getClass();</div><div class="line"></div><div class="line">		//2.获取Field对象集合[Field类封装了关于成员变量的操作]</div><div class="line">//		Field[] fs = c.getFields();    			 //获取的是所有的public的成员变量的信息</div><div class="line">		Field[] fs = c.getDeclaredFields(); //获取的是该类自己声明的成员变量的信息[public,private,protected,default]</div><div class="line">		for (Field field : fs) &#123;</div><div class="line">			//得到成员变量的类型的类类型</div><div class="line">			Class fieldType = field.getType();</div><div class="line">			</div><div class="line">			String typeName = fieldType.getName();  	//类型名</div><div class="line">			String fieldName = field.getName();			//变量名</div><div class="line">			System.out.println(typeName+&quot; &quot;+fieldName); //成员变量类型+变量名</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * 获取构造函数对象的信息</div><div class="line">	 * @param obj</div><div class="line">	 */</div><div class="line">	public static void printConstructorMessage(Object obj)&#123;</div><div class="line">		  //1.获取传入对象的类类型</div><div class="line">		Class c = obj.getClass();</div><div class="line"></div><div class="line">		</div><div class="line">		//2.获取对象构造函数的对象集合【构造函数也是对象】</div><div class="line">		//Constructor[] cs = c.getConstructors();				  //获取所有的public的构造函数</div><div class="line">		Constructor[] cs = c.getDeclaredConstructors();  //getDeclaredConstructors得到所有的构造函数</div><div class="line">		for (Constructor constructor : cs) &#123;</div><div class="line">			System.out.print(&quot;构造函数名:&quot; + constructor.getName()+&quot;(&quot;);</div><div class="line">			</div><div class="line">			//a.获取构造函数的参数列表,每个参数的类类型</div><div class="line">			Class[] paramTypes = constructor.getParameterTypes();</div><div class="line">			for (Class class1 : paramTypes) &#123;</div><div class="line">				System.out.print(class1.getName()+&quot;,&quot;);</div><div class="line">			&#125;</div><div class="line">			System.out.println(&quot;)&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>方法的反射操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">package com.imooc.reflect;</div><div class="line"></div><div class="line">import java.lang.reflect.Method;</div><div class="line"></div><div class="line">class A&#123;</div><div class="line">	public void print()&#123;</div><div class="line">		System.out.println(&quot;helloworld&quot;);</div><div class="line">	&#125;</div><div class="line">	public void print(int a,int b)&#123;</div><div class="line">		System.out.println(a+b);</div><div class="line">	&#125;</div><div class="line">	public void print(String a,String b)&#123;</div><div class="line">		System.out.println(a.toUpperCase()+&quot;,&quot;+b.toLowerCase());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">public class MethodDemo1 &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		//1.创建对象,获取类类型[要获取一个方法就是获取类的信息，获取类的信息首先要获取类的类类型]</div><div class="line">		A a1 = new A();</div><div class="line">		Class c = a1.getClass();</div><div class="line">		</div><div class="line">		</div><div class="line">		//2.获取方法 [名称和参数列表][getMethod获取的是public的方法 和 getDelcaredMethod自己声明的方法]</div><div class="line">	    try &#123;</div><div class="line">	    	</div><div class="line">	        System.out.println(&quot;==========方法1[无参构造方法]=========&quot;);</div><div class="line">            Method m2 = c.getMethod(&quot;print&quot;);        		</div><div class="line">           // m2.invoke(a1, new Object[]&#123;&#125;);</div><div class="line">            m2.invoke(a1);</div><div class="line">	    	</div><div class="line">	    	System.out.println(&quot;==========方法2[有参构造方法(int,int)]=========&quot;);</div><div class="line">	    	//a.方法的反射操作 </div><div class="line">			//Method m =  c.getMethod(&quot;print&quot;, new Class[]&#123;int.class,int.class&#125;);</div><div class="line">	    	Method m = c.getMethod(&quot;print&quot;, int.class,int.class);</div><div class="line">	    	//b.传入参数,调用方法</div><div class="line">	    	//Object o = m.invoke(a1,new Object[]&#123;10,20&#125;);       //方法如果没有返回值返回null,有返回值返回具体的返回值</div><div class="line">	    	  Object o = m.invoke(a1, 10,20);</div><div class="line">	   </div><div class="line">	    	System.out.println(&quot;==========方法3[有参构造方法(Stirng,String)]=========&quot;);</div><div class="line">            Method m1 = c.getMethod(&quot;print&quot;,String.class,String.class);</div><div class="line">             o = m1.invoke(a1, &quot;hello&quot;,&quot;WORLD&quot;);</div><div class="line">         </div><div class="line">		&#125; catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="4-正则表达式"><a href="#4-正则表达式" class="headerlink" title="4.正则表达式"></a>4.正则表达式</h2><p>java.util.regex包下常用类</p>
<ul>
<li>Pattern类     【正则表达式编译表示】</li>
<li>Matcher类        【匹配正则 and 操作结果序列 的工具类】</li>
<li>PatternSyntaxException异常    【不被检查的异常，用来表示正则表达式的语法错误】<br><br></li>
</ul>
<p>正则表达式匹配符号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">子表达式    匹配对应</div><div class="line">    ^   匹配一行的开头</div><div class="line">    $   匹配一行的结尾</div><div class="line">    .   匹配除了换行符的任何单个字符，也可以利用 m 选项允许它匹配换行符</div><div class="line">    [...]   匹配括号内的任意单个字符。</div><div class="line">    [^...]  匹配不在括号内的任意单个字符。</div><div class="line">    \A  整个字符串的开始</div><div class="line">    \z  整个字符串的结束</div><div class="line">    \Z  整个字符串的结束，除了最后一行的结束符</div><div class="line">    re*     匹配0或者更多的前表达事件</div><div class="line">    re+     匹配1个或更多的之前的事件</div><div class="line">    re?     匹配0或者1件前表达事件</div><div class="line">    re&#123; n&#125;  匹配特定的n个前表达事件</div><div class="line">    re&#123; n,&#125;     匹配n或者更多的前表达事件</div><div class="line">    re&#123; n, m&#125;   匹配至少n最多m件前表达事件</div><div class="line">    a| b    匹配a或者b</div><div class="line">    (re)    正则表达式组匹配文本记忆</div><div class="line">    (?: re)     没有匹配文本记忆的正则表达式组</div><div class="line">    (?&gt; re)     匹配无回溯的独立的模式</div><div class="line">    \w  匹配单词字符</div><div class="line">    \W  匹配非单词字符</div><div class="line">    \s  匹配空格。等价于 [\t\n\r\f]</div><div class="line">    \S  匹配非空格</div><div class="line">    \d  匹配数字. 等价于 [0-9]</div><div class="line">    \D  匹配非数字</div><div class="line">    \A  匹配字符串的开始</div><div class="line">    \Z  匹配字符串的末尾，如果存在新的一行，则匹配新的一行之前</div><div class="line">    \z  匹配字符串的末尾</div><div class="line">    \G  匹配上一次匹配结束的地方</div><div class="line">    \n  返回参考捕获组号“N”</div><div class="line">    \b  不在括号里时匹配单词边界。在括号里时匹配退格键</div><div class="line">    \B  匹配非词边界</div><div class="line">    \n, \t, etc.    匹配换行符，回车符，制表符，等</div><div class="line">    \Q  引用字符的初始，结束于\E</div><div class="line">    \E  结束由\Q开始的引用</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>从给定字符串中找出数字字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;从给定字符串中找出数字字符串</div><div class="line">		Pattern r = Pattern.compile(&quot;(.*)(\\d+)(.*)&quot;);  										//正则表达式</div><div class="line">		Matcher m = r.matcher(&quot;This order was placed for QT3000! OK?&quot;);							//需要匹配字的符串</div><div class="line">		if (m.find( )) &#123; 																	    //查找匹配的内容，得到结果序列</div><div class="line">			System.out.println(&quot;0：&quot; + m.group(0) );										    //查找结果中，指定索引序列的字符串</div><div class="line">			System.out.println(&quot;1：Found value: &quot; + m.group(1) );</div><div class="line">			System.out.println(&quot;2： Found value: &quot; + m.group(2) );</div><div class="line">			&#125; else &#123;</div><div class="line">				System.out.println(&quot;NO MATCH&quot;);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		//替换第一个符合正则的数据</div><div class="line">		System.out.println(matcher.replaceFirst(&quot;We are the best&quot;));</div><div class="line"></div><div class="line">		//替换全部符合正则的数据</div><div class="line">		System.out.println(matcher.replaceAll(&quot;We are the best&quot;));</div></pre></td></tr></table></figure></p>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="5-操作I-O输入输出流和文件"><a href="#5-操作I-O输入输出流和文件" class="headerlink" title="5.操作I/O输入输出流和文件"></a>5.操作I/O输入输出流和文件</h2><p>&emsp;java.io.* 【各种输入和输出操作 的工具包】<br><br></p>
<p>次级目录<br>1.文件<br>2.标准流[三种标准输入：STDIN,STDOUT,STDERR]<br>3.使用RandomAccessFile进行读写(随机读写)<br>4.字节流<br>5.字符流<br><br></p>
<p><1>文件</1></p>
<ul>
<li>File类  [可用户文件(目录)的信息(名称,大小等)]<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;创建目录</div><div class="line">		String dirname = &quot;/tmp/user/java/bin&quot;;</div><div class="line">		File d = new File(dirname);</div><div class="line">		d.mkdirs();</div><div class="line"></div><div class="line">&lt;2&gt;遍历目录</div><div class="line">		public static void main(String args[])&#123;</div><div class="line">		     File file = null;</div><div class="line">		     String[] names;</div><div class="line"></div><div class="line">		     try&#123;      </div><div class="line">		        file = new File(&quot;src/test&quot;);  //指定路径</div><div class="line"></div><div class="line">		        names = file.list();			     //得到指定路径中的 文件和目录名 的集合</div><div class="line">		        for(String name : names) &#123;    //遍历</div><div class="line">		           System.out.println(name);</div><div class="line">		        &#125;</div><div class="line">		     &#125;catch(Exception e)&#123;</div><div class="line">		        e.printStackTrace();</div><div class="line">		     &#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><br></p>
<p><2>标准流[三种标准输入：STDIN,STDOUT,STDERR]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">jave提供3种:Standard Input,Standard Output,Standard Error】</div><div class="line"></div><div class="line">		public static void main(String args[]) throws IOException&#123;</div><div class="line">			 InputStreamReader isr = null;</div><div class="line"></div><div class="line">		     try &#123;</div><div class="line">		    	 //A-实例化 【接收用户输入】</div><div class="line">		    	 isr = new InputStreamReader(System.in);  			//Standard Input - [System.in]</div><div class="line">		        System.out.println(&quot;输入 &apos;q&apos; ，回车 -&gt; 退出程序.&quot;);</div><div class="line">		        </div><div class="line">		        //B-do-while循环，判断用户输入，并打印输出</div><div class="line">		        char c;</div><div class="line">		        do &#123;</div><div class="line">		           c = (char) isr.read();</div><div class="line">		           System.out.print(c);										//Standard Output - [System.out]</div><div class="line">		        &#125; while(c != &apos;q&apos;);</div><div class="line">		     &#125;finally &#123;</div><div class="line">		    	 //C-关闭流</div><div class="line">		        if (isr != null)  isr.close();</div><div class="line">		     &#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></2></p>
<hr>
<p><br></p>
<p><3>使用RandomAccessFile进行读写(随机读写)</3></p>
<ul>
<li>java文件模型  [在硬盘上的文件是byte,byte,byte存储的,是数据的集合]</li>
<li>打开文件方式  [有两种方式”rw(读写)”,”r(只读)”]</li>
<li>写方法    [raf.write(int),只写一个字节(后8位),同时指针指向下一个位置,准备再次写入]</li>
<li>读方法    [int b = raf.read(),读一个字节]</li>
<li>文件读写完成以后一定要关闭流<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">RandomAccessFile raf = new new RandomAccessFile(file,&quot;rw&quot;);</div><div class="line">System.out.println(&quot;指针的位置&quot; + raf.getFilePointer());</div><div class="line"></div><div class="line">//a-1.只写了一个字节</div><div class="line">raf.write(&apos;A&apos;); </div><div class="line">raf.write(&apos;B&apos;); </div><div class="line"></div><div class="line">//a.2-写1个int(用write每次只能写一个字节,如果要把i写进去得写次);</div><div class="line">int i = 0x7ffffff;  //16进制数组,代表999</div><div class="line">raf.write((i &gt;&gt;&gt; 24) &amp; 0xFF);  //高8位(右移后把前面的0给去掉,只留后8位)</div><div class="line">raf.write((i &gt;&gt;&gt; 16) &amp; 0xFF);</div><div class="line">raf.write((i &gt;&gt;&gt; 8) &amp; 0xFF);</div><div class="line">raf.write((i &gt;&gt;&gt; 0) &amp; 0xFF);</div><div class="line"></div><div class="line">//a-3直接写入一个int</div><div class="line">raf.writeInt(i); //底层即是如上操作</div><div class="line"></div><div class="line">//a-4写一个中文</div><div class="line">String s = &quot;中&quot;;</div><div class="line">byte [] gbk = s.getBytes(&quot;gbk&quot;);</div><div class="line">raf.write(gbk);</div><div class="line"></div><div class="line"></div><div class="line">//b-1.一次性读取[把文件中内容都读到字节数组中]</div><div class="line">raf.seek(0);  //读文件【必须把指针移动到头部】</div><div class="line">byte [] buf = new byte[(int)raf.length()];</div><div class="line">raf.read(buf);</div><div class="line">System.out.println(&quot;字节输出测试&quot; + Arrays.toString(buf));</div><div class="line"></div><div class="line"></div><div class="line">//b-2.构造成字符串读取</div><div class="line">String s1 = new String(buf);</div><div class="line">System.out.println(s1);</div><div class="line"></div><div class="line">//b-3.以16进制的方式读取</div><div class="line">for(byte b: buf)&#123;</div><div class="line">	System.out.println(Integer.toHexString(b &amp; 0xff) + &quot; &quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p><1>字节流<br>a.字节单个读取指定文件内容<br>b.字节流批量读取<br>c.文件拷贝，字节批量读取<br>d.进行文件的拷贝，利用带缓冲的字节流<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">package com.imooc.io;</div><div class="line"></div><div class="line">import java.io.BufferedInputStream;</div><div class="line">import java.io.BufferedOutputStream;</div><div class="line">import java.io.File;</div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">public class IOUtil &#123;</div><div class="line">	/**</div><div class="line">	 * 读取指定文件内容，按照16进制输出到控制台并且每输出10个byte换行</div><div class="line">	 * 【单字节读取不适合大文件，大文件效率很低】</div><div class="line">	 * @param 文件名</div><div class="line">	 */</div><div class="line">	public static void printHex(String fileName)throws IOException&#123;</div><div class="line">		//把文件作为字节流进行读操作</div><div class="line">		FileInputStream in = new FileInputStream(fileName);</div><div class="line">		</div><div class="line">		int b ;</div><div class="line">		int i = 1;</div><div class="line">		while((b = in.read())!=-1)&#123;</div><div class="line">			//A.将整型转换为16进制标识的字符串</div><div class="line">			if(b &lt;= 0xf)&#123; //即表示1位,则单位数前面补0</div><div class="line">				System.out.print(&quot;0&quot;);</div><div class="line">			&#125;</div><div class="line">			System.out.print(Integer.toHexString(b)+&quot;  &quot;);</div><div class="line">			</div><div class="line">			//B.每输出10个byte换行</div><div class="line">			if(i++%10==0)&#123;</div><div class="line">				System.out.println();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		in.close();</div><div class="line">	&#125;</div><div class="line">	/**</div><div class="line">	 * 字节流批量读取</div><div class="line">	 * 【对大文件而言效率高，也是我们最常用的读文件的方式】</div><div class="line">	 * @param 文件名</div><div class="line">	 */</div><div class="line">	public static void printHexByByteArray(String fileName)throws IOException&#123;</div><div class="line">		FileInputStream in = new FileInputStream(fileName);</div><div class="line">		</div><div class="line">		byte[] buf = new byte[8 * 1024];</div><div class="line">		/*从in中批量读取字节，放入到buf这个字节数组中，</div><div class="line">		 * 从第0个位置开始放，最多放buf.length个 </div><div class="line">		 * 返回的是读到的字节的个数</div><div class="line">		*/</div><div class="line">		  int bytes = 0;</div><div class="line">		  int j = 1;</div><div class="line">		  while((bytes = in.read(buf,0,buf.length))!=-1)&#123;</div><div class="line">			  for(int i = 0 ; i &lt; bytes;i++)&#123;</div><div class="line">				  System.out.print(Integer.toHexString(buf[i] &amp; 0xff)+&quot;  &quot;);</div><div class="line">				  if(j++%10==0)&#123;</div><div class="line">					  System.out.println();</div><div class="line">				  &#125;</div><div class="line">			  &#125;</div><div class="line">		  &#125;</div><div class="line">		  </div><div class="line">	  in.close();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * 文件拷贝，字节批量读取</div><div class="line">	 * @param srcFile</div><div class="line">	 * @param destFile</div><div class="line">	 * @throws IOException</div><div class="line">	 */</div><div class="line">	public static void copyFile(File srcFile,File destFile)throws IOException&#123;</div><div class="line">		//A.判断</div><div class="line">		if(!srcFile.exists())&#123;</div><div class="line">			throw new IllegalArgumentException(&quot;文件:&quot;+srcFile+&quot;不存在&quot;);</div><div class="line">		&#125;</div><div class="line">		if(!srcFile.isFile())&#123;</div><div class="line">			throw new IllegalArgumentException(srcFile+&quot;不是文件&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		//B.定义</div><div class="line">		FileInputStream in = new FileInputStream(srcFile);</div><div class="line">		FileOutputStream out = new FileOutputStream(destFile);</div><div class="line">		byte[] buf = new byte[8*1024];</div><div class="line">		int b ;</div><div class="line">		</div><div class="line">		//C.读取</div><div class="line">	    while((b = in.read(buf,0,buf.length))!=-1)&#123;</div><div class="line">	    	out.write(buf,0,b);</div><div class="line">	    	</div><div class="line">	    &#125;</div><div class="line">	    </div><div class="line">	    //D.关闭</div><div class="line">	    out.flush();//刷新流</div><div class="line">	    in.close();</div><div class="line">	    out.close();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * 进行文件的拷贝，利用带缓冲的字节流</div><div class="line">	 * @param srcFile</div><div class="line">	 * @param destFile</div><div class="line">	 * @throws IOException</div><div class="line">	 */</div><div class="line">	public static void copyFileByBuffer(File srcFile,File destFile)throws IOException&#123;</div><div class="line">		//A.判断</div><div class="line">		if(!srcFile.exists())&#123;</div><div class="line">			throw new IllegalArgumentException(&quot;文件:&quot;+srcFile+&quot;不存在&quot;);</div><div class="line">		&#125;</div><div class="line">		if(!srcFile.isFile())&#123;</div><div class="line">			throw new IllegalArgumentException(srcFile+&quot;不是文件&quot;);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		//B.定义</div><div class="line">		BufferedInputStream bis = new BufferedInputStream(</div><div class="line">				new FileInputStream(srcFile));</div><div class="line">		BufferedOutputStream bos = new BufferedOutputStream(</div><div class="line">				new FileOutputStream(destFile));</div><div class="line">		int c ;</div><div class="line">		</div><div class="line">		//C.读取</div><div class="line">		while((c = bis.read())!=-1)&#123;</div><div class="line">			bos.write(c);</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		//D.关闭</div><div class="line">		bos.flush();//刷新缓冲区</div><div class="line">		bis.close();</div><div class="line">		bos.close();</div><div class="line">	&#125;</div><div class="line">	/**</div><div class="line">	 * 单字节，不带缓冲进行文件拷贝</div><div class="line">	 * @param srcFile</div><div class="line">	 * @param destFile</div><div class="line">	 * @throws IOException</div><div class="line">	 */</div><div class="line">	public static void copyFileByByte(File srcFile,File destFile)throws IOException&#123;</div><div class="line">		if(!srcFile.exists())&#123;</div><div class="line">			throw new IllegalArgumentException(&quot;文件:&quot;+srcFile+&quot;不存在&quot;);</div><div class="line">		&#125;</div><div class="line">		if(!srcFile.isFile())&#123;</div><div class="line">			throw new IllegalArgumentException(srcFile+&quot;不是文件&quot;);</div><div class="line">		&#125;</div><div class="line">		FileInputStream in = new FileInputStream(srcFile);</div><div class="line">		FileOutputStream out = new FileOutputStream(destFile);</div><div class="line">		int c ;</div><div class="line">		while((c = in.read())!=-1)&#123;</div><div class="line">			out.write(c);</div><div class="line">			out.flush();</div><div class="line">		&#125;</div><div class="line">		in.close();</div><div class="line">		out.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></1></p>
<hr>
<p><br></p>
<p>字符流</p>
<ul>
<li>字符流读写文件</li>
<li>字符流的过滤器[一次读写1行]<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">package com.imooc.io;</div><div class="line"></div><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.BufferedWriter;</div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.FileReader;</div><div class="line">import java.io.FileWriter;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.io.OutputStreamWriter;</div><div class="line">import java.io.PrintWriter;</div><div class="line"></div><div class="line">public class IOUtil_RW &#123;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * 字符流读写文件</div><div class="line">	 * @param readFileName [读取文件]</div><div class="line">	 * @param writeFileName [写入文件]</div><div class="line">	 * @throws IOException</div><div class="line">	 */</div><div class="line">	public static void ReaderWriteFile(String readFileName,String writeFileName) throws IOException&#123;</div><div class="line">		</div><div class="line">		//A.定义</div><div class="line">		FileReader fr = new FileReader(readFileName);</div><div class="line">		FileWriter fw = new FileWriter(writeFileName);</div><div class="line">		</div><div class="line">		//B.读写</div><div class="line">		char[] buffer = new char[2056];</div><div class="line">		int c ;</div><div class="line">		while((c = fr.read(buffer,0,buffer.length))!=-1)&#123;</div><div class="line">			fw.write(buffer,0,c);</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		//C.刷新,关闭流</div><div class="line">		fw.flush();</div><div class="line">		fr.close();</div><div class="line">		fw.close();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * 字符流的过滤器[一次读写1行]</div><div class="line">	* @param writeFileName [写入文件]</div><div class="line">	* @param writeFileName [写入文件]</div><div class="line">	 * @throws IOException</div><div class="line">	 */</div><div class="line">	public static void BufferReaderWriteFile(String readFileName,String writeFileName)  throws IOException&#123;</div><div class="line">		 //对文件进行读写操作 </div><div class="line">		BufferedReader br = new BufferedReader(</div><div class="line">											new InputStreamReader(</div><div class="line">													new FileInputStream(readFileName)));</div><div class="line">		BufferedWriter bw = new BufferedWriter(</div><div class="line">											new OutputStreamWriter(</div><div class="line">													new FileOutputStream(writeFileName)));</div><div class="line">		</div><div class="line">		//另一种缓冲流[可通过println换行]</div><div class="line">//		PrintWriter pw = new PrintWriter(&quot;e:\\javaio\\imooc4.txt&quot;);</div><div class="line">		</div><div class="line">		String line ;</div><div class="line">		while((line = br.readLine()) != null)&#123;</div><div class="line">			System.out.println(line);//一次读一行，并不能识别换行</div><div class="line">			bw.write(line);               //写入文件</div><div class="line">			bw.newLine();				//单独换行操作【BufferedWriter无法自动识别换行】</div><div class="line"></div><div class="line">//			pw.println(line);</div><div class="line">//			pw.flush();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		bw.flush();</div><div class="line">		br.close();</div><div class="line">		bw.close();</div><div class="line">//		pw.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="6-编写定时任务"><a href="#6-编写定时任务" class="headerlink" title="6.编写定时任务"></a>6.编写定时任务</h2><p>常用类</p>
<ul>
<li>Timer     [定时器工具,用来在一个后台线程计划执行指定任务]</li>
<li>TimerTask [抽象类,子类代表可以被Timer计划的任务]<br><br></li>
</ul>
<p>schedule() 和 scheduleAtFixedRate()的区别</p>
<ul>
<li>两个都是Timer类中安排执行定时器任务的方法</li>
<li>schedule[保持时间间隔的稳定]【循环时间】</li>
<li>scheduleAtFixedRate[保持执行频率的稳定]【循环速率】<br><br></li>
</ul>
<p>Timer的缺点</p>
<ul>
<li>Timer内部一个线程,需要等上一个任务执行完,才会执行下一个(某个任务超过预计指定时间)<br>+如果TimerTask 抛出 RuntimeException有异常,Timer会终止所有任务的运行<br><br></li>
</ul>
<p>用 ScheduledExecutorService类替代 Timer</p>
<ol>
<li>Timer是基于基于绝对时间【对系统时间比较敏感】;ScheduledExecutorService是基于相对时间</li>
<li>Timer内部单一线程;ScheduledExecutorService内部是个线程池,可以支持多个任务并发执行<br><br></li>
</ol>
<p>案例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">1. 延迟定时器(简单实现)</div><div class="line">2. 指定具体时间执行任务</div><div class="line">3. 循环定时器【指定第一次延迟 and 循环间隔】</div><div class="line">4. ScheduledExecutorService定时器</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;1&gt;延迟定时器(简单实现)</div><div class="line">		class Task extends TimerTask&#123;</div><div class="line">			public void run()&#123;</div><div class="line">				System.out.println(&quot;---------- &gt;开始定时器任务！&quot;);</div><div class="line">				for(int i = 0;i &lt; 5;i++)&#123;</div><div class="line">					System.out.println(&quot;定时器循环：&quot; + i);          //定时器线程奔跑</div><div class="line">					try &#123;</div><div class="line">						Thread.sleep(100);</div><div class="line">					&#125; catch (Exception e) &#123;&#125;</div><div class="line">				&#125;</div><div class="line">				System.out.println(&quot;---------- &gt;定时器执行完毕！&quot;);</div><div class="line">				this.cancel();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		public  class Test &#123;</div><div class="line">			public static void main(String[] args)&#123;</div><div class="line">				System.out.println(&quot;**************2秒后执行定时器任务**************&quot;);</div><div class="line">				</div><div class="line">				Timer timer = new Timer();</div><div class="line">				timer.schedule(new Task(), 2*1000); 				  //2秒后执行定时器任务</div><div class="line">				</div><div class="line">				for(int i = 0;i &lt; 30; i ++)&#123;  </div><div class="line">					System.out.println(&quot;main线程的循环：&quot; + i);  //main线程奔跑</div><div class="line">					try &#123;</div><div class="line">						Thread.sleep(100);</div><div class="line">					&#125; catch (Exception e) &#123;&#125;</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				System.out.println(&quot;**************main线程完毕**********&quot;);</div><div class="line">				timer.cancel();    												  // 终止此计时器，丢弃所有当前已安排的任务。[不终止的话,定时器线程一直在运行]</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"> </div><div class="line"></div><div class="line">&lt;2&gt;指定具体时间执行任务</div><div class="line">		//定时器任务</div><div class="line">		class Task extends TimerTask&#123;</div><div class="line">			public void run()&#123;</div><div class="line">				System.out.println(&quot;指定时间执行定时器线程任务!&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		public  class Test &#123;</div><div class="line">			</div><div class="line">			//设置指定时间</div><div class="line">			public static Date getTime()&#123;</div><div class="line">				//当时间到达 2017-3-26 10:36:40 时就会执行该线程任务(大于该时间(运行前已经超过指定时间),会马上执行)</div><div class="line">				Calendar calendar = Calendar.getInstance();</div><div class="line">				     calendar.set(Calendar.YEAR, 2017);     				 //年</div><div class="line">				     calendar.set(Calendar.MONTH, 3 -1 );  				 //月份【月份需要-1 ,0(1月),2(3月)】</div><div class="line">				     calendar.set(Calendar.DAY_OF_MONTH,26);      //天</div><div class="line">				     calendar.set(Calendar.HOUR_OF_DAY,10);         //时</div><div class="line">					 calendar.set(Calendar.MINUTE, 36);				     //分</div><div class="line">					 calendar.set(Calendar.SECOND, 40);					 //秒</div><div class="line">				</div><div class="line">					 </div><div class="line">				Date date = calendar.getTime();</div><div class="line">				return date;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			//主方法</div><div class="line">			public static void main(String[] args)&#123;</div><div class="line">					</div><div class="line">				//A-获取指定时间</div><div class="line">				Date date = Test.getTime();</div><div class="line">				</div><div class="line">				//B-设置定时器</div><div class="line">				Timer timer = new Timer();</div><div class="line">				timer.schedule(new Task(), date); //定时器任务 and 指定时间</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;循环定时器【指定第一次延迟 and 循环间隔】</div><div class="line">		//定时器任务</div><div class="line">		class Task extends TimerTask&#123;</div><div class="line">			public void run()&#123;</div><div class="line">				Date nowDate = new Date(this.scheduledExecutionTime());  //获取当前时间</div><div class="line">				System.out.println(&quot;本次执行定时器线程的时间为: &quot;  + nowDate);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		public  class Test &#123;</div><div class="line">			</div><div class="line">			//主方法</div><div class="line">			public static void main(String[] args)&#123;</div><div class="line">				</div><div class="line">				</div><div class="line">				//B-设置定时器</div><div class="line">				Timer timer = new Timer();</div><div class="line">				timer.schedule(new Task(), 1*1000,2*1000); //定时器任务 and 1秒后执行 and 每2秒运行一次 【不关闭定时器会一直运行】</div><div class="line">				</div><div class="line">				try&#123;</div><div class="line">					Thread.sleep(10 * 1000);    //main线程休眠10秒</div><div class="line">					timer.cancel();  				  //关闭定时器</div><div class="line">				&#125;catch(Exception e)&#123;&#125;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;ScheduledExecutorService定时器</div><div class="line">		//一.自定义异常类</div><div class="line">		class MyException extends Exception&#123;</div><div class="line">			public MyException()&#123;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">			public MyException(String message)&#123;</div><div class="line">				super(message);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		//二.测试定时器服务类</div><div class="line">		class TestScheduledExecutorService&#123;</div><div class="line">			public ScheduledExecutorService service;   //服务</div><div class="line">			public long  start;										//储存开始时间</div><div class="line">			</div><div class="line">			//构造函数</div><div class="line">			public TestScheduledExecutorService()&#123;</div><div class="line">				this.service =  Executors.newScheduledThreadPool(2);           // 创建2个线程池，它可安排在给定延迟后运行命令或者定期地执行。</div><div class="line">		        this.start = System.currentTimeMillis();                                    //开始时间</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			//任务1：</div><div class="line">			public void taskOne()&#123;</div><div class="line">				service.schedule(new Runnable() &#123;</div><div class="line">					@Override</div><div class="line">					public void run() &#123;</div><div class="line">						System.out.println(&quot;任务1(timeOne)的执行时间:&quot; + (System.currentTimeMillis() - start));</div><div class="line">						try&#123;</div><div class="line">							 throw new MyException(&quot;这里抛出自定义异常&quot;);   //这里抛出异常后仍然会执行任务2(taskTwo)</div><div class="line">						&#125;catch (Exception e) &#123;</div><div class="line">							e.printStackTrace();</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;, 1*1000, TimeUnit.MILLISECONDS); //延迟1秒后执行 and 时间单位(毫秒)</div><div class="line">			&#125;</div><div class="line">			//任务2:</div><div class="line">			public void taskTwo()&#123;</div><div class="line">				service.schedule(new Runnable() &#123;</div><div class="line">					@Override</div><div class="line">					public void run() &#123;</div><div class="line">						System.out.println(&quot;任务2(timeTwo)的执行时间:&quot; + (System.currentTimeMillis() - start));</div><div class="line">					&#125;</div><div class="line">				&#125;, 2* 1000, TimeUnit.MILLISECONDS); //延迟2秒后执行 and 时间单位(毫秒)</div><div class="line">										/*</div><div class="line">										 * MICROSECONDS    微秒   一百万分之一秒（就是毫秒/1000）</div><div class="line">											MILLISECONDS    毫秒   千分之一秒    </div><div class="line">											NANOSECONDS   毫微秒  十亿分之一秒（就是微秒/1000）</div><div class="line">											SECONDS          秒</div><div class="line">											MINUTES     分钟</div><div class="line">											HOURS      小时</div><div class="line">											DAYS      天</div><div class="line">										 */</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		//三.测试类</div><div class="line">		public  class Test &#123;</div><div class="line">			</div><div class="line">			//主方法</div><div class="line">			public static void main(String[] args)&#123;</div><div class="line">				TestScheduledExecutorService s = new TestScheduledExecutorService();</div><div class="line">				s.taskOne();   //执行任务1</div><div class="line">				s.taskTwo();  //执行任务2</div><div class="line">				s.service.shutdown();  //关闭服务</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		</div><div class="line">********************控制台输出*********************</div><div class="line">			任务1(timeOne)的执行时间:1001</div><div class="line">			任务2(timeTwo)的执行时间:2002</div></pre></td></tr></table></figure></p>
<h2 id="-3"><a href="#-3" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="7-获取控制台键盘输入"><a href="#7-获取控制台键盘输入" class="headerlink" title="7.获取控制台键盘输入"></a>7.获取控制台键盘输入</h2><p>案例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;键盘输入</div><div class="line">	    public static void printIO(int way) throws  IOException&#123; //参数：方式</div><div class="line">	        if(way == 1)&#123;</div><div class="line">	            int i = 0;</div><div class="line">	            while(i != -1)&#123;</div><div class="line">	                i = System.in.read(); //获取输入流,从输入流中读取数据的下一个字节</div><div class="line">	                System.out.print((char)i);  //i是字符的ASCII码值,强转为字符输出</div><div class="line">	            &#125;</div><div class="line">	        &#125;</div><div class="line">	        else if(way == 2)&#123;</div><div class="line">	            byte [] b = new byte[1024];     //数据缓冲</div><div class="line">	            int n = System.in.read(b);</div><div class="line">	            String s = new String(b,0,n); //将byte数组转为字符串</div><div class="line">	            System.out.println(s);</div><div class="line">	        &#125;</div><div class="line">	        else if(way == 3)&#123;</div><div class="line">	            Scanner scanner = new Scanner(System.in);</div><div class="line">	            while(scanner.hasNext())&#123;</div><div class="line">	                System.out.println(scanner.nextLine());</div><div class="line">	            &#125;</div><div class="line">	        &#125;</div><div class="line">	        else if(way == 4)&#123;</div><div class="line">	            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</div><div class="line">	            System.out.println(br.readLine());</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;使用Scanner读取</div><div class="line">			public static void main(String[] args) throws Exception&#123;</div><div class="line">		        </div><div class="line">		        Scanner sr=new Scanner(System.in);</div><div class="line">		        String str=sr.next(); //next() --Finds and returns the next complete token from this scanner.</div><div class="line">		        System.out.println(str);</div><div class="line">		        </div><div class="line">		        </div><div class="line">		        //读取文件输入</div><div class="line">		//      Scanner s=null;</div><div class="line">		//      try&#123;</div><div class="line">		//          s=new Scanner(new BufferedReader(new FileReader(&quot;C:\\Users\\Liu-shuwei\\Desktop\\你好.txt&quot;)));</div><div class="line">		//          s.useDelimiter(&quot;jdk&quot;);//使用字符串&quot;jdk作为分隔符&quot;</div><div class="line">		//          while(s.hasNext())&#123;</div><div class="line">		//              System.out.println(s.next());</div><div class="line">		//          &#125;</div><div class="line">		//      &#125;finally&#123;</div><div class="line">		//          if(s!=null) s.close();</div><div class="line">		//      &#125;</div><div class="line">		 	&#125;</div></pre></td></tr></table></figure></p>
<h2 id="-4"><a href="#-4" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="8-文档注释【JavaDoc】"><a href="#8-文档注释【JavaDoc】" class="headerlink" title="8.文档注释【JavaDoc】"></a>8.文档注释【JavaDoc】</h2><p>&emsp;Javadoc是JDK附带的一个工具[用来生成从需要预定义格式的文档的Java源代码至HTML格式的Java代码文档]<br><br></p>
<p>标签<br>@author         [添加类的作者]<br>@code             [不把文本转换成 HTML 标记和嵌套的Java标签而用代码字体展示它]<br>@docRoot         [表示从任何生成页面到生成文档的根目录的相对路径 ]<br>@deprecated     [添加一个注释暗示 API 应该不再被使用]<br>@exception         [用类名和描述文本给生成的文档添加一个副标题]<br>@inheritDoc     [从最近的可继承的类或可实现的接口继承注释]<br>@link             [用指向特定的包，类或者一个引用类的成员名的文档的可见文本标签插入在线链接]<br>@linkplain         [和{@link}相同，除了链接的标签用纯文本标示而不是代码字体]<br>@param             [给“参数”区域添加一个有特定参数名且后跟着特定描述的参数]<br>@return         [添加一个有描述文本的“Returns”区域]<br>@see             [添加带有链接或者指向引用的文本入口的标题“See] Also”<br>@serial         [在默认的序列化字段的文本注释中使用]<br>@serialData     [记录由 writeObject( ) 或 writeExternal( )方法所写的数据 ]<br>@serialField     [记录一个 ObjectStreamField 成分]<br>@since             [给生成的文档添加一个带有特定 since 文本的”Since”标题]<br>@throws         [@throw 和 @exception 标签是同义词]<br>@value             [当{@value}被用在一个静态字段的文本注释中，它展示了那个常量的值]<br>@version         [当 -version 选项被使用时用特定的 version w文本给生成的文本添加一个“Version”副标题]<br><br></p>
<p>案例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;转换HTML部分 以及文档</div><div class="line">		/**</div><div class="line">		* &lt;h1&gt;Hello, World!&lt;/h1&gt;</div><div class="line">		* The HelloWorld program implements an application that</div><div class="line">		* simply displays &quot;Hello World!&quot; to the standard output.</div><div class="line">		* &lt;p&gt;</div><div class="line">		* Giving proper comments in your program makes it more</div><div class="line">		* user friendly and it is assumed as a high quality code.</div><div class="line">		* </div><div class="line">		*</div><div class="line">		* @author  Zara Ali</div><div class="line">		* @version 1.0</div><div class="line">		* @since   2014-03-31 </div><div class="line">		*/</div><div class="line">		public class HelloWorld &#123;</div><div class="line">		    public static void main(String[] args) &#123;</div><div class="line">		        // Prints Hello, World! on standard output.</div><div class="line">		        System.out.println(&quot;Hello World!&quot;);</div><div class="line">		    &#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		********************************************</div><div class="line">		JDK运行环境下输入命令：</div><div class="line">			javadoc HelloWorld.java</div></pre></td></tr></table></figure></p>
<h2 id="-5"><a href="#-5" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="9-编码问题"><a href="#9-编码问题" class="headerlink" title="9.编码问题"></a>9.编码问题</h2><p>&emsp;char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字【你一个特殊工艺汉字没有被包含在unicode编码字符集中，就不能用char来储存】<br><br></p>
<p>资源</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="external">Unicode编码</a><br><br></li>
</ul>
<p>Unicode码</p>
<ul>
<li>是java默认字符集,占两个字节byte</li>
<li>一个字节=8比特位</li>
<li>每个Unicode占用16比特位<br><br></li>
</ul>
<p>ANSI码f</p>
<ul>
<li>在简体中文的windows系统,ANSI就是GB2312</li>
<li>ASCII码是ANSI码的子集</li>
<li>标准的ASCII只使用7个bit<br><br></li>
</ul>
<p>中文字符</p>
<ul>
<li>Java语言中,中文字符所占字节取决于字符的编码方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ISO8859-1  1个中文与1个英文字符一样,占1个字节</div><div class="line">GB2312 or GBK编码  1个中文字符,占2个字节</div><div class="line">UTF-8编码  1个中文字符,占3个字节</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;</div><div class="line">	 ASCII：美国标准信息交换码，用一个字节的7位可以表示一个字符</div><div class="line">	 ISO8859-1：拉丁码表，西欧标准字符集，用一个字节的8位表示</div><div class="line">	 GB2312：中文编码表，用两个字节来表示中文编码</div><div class="line">	 GBK：中文编码表的升级，融合了更多表示中文文字符号</div><div class="line">	 GB18030：GBK的取代版本</div><div class="line">	 BIG-5：同行与港台地区，是繁体字编码方案，俗称“大五码”</div><div class="line">	 Uicode:国际标准码，融合了多种文字</div><div class="line">	 UTF-8:是Unicode编码的实现方式，最多用三个字节来表示一个字符</div><div class="line">	    </div><div class="line">	 GBK编码     中文占用2个字节，英文占用1个字节</div><div class="line">	 UTF-8编码   中文占用3个字节，英文占用1个字节</div><div class="line">	 UTF-16be编码中文占用2个字节，英文占用2个字节</div><div class="line">	 Java是双字节编码 utf-16be，即java中每个字符占用两个字节</div><div class="line"></div><div class="line"></div><div class="line">	//转码</div><div class="line">	String.getBytes(&quot;要获得字节序列的编码格式&quot;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;</div><div class="line">		/*测试Unicode*/</div><div class="line">		public static void main(String[] args) &#123;</div><div class="line">				char c = &apos;Ǵ&apos;;</div><div class="line">				System.out.println((char)500);</div><div class="line">				</div><div class="line">				Unicode: //尝试将int转为char【得到Unicode编码的字符集】</div><div class="line">					for(int i = 0;i &lt; 10000; i++)&#123;</div><div class="line">						System.out.print((char)i + &quot;\t&quot;);</div><div class="line">						if(i % 10 == 0)&#123;</div><div class="line">							System.out.println();//换行</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h2 id="-6"><a href="#-6" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="10-Applet的简单介绍"><a href="#10-Applet的简单介绍" class="headerlink" title="10.Applet的简单介绍"></a>10.Applet的简单介绍</h2><p>&emsp;一个Applet是运行在网页浏览器上的Java程序</p>
<p>说明:</p>
<ul>
<li>一个Applet是继承Applet类(java.applet.Applet)的java类</li>
<li>main()不在Applet调用[一个Applet不定义main()]</li>
<li>Applet程序被设计嵌入HTML页面</li>
<li>用户查看带有Applet的HTML页面,Applet的代码会被下载到用户机器</li>
<li>需要JVM查看[浏览器的插件 or 独立运行环境]</li>
<li>有网页浏览器实施的严格安全规则[安全性被称为”沙箱安全”]</li>
<li>Java Archive(JAR)[下载Applet所需要的类]<br><br></li>
</ul>
<p>生命周期</p>
<ul>
<li>初始化[init(),Applet的参数标签被处理后调用]</li>
<li>开始[(start(),浏览器调用init()后自动调用 和 任何返回该applet的页面时候调用]</li>
<li>描述(paint(),执行start()方法后立刻调用)</li>
<li>离开[stop(),离开applet所在页面时自动调用,在同一个Applet能重复调用]</li>
<li>销毁(destroy(),仅正常关闭浏览器时调用)<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="11-发送邮件【JavaMail】"><a href="#11-发送邮件【JavaMail】" class="headerlink" title="11.发送邮件【JavaMail】"></a>11.发送邮件【JavaMail】</h2><p>参考资料:</p>
<ul>
<li><a href="http://www.oracle.com/technetwork/java/index.html" target="_blank" rel="external">Java的扩展jar下载</a></li>
<li><a href="http://www.oracle.com/technetwork/java/javamail-1-4-140512.html" target="_blank" rel="external">JavaMail 1.4</a></li>
<li><a href="http://www.cnblogs.com/whgk/p/6506027.html" target="_blank" rel="external">Java Web(十三) 使用javamail进行发送邮件，(使用QQ，163，新浪邮箱服务器)</a></li>
<li>Java Activation Framework (JAF)<br><br></li>
</ul>
<p>Maven依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--JavaMail包[发送邮件]--&gt;</div><div class="line">   &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;javax.mail&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;mail&lt;/artifactId&gt;</div><div class="line">     &lt;version&gt;1.4.7&lt;/version&gt;</div><div class="line">   &lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>Email【POJO,储存邮件信息】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">package com.blog.extend.javamail;</div><div class="line"></div><div class="line">import javax.mail.Authenticator;</div><div class="line">import javax.mail.PasswordAuthentication;</div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  POJO对象,储存邮箱信息</div><div class="line"> *</div><div class="line"> * @Author Suvan</div><div class="line"> * @Date 2017-05-29-21:17</div><div class="line"> */</div><div class="line">public class Email &#123;</div><div class="line">    private String username;                    //发送者地址</div><div class="line">    private String pensonalName;               //发信人名称[可自定义]</div><div class="line">    private String authorizationCode;        //授权码</div><div class="line">    private String recipients;                 //收件人</div><div class="line">    private String subject;                    //主题</div><div class="line">    private String text;                       //文本内容</div><div class="line">    private String content;                    //HTML内容</div><div class="line">    private Date sendDate;                     //发送日期</div><div class="line">    private String propertiesWay;               //连接方式[163和qq邮箱都是默认,gmail可选择SSL或者TSL]</div><div class="line"></div><div class="line">    //授权信息</div><div class="line">    private Authenticator authenticator = new Authenticator() &#123;</div><div class="line">        @Override</div><div class="line">        protected PasswordAuthentication getPasswordAuthentication() &#123;</div><div class="line">            //填写自己163邮箱的登录账户和授权密码</div><div class="line">            return new PasswordAuthentication(username, authorizationCode);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">    //Getter</div><div class="line">    public String getUsername() &#123;</div><div class="line">        return username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getAuthorizationCode() &#123;</div><div class="line">        return authorizationCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getRecipients() &#123;</div><div class="line">        return recipients;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getSubject() &#123;</div><div class="line">        return subject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getText() &#123;</div><div class="line">        return text;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getContent() &#123;</div><div class="line">        return content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Date getSendDate() &#123;</div><div class="line">        return sendDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Authenticator getAuthenticator() &#123;</div><div class="line">        return authenticator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getPropertiesWay() &#123;</div><div class="line">        return propertiesWay;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getPensonalName() &#123;</div><div class="line">        return pensonalName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //Setter</div><div class="line">    public void setUsername(String username) &#123;</div><div class="line">        this.username = username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAuthorizationCode(String authorizationCode) &#123;</div><div class="line">        this.authorizationCode = authorizationCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setRecipients(String recipients) &#123;</div><div class="line">        this.recipients = recipients;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSubject(String subject) &#123;</div><div class="line">        this.subject = subject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setText(String text) &#123;</div><div class="line">        this.text = text;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setContent(String content) &#123;</div><div class="line">        this.content = content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSendDate(Date sendDate) &#123;</div><div class="line">        this.sendDate = sendDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAuthenticator(Authenticator authenticator) &#123;</div><div class="line">        this.authenticator = authenticator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPropertiesWay(String propertiesWay) &#123;</div><div class="line">        this.propertiesWay = propertiesWay;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPensonalName(String pensonalName) &#123;</div><div class="line">        this.pensonalName = pensonalName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>SendEmail【发送邮件功能】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div></pre></td><td class="code"><pre><div class="line">package com.blog.extend.javamail;</div><div class="line"></div><div class="line"></div><div class="line">import com.sun.mail.util.MailSSLSocketFactory;</div><div class="line"></div><div class="line">import javax.mail.MessagingException;</div><div class="line">import javax.mail.NoSuchProviderException;</div><div class="line">import javax.mail.Session;</div><div class="line">import javax.mail.Transport;</div><div class="line">import javax.mail.internet.InternetAddress;</div><div class="line">import javax.mail.internet.MimeMessage;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.security.GeneralSecurityException;</div><div class="line">import java.util.Date;</div><div class="line">import java.util.Properties;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * 使用javaMail发送邮件【163邮箱,qq邮箱,gmail邮箱】</div><div class="line"> *</div><div class="line"> * @Author Suvan</div><div class="line"> * @Date 2017-05-29-20:40</div><div class="line"> */</div><div class="line">public class SendEmail &#123;</div><div class="line">    /*个人邮箱*/</div><div class="line">    public Properties getProperties_liushuwei()&#123;</div><div class="line">        Properties props = new Properties();</div><div class="line"></div><div class="line">        props.setProperty(&quot;mail.host&quot;,&quot;mail.liushuwei.cn&quot;);      //网易smtp邮箱服务器</div><div class="line">        return props;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*网易邮箱连接参数【需要开启：POP3/SMTP服务 】*/</div><div class="line">    public Properties getProperties_163()&#123;</div><div class="line">        Properties props = new Properties();</div><div class="line">            props.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;);        //开启权限验证</div><div class="line">            props.setProperty(&quot;mail.host&quot;,&quot;smtp.163.com&quot;);      //网易smtp邮箱服务器</div><div class="line"></div><div class="line">        return props;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*QQ邮箱连接参数【需要开启：POP3/SMTP服务 】*/</div><div class="line">    public Properties getProperties_qq()&#123;</div><div class="line">        Properties props = new Properties();</div><div class="line">            props.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;);        //开启权限验证</div><div class="line">            props.setProperty(&quot;mail.host&quot;,&quot;smtp.qq.com&quot;);      //qq的smtp邮箱服务器</div><div class="line">            props.setProperty(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);</div><div class="line"></div><div class="line">        //QQ邮箱的SSL加密</div><div class="line">        MailSSLSocketFactory sf = null;</div><div class="line">        try&#123;</div><div class="line">            sf = new MailSSLSocketFactory();</div><div class="line">            sf.setTrustAllHosts(true);</div><div class="line">        &#125;catch (GeneralSecurityException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        props.put(&quot;mail.smtp.ssl.enable&quot;,&quot;true&quot;);</div><div class="line">        props.put(&quot;mail.smtp.ssl.socketFactory&quot;,sf);</div><div class="line"></div><div class="line"></div><div class="line">        return props;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*谷歌邮箱连接参数【需要开启：允许不够安全的应用】*/</div><div class="line">    public Properties getProperties_gmail(String way)&#123;</div><div class="line"></div><div class="line">        Properties props = new Properties();</div><div class="line">        if(&quot;SSL&quot;.equals(way))&#123;</div><div class="line">            //1.SSL方式</div><div class="line">            final String SSL_FACTORY = &quot;javax.net.ssl.SSLSocketFactory&quot;;</div><div class="line">            props.put(&quot;mail.debug&quot;, &quot;true&quot;);</div><div class="line">            props.put(&quot;mail.smtp.host&quot;, &quot;smtp.gmail.com&quot;);</div><div class="line">            props.put(&quot;mail.smtp.ssl.enable&quot;, &quot;true&quot;);</div><div class="line">            props.put(&quot;mail.smtp.socketFactory.class&quot;, SSL_FACTORY);</div><div class="line">            props.put(&quot;mail.smtp.port&quot;, &quot;465&quot;);</div><div class="line">            props.put(&quot;mail.smtp.socketFactory.port&quot;, &quot;465&quot;);</div><div class="line">            props.put(&quot;mail.smtp.socketFactory.fallback&quot;, &quot;false&quot;);</div><div class="line">            props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);</div><div class="line">        &#125;else&#123;</div><div class="line">            //2.TLS方式</div><div class="line">            props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);</div><div class="line">            props.put(&quot;mail.smtp.starttls.enable&quot;, &quot;true&quot;);</div><div class="line">            props.put(&quot;mail.smtp.host&quot;, &quot;smtp.gmail.com&quot;);</div><div class="line">            props.put(&quot;mail.smtp.port&quot;, &quot;587&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return props;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /*发送邮件*/</div><div class="line">    public void GO(Email email)&#123;  //Email对象</div><div class="line">        try &#123;</div><div class="line">            //A-构建连接参数</div><div class="line">            String username = email.getUsername();</div><div class="line">            String emailServer = username.substring(username.indexOf(&quot;@&quot;)+1,username.lastIndexOf(&quot;.&quot;));</div><div class="line">            Properties props = null;</div><div class="line">            if(&quot;163&quot;.equals(emailServer))&#123;</div><div class="line">                props = getProperties_163();</div><div class="line">            &#125;else if(&quot;qq&quot;.equals(emailServer))&#123;</div><div class="line">                props = getProperties_qq();</div><div class="line">            &#125;else if(&quot;gmail&quot;.equals(emailServer))&#123;</div><div class="line">                props = getProperties_gmail(&quot;SSL&quot;);</div><div class="line">            &#125;else if(&quot;liushuwei&quot;.equals(emailServer))&#123;</div><div class="line">                props = getProperties_liushuwei();</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">            //B.获取连接【获取默认会话对】</div><div class="line">            Session mailSession = Session.getInstance(props, email.getAuthenticator()); //连接参数,授权信息</div><div class="line"></div><div class="line">            //B-创建消息【获取MimeMessage对象】</div><div class="line">            MimeMessage  msg = new MimeMessage(mailSession);</div><div class="line"></div><div class="line">            //B-2.发件邮件 + 发信名称[没设置的话默认为空]</div><div class="line">            String personalName =  email.getPensonalName();</div><div class="line">            if (personalName != null)&#123;</div><div class="line">                try&#123;</div><div class="line">                    msg.setFrom(new InternetAddress(email.getUsername(),personalName));</div><div class="line">                &#125;catch (UnsupportedEncodingException ue)&#123;ue.printStackTrace();&#125;</div><div class="line">            &#125;else&#123;</div><div class="line">                msg.setFrom(new InternetAddress(email.getUsername())); //默认发信名称为：邮箱地址</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">            /*B-3.收件人</div><div class="line">             *    参数1：</div><div class="line">             *      Message.RecipientType.TO  代表收件人(主要收件,能知道抄送给谁,不知道暗送)</div><div class="line">             *      Message.RecipientType.CC  抄送</div><div class="line">             *      Message.RecipientType.BCC 暗送</div><div class="line">             *</div><div class="line">             *    参数2：</div><div class="line">             *      收件人地址 or 抄送or密送名单【群发-Address[]】</div><div class="line">             */</div><div class="line"></div><div class="line">            msg.setRecipient(MimeMessage.RecipientType.TO,</div><div class="line">                             new InternetAddress(email.getRecipients()));</div><div class="line"></div><div class="line">            //B-4.日期,主题,正文</div><div class="line">            Date date = email.getSendDate();</div><div class="line">            String text = email.getText();</div><div class="line">            String content = email.getContent();</div><div class="line"></div><div class="line">            if(date != null)&#123;</div><div class="line">                msg.setSentDate(date);                                                 //日期</div><div class="line">            &#125;</div><div class="line">            msg.setSubject(email.getSubject(), &quot;UTF-8&quot;);                       //主题</div><div class="line">            if(text != null)&#123;</div><div class="line">                msg.setText(text, &quot;UTF-8&quot;);                                    //文本内容</div><div class="line">            &#125;else if(content != null)&#123;</div><div class="line">                msg.setContent(content,&quot;text/html;charset=UTF-8&quot;);                       //HTML内容</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            msg.saveChanges();//保存更改</div><div class="line"></div><div class="line">            //C-发送邮件</div><div class="line">            Transport.send(msg);</div><div class="line"></div><div class="line">            System.out.println(&quot;邮件发送成功........!&quot;);</div><div class="line"></div><div class="line">        &#125; catch (NoSuchProviderException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (MessagingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //public static void main(String[] args) &#123;</div><div class="line">        //String contentHTML = &quot;&lt;head&gt;&quot; +</div><div class="line">        //        &quot;&lt;title&gt;注册验证码&lt;/title&gt;&quot; +</div><div class="line">        //        &quot;&lt;/head&gt;&quot; +</div><div class="line">        //        &quot;&lt;body&gt;&quot; +</div><div class="line">        //        &quot;&lt;h1&gt;您好,注册码是:&quot; + 213123 + &quot;,欢迎您注册博客&lt;/h1&gt;&quot; +</div><div class="line">        //        &quot;&lt;/body&gt;&quot;;</div><div class="line">        //Email email = new Email();</div><div class="line">        //    email.setUsername(&quot;13202405189@163.com&quot;);</div><div class="line">        //    email.setAuthorizationCode(&quot;sendemail123&quot;);</div><div class="line">        //    email.setRecipients(&quot;526097449@qq.com&quot;);</div><div class="line">        //    email.setSubject(&quot;第一篇&quot;);</div><div class="line">        //    email.setContent(contentHTML);</div><div class="line"></div><div class="line">        //Email email = new Email();</div><div class="line">        //    email.setUsername(&quot;526097449@qq.com&quot;);</div><div class="line">        //    email.setAuthorizationCode(&quot;qq邮箱授权码&quot;);</div><div class="line">        //    email.setRecipients(&quot;13202405189@163.com&quot;);</div><div class="line">        //    email.setSubject(&quot;第一篇&quot;);</div><div class="line">        //    email.setText(&quot;123456&quot;);</div><div class="line">        //</div><div class="line">        //Email email = new Email();</div><div class="line">        //email.setUsername(&quot;liushuwei0925@gmail.com&quot;);</div><div class="line">        //email.setAuthorizationCode(&quot;谷歌邮箱密码&quot;);</div><div class="line">        //email.setRecipients(&quot;13202405189@163.com&quot;);</div><div class="line">        //email.setSubject(&quot;第二篇&quot;);</div><div class="line">        //email.setText(&quot;asdfasdf&quot;);</div><div class="line">        //</div><div class="line">        //Email email = new Email();</div><div class="line">        //email.setUsername(&quot;robot@liushuwei.cn&quot;);</div><div class="line">        //email.setPensonalName(&quot;博客机器人&quot;);</div><div class="line">        //email.setAuthorizationCode(&quot;密码&quot;);</div><div class="line">        //email.setRecipients(&quot;526097449@qq.com&quot;);</div><div class="line">        //email.setSubject(&quot;第二篇&quot;);</div><div class="line">        //email.setText(&quot;asdfasdf&quot;);</div><div class="line">        //SendEmail sendEmail  = new SendEmail();</div><div class="line">        //sendEmail.GO(email);</div><div class="line">    //&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="-7"><a href="#-7" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="12-GUI开发"><a href="#12-GUI开发" class="headerlink" title="12.GUI开发"></a>12.GUI开发</h2><p>&emsp;学习使用java开发GUI,目前是为了BatchCreate_file4.0开发UI界面</p>
<p>成熟的框架</p>
<ol>
<li>Swing</li>
<li>SWT</li>
<li>JFace</li>
<li>Flex</li>
<li>Eclipse RCP<br><br></li>
</ol>
<p>资源</p>
<ul>
<li><a href="http://www.blogjava.net/jerry-zhaoj/articles/283170.html" target="_blank" rel="external">swing入门教程</a></li>
<li><a href="http://www.yiibai.com/swing/home.html" target="_blank" rel="external">易百-Swing教程</a></li>
<li><a href="http://www.cnblogs.com/HJL085/p/5905427.html" target="_blank" rel="external">http://www.cnblogs.com/HJL085/p/5905427.html</a></li>
<li><a href="http://blog.csdn.net/zhao50632/article/details/20999173" target="_blank" rel="external">Java Swing中弹出对话框的几种方式</a></li>
<li><a href="http://www.cnblogs.com/happyPawpaw/archive/2013/03/27/2984750.html" target="_blank" rel="external">JProgressBar的用法-大牛的思路，有点6</a></li>
<li><a href="http://www.apihome.cn/api/java/JProgressBar.html" target="_blank" rel="external">JProgressBar的api中文版</a></li>
<li><a href="http://847353020-qq-com.iteye.com/blog/954532" target="_blank" rel="external">JOptionPane类提示框的一些常用的方法</a><br><br></li>
</ul>
<p>获取鼠标位于屏幕坐标的小工具【2017.1.2】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/*</div><div class="line"> * UI组件</div><div class="line"> *      JComboBox【组合框】</div><div class="line"> *      JPasswordFeid【密码文本】</div><div class="line"> *      JCheckBox【多选-可随意取消】  JRadioButton【单选-唯一和强制必选一】</div><div class="line"> *      JMenu，JMenuItem【选中时出发】,JMenuBar【菜单系统的基础】</div><div class="line">*       JSlider【提供文本字段，允许用户输入值,可视化形式获取当前选择的反馈，还能设置接收的值的范围】</div><div class="line">*       JSpinner【与JSlider类似，允许用户在任意组的值(日期,名称,颜色，任何事)进行选择】</div><div class="line">*       JToolBar【调色板(充当其他组件)】</div><div class="line">*       JToolTip【将鼠标停留在某个位置上面，弹出小&quot;泡泡&quot;提示】</div><div class="line">*       JOptionPane【为开发人员提供了获取和接收简易消息的方法类似&quot;快捷方式&quot;】</div><div class="line">*       JTextArea【支持多行文本(JTextField局限在在一行文本)】</div><div class="line">*       JScrollPane【提供处理所有与滚动跳相关的动作(一旦添加它，就会自动处理每件事，包括在需要的时候隐藏/显示滚动条)】</div><div class="line">*       JList【向用户呈现许多选择(在一列中显示数据)】</div><div class="line">*       JTabel【类似Excel工作表(在多列中显示数据)】</div><div class="line">*       JTree【数据采用树结构形式,要求数据模型】</div><div class="line">*  </div><div class="line">*  布局</div><div class="line">*       FlowLayout【流动布局，从左到右安排组件，空间不足，移动到下一行】</div><div class="line">*       GridLayout【网格布局,指定行列，把组件放进单元格】</div><div class="line">*       BorderLayout【边界布局，东南西北中的概念在屏幕上放置组件】</div><div class="line">*       GrodBagLayout【更高级的布局管理器 】</div><div class="line">*  </div><div class="line">*  模型</div><div class="line">*           Collection【Java集合，用于处理数据】</div><div class="line">*  </div><div class="line">*  事件</div><div class="line">*       登记监听器【listener实现listener接口】</div><div class="line">*       事件</div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line">package mouse;</div><div class="line"></div><div class="line">import java.awt.Color;</div><div class="line">import java.awt.Font;</div><div class="line">import java.awt.Insets;</div><div class="line">import java.awt.Point;</div><div class="line">import java.awt.PointerInfo;</div><div class="line">import java.awt.event.ActionEvent;</div><div class="line">import java.awt.event.ActionListener;</div><div class="line">import java.awt.event.MouseEvent;</div><div class="line">import java.awt.event.MouseMotionListener;</div><div class="line">import java.util.Timer;</div><div class="line">import java.util.TimerTask;</div><div class="line"></div><div class="line">import javax.swing.ImageIcon;</div><div class="line">import javax.swing.JButton;</div><div class="line">import javax.swing.JFrame;</div><div class="line">import javax.swing.JLabel;</div><div class="line">import javax.swing.JPanel;</div><div class="line">import javax.swing.plaf.basic.BasicButtonUI;</div><div class="line"></div><div class="line">/**更新时间： 2017年1月2日   </div><div class="line"> *      小工具</div><div class="line"> *          实时获取鼠标在屏幕的XY坐标</div><div class="line"> *</div><div class="line"> *  @author Suvan</div><div class="line"> */</div><div class="line">public class GetScreen_XY extends JFrame implements MouseMotionListener&#123;</div><div class="line">    </div><div class="line">    private  JLabel X_label;        //固定标签</div><div class="line">    private  JLabel Y_label;        //固定标签</div><div class="line">    </div><div class="line">    private JLabel X;           </div><div class="line">    private JLabel Y;                   </div><div class="line">    </div><div class="line">    private JPanel panel;           //背景面板</div><div class="line">    private JButton button;     //关闭按钮</div><div class="line">    </div><div class="line">    //无参构造方法</div><div class="line">    public GetScreen_XY ()&#123;</div><div class="line">        super();</div><div class="line">        </div><div class="line">        //A-设置窗体</div><div class="line">        this.getContentPane().setLayout(null);</div><div class="line">        this.setSize(200,150);  </div><div class="line">        this.setUndecorated(true);          //去除最外面边框【所有】</div><div class="line">        this.setOpacity(1.0f);                  //设置窗体透明度</div><div class="line">        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    //关闭窗体,则退出程序结束进程</div><div class="line">        </div><div class="line">        //B-初始化组件</div><div class="line">        load();</div><div class="line">        </div><div class="line">        //C-注册鼠标移动事件</div><div class="line">        addMouseMotionListener(this);//注册鼠标移动事件</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法1：初始化，构造组件</div><div class="line">    private void load()&#123;</div><div class="line">        //A-面板</div><div class="line">        if(panel==null)&#123;        </div><div class="line">            panel =new JPanel();</div><div class="line">            panel.setLayout(null);</div><div class="line">            panel.setSize(200, 150);</div><div class="line">            panel.setBackground(Color.WHITE);</div><div class="line">        &#125;</div><div class="line">        this.add(panel);</div><div class="line">        </div><div class="line">        //B-关闭按钮</div><div class="line">        if(button==null)&#123;</div><div class="line">            button = new JButton();</div><div class="line">            button.setBounds(170, 0, 30, 30);  </div><div class="line">            button.setUI(new BasicButtonUI());                                  //恢复基本的视觉效果</div><div class="line">            button.setMargin(new Insets(0, 0, 0, 0));                               // 按钮内容与边框举例【上-左-下-右】</div><div class="line">            button.setIcon(new ImageIcon(&quot;img/closeButton.png&quot;));</div><div class="line">            button.setContentAreaFilled(false);                                     //不绘制按钮区域</div><div class="line">            button.setBorderPainted(false);                                         //不绘制边框</div><div class="line">            button.setBackground(Color.white);                                  //设置背景色</div><div class="line">        &#125;</div><div class="line">        button.addActionListener(new ActionListener()&#123;</div><div class="line">            public void actionPerformed(ActionEvent e)&#123;</div><div class="line">                System.exit(0); //终止正在运行的Java虚拟机【Sstem.exit(status)不管status(退出状态)为何值都会退出程序 】</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        panel.add(button);</div><div class="line">        </div><div class="line">        //C-显示X,Y坐标</div><div class="line">        Font font = new Font(&quot;幼圆&quot;,Font.PLAIN,20);   //字体，字样，大小</div><div class="line">        Font font2=new Font(&quot;幼圆&quot;,Font.BOLD,30);</div><div class="line">        if(X_label==null)&#123;</div><div class="line">            X_label=new JLabel();</div><div class="line">            X_label.setText(&quot;X坐标&quot;);</div><div class="line">            X_label.setFont(font);</div><div class="line">            X_label.setBounds(15, 40, 80, 20);//设置位置</div><div class="line">        &#125;</div><div class="line">        if(Y_label==null)&#123;</div><div class="line">            Y_label=new JLabel();</div><div class="line">            Y_label.setText(&quot;Y坐标&quot;);</div><div class="line">            Y_label.setFont(font);</div><div class="line">            Y_label.setBounds(110,40,80, 20);</div><div class="line">        &#125;</div><div class="line">        if(X==null)&#123;</div><div class="line">            X = new JLabel();</div><div class="line">            X.setFont(font2);</div><div class="line">            X.setForeground(Color.RED); //设置字体颜色</div><div class="line">            X.setBounds(15, 70, 80, 20);</div><div class="line">        &#125;</div><div class="line">        if(Y==null)&#123;</div><div class="line">            Y = new JLabel();</div><div class="line">            Y.setFont(font2);</div><div class="line">            Y.setForeground(Color.RED);</div><div class="line">            Y.setBounds(110, 70, 80, 20);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //将各个组件添加进面板</div><div class="line">        panel.add(X_label);         panel.add(Y_label);</div><div class="line">        panel.add(X);               panel.add(Y);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void mouseDragged(MouseEvent e) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void mouseMoved(MouseEvent e) &#123;</div><div class="line">            PointerInfo pi =java.awt.MouseInfo.getPointerInfo(); //可获取系统鼠标的屏幕坐标</div><div class="line">            Point p = pi.getLocation();</div><div class="line">//          System.out.println(&quot;X坐标-&quot;+p.x+&quot;-------Y坐标:&quot;+p.y);</div><div class="line">//          X.setText(p.x+&quot;&quot;);</div><div class="line">//          Y.setText(p.y+&quot;&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //测试主方法</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        </div><div class="line">        GetScreen_XY u = new GetScreen_XY();</div><div class="line">        u.setVisible(true);</div><div class="line">        </div><div class="line">        //定时器</div><div class="line">        Timer timer = new Timer();</div><div class="line">        timer.schedule(new TimerTask()&#123;</div><div class="line">            public void run()&#123;</div><div class="line">                //获取鼠标在系统屏幕的坐标</div><div class="line">                Point point =java.awt.MouseInfo.getPointerInfo().getLocation();</div><div class="line">                u.X.setText(point.x+&quot;&quot;);</div><div class="line">                u.Y.setText(point.y+&quot;&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;,10,20);//10毫秒后开始，然后固定重复20毫秒执行一次</div><div class="line">    </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="-8"><a href="#-8" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="13-自动化操作【模拟键盘和鼠标】"><a href="#13-自动化操作【模拟键盘和鼠标】" class="headerlink" title="13.自动化操作【模拟键盘和鼠标】"></a>13.自动化操作【模拟键盘和鼠标】</h2><p>&emsp;突发奇想，能否用用java实现模拟用户点击来操作《QQ三国》游戏的任务，实现自动刷怪[暂时未实现,QQSG无法响应]</p>
<p>参考资料:</p>
<ul>
<li><a href="http://www.apihome.cn/api/java/Robot.html" target="_blank" rel="external">中文API</a></li>
<li><a href="http://blog.csdn.net/scholar_man/article/details/48035251" target="_blank" rel="external">java Robot 类模拟键盘按键和鼠标点击（全局模拟） </a></li>
<li><a href="http://blog.chinaunix.net/uid-25063573-id-2420369.html" target="_blank" rel="external">键盘常用ASCII码 &amp; Ctrl组合键</a></li>
<li><a href="http://blog.csdn.net/changqing5818/article/details/49471227" target="_blank" rel="external">java.awt.event.KeyEvent(键盘按键对应的KeyCode)</a></li>
</ul>
<p>扩展框架</p>
<ul>
<li><a href="http://download.csdn.net/detail/ysjian_pingcx/6510391" target="_blank" rel="external">SWT WIN32 Extension扩展包下载</a></li>
<li><a href="http://blog.csdn.net/linzhanggeorge/article/details/4419860" target="_blank" rel="external">Java 实现全局（全操作系统）的键盘鼠标模拟 </a></li>
<li><a href="http://blog.csdn.net/qiantujava/article/details/10060847" target="_blank" rel="external">Java JFrame实现无边框无标题</a></li>
<li><a href="http://blog.csdn.net/code_better/article/details/53505962" target="_blank" rel="external">java实现获取鼠标在屏幕上的坐标</a></li>
<li><a href="http://download.csdn.net/detail/a491857321/9531473" target="_blank" rel="external">jNative.jar包下载</a><br><br></li>
</ul>
<p>案例目录</p>
<ol>
<li>自动启动qq,网易云和eclipse【2016.12.29】</li>
<li>自动编写HelloWorld【2017.1.6】</li>
<li>java版拜年(新年快乐！)【2017.1.26】</li>
</ol>
<p><1>自动启动qq,网易云和eclipse【2016.12.29】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div></pre></td><td class="code"><pre><div class="line">import java.awt.Dimension;</div><div class="line">import java.awt.Robot;</div><div class="line">import java.awt.Toolkit;</div><div class="line">import java.awt.event.InputEvent;</div><div class="line">import java.awt.event.KeyEvent;</div><div class="line"></div><div class="line">public class startWork1 &#123;</div><div class="line">        private static Robot r; </div><div class="line">        </div><div class="line">        //静态块赋初始值</div><div class="line">        static&#123;</div><div class="line">            try&#123;</div><div class="line">                r=new Robot();</div><div class="line">            &#125;catch(Exception e)&#123;&#125;;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //流程1：开启qq</div><div class="line">        public static void startQQ()&#123;</div><div class="line">            </div><div class="line">            //1秒后开始</div><div class="line">            r.delay(1000);</div><div class="line">            returnDesktop();//回到桌面</div><div class="line"></div><div class="line">            System.out.println(&quot;组合键:window+R......&quot;);</div><div class="line">            r.keyPress(KeyEvent.VK_WINDOWS);            </div><div class="line">            r.keyPress(KeyEvent.VK_R); </div><div class="line">            r.keyRelease(KeyEvent.VK_WINDOWS);</div><div class="line">            r.keyRelease(KeyEvent.VK_R);            </div><div class="line">            //启动QQ</div><div class="line">            key(KeyEvent.VK_DELETE);    //删除键</div><div class="line">            key(KeyEvent.VK_Q);</div><div class="line">            key(KeyEvent.VK_Q);</div><div class="line">            key(KeyEvent.VK_ENTER);</div><div class="line">            key(KeyEvent.VK_ENTER); //敲两次回车，防止输入法</div><div class="line">            </div><div class="line">            //等待2s后，回车登录</div><div class="line">            r.delay(2000);          </div><div class="line">            key(KeyEvent.VK_ENTER);</div><div class="line">            </div><div class="line">            System.out.println(&quot;***************QQ启动完毕***************&quot;);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //流程2:开启网易云</div><div class="line">        private static void startCloudmusic()&#123;          </div><div class="line">            //5秒后开始操作(等QQ登后)</div><div class="line">            r.delay(5000);</div><div class="line">            </div><div class="line">            //【组合】window+R键         System.out.println(&quot;组合键:window+R......&quot;);</div><div class="line">            r.keyPress(KeyEvent.VK_WINDOWS);            </div><div class="line">            r.keyPress(KeyEvent.VK_R); </div><div class="line">            r.keyRelease(KeyEvent.VK_WINDOWS);</div><div class="line">            r.keyRelease(KeyEvent.VK_R);</div><div class="line">            </div><div class="line">            //启动网易云音乐</div><div class="line">            System.out.println(&quot;输入cloudmusic,按回车......&quot;);</div><div class="line">            key(KeyEvent.VK_DELETE);</div><div class="line">            int [] keys=&#123;KeyEvent.VK_C,KeyEvent.VK_L,KeyEvent.VK_O,KeyEvent.VK_U,KeyEvent.VK_D,KeyEvent.VK_M,KeyEvent.VK_U,KeyEvent.VK_S,KeyEvent.VK_I,KeyEvent.VK_C&#125;;</div><div class="line">            keys(keys);//连续输入cloudmusic</div><div class="line">            key(KeyEvent.VK_ENTER);         </div><div class="line">            key(KeyEvent.VK_ENTER);         //回车两次</div><div class="line">            r.delay(2000);//等待2秒启动易云</div><div class="line">            </div><div class="line">            //点击发现音乐</div><div class="line">            System.out.println(&quot;左边栏发现音乐......&quot;);</div><div class="line">            r.mouseMove(546,295);</div><div class="line">            mouse(InputEvent.BUTTON1_MASK);</div><div class="line">            r.delay(500);</div><div class="line">            </div><div class="line">            //点击每日歌曲推荐</div><div class="line">            System.out.println(&quot;每日歌曲推荐......&quot;);</div><div class="line">            r.mouseMove(700, 630);</div><div class="line">            mouse(InputEvent.BUTTON1_MASK);</div><div class="line">            r.delay(500);</div><div class="line">            </div><div class="line">            //点击播放全部</div><div class="line">            System.out.println(&quot;播放全部......&quot;);</div><div class="line">            r.mouseMove(700,415);</div><div class="line">            mouse(InputEvent.BUTTON1_MASK);</div><div class="line">            r.delay(500);</div><div class="line">            </div><div class="line">            //最小化               </div><div class="line">            r.mouseMove(1401,230);</div><div class="line">            mouse(InputEvent.BUTTON1_MASK);</div><div class="line">            r.delay(200);       </div><div class="line">            System.out.println(&quot;***************网易云音乐启动完毕***************&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //流程3：开启eclipse</div><div class="line">        private static void startEclipse()&#123;</div><div class="line">            //获取屏幕分辨率</div><div class="line">            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();</div><div class="line">            System.out.println(&quot;当前屏幕分辨率: &quot;+d);</div><div class="line">            </div><div class="line">            //2秒后开始操作</div><div class="line">            r.delay(2000);</div><div class="line">            </div><div class="line">            //【组合】window+R键</div><div class="line">            System.out.println(&quot;组合键:window+R......&quot;);</div><div class="line">            r.keyPress(KeyEvent.VK_WINDOWS); </div><div class="line">            r.keyPress(KeyEvent.VK_R); </div><div class="line">            r.keyRelease(KeyEvent.VK_WINDOWS);</div><div class="line">            r.keyRelease(KeyEvent.VK_R);</div><div class="line">            </div><div class="line">            //输入ec，然后回车</div><div class="line">            System.out.println(&quot;输入ec,按回车......&quot;);</div><div class="line">            key(KeyEvent.VK_DELETE);</div><div class="line">            key(KeyEvent.VK_E);</div><div class="line">            key(KeyEvent.VK_C);</div><div class="line">            key(KeyEvent.VK_ENTER);</div><div class="line">            key(KeyEvent.VK_ENTER);</div><div class="line">            r.delay(3000);//等待3秒加载eclise开头动画</div><div class="line">            </div><div class="line">            //移动到选择下拉框</div><div class="line">             System.out.println(&quot;鼠标移动到下拉框......&quot;);</div><div class="line">             r.mouseMove(1119,441); </div><div class="line">             mouse(InputEvent.BUTTON1_MASK);                 </div><div class="line">             r.delay(100);</div><div class="line">             </div><div class="line">           //移动到【E:\javaweb_WorkSpace】工作站选项</div><div class="line">             System.out.println(&quot;选择javaweb_WokSpace工作站......&quot;);</div><div class="line">             r.mouseMove(1119,480);     //移动到【E:\javaweb_WorkSpace】工作站选项</div><div class="line">             mouse(InputEvent.BUTTON1_MASK);</div><div class="line">               </div><div class="line">            //移动到确定，开启eclipse</div><div class="line">             System.out.println(&quot;点击确定,开启eclipse......&quot;);</div><div class="line">            r.mouseMove(1121,620);</div><div class="line">            mouse(InputEvent.BUTTON1_MASK);</div><div class="line">            </div><div class="line">            System.out.println(&quot;等待。。。&quot;);</div><div class="line">            //开启eclise,7秒启动</div><div class="line">            r.delay(7000);</div><div class="line"></div><div class="line">            //【全屏操作】</div><div class="line">            System.out.println(&quot;eclipse全屏......&quot;);</div><div class="line">            MAX_SHOW();</div><div class="line">            System.out.println(&quot;***************Eclipse启动完毕***************&quot;);</div><div class="line">            </div><div class="line">            </div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //工具1：键盘输入</div><div class="line">        public static void key(int keyValue)&#123;</div><div class="line">            r.keyPress(keyValue); </div><div class="line">            r.keyRelease(keyValue);</div><div class="line">            r.delay(300);</div><div class="line">        &#125;</div><div class="line">        //工具1-2：键盘连续输入</div><div class="line">        public static void keys(int [] keysValue)&#123;</div><div class="line">            for(int i=0;i&lt;keysValue.length;i++)&#123;</div><div class="line">                r.keyPress(keysValue[i]); </div><div class="line">                r.keyRelease(keysValue[i]);</div><div class="line">                r.delay(200);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //工具2：鼠标点击 </div><div class="line">        public static void mouse(int mouseValue)&#123;</div><div class="line">            r.mousePress(mouseValue);</div><div class="line">            r.mouseRelease(mouseValue);</div><div class="line">            r.delay(500);</div><div class="line">        &#125;       </div><div class="line">        //工具3：最大化</div><div class="line">        public static void MAX_SHOW()&#123;</div><div class="line">            r.keyPress(KeyEvent.VK_ALT); </div><div class="line">            r.keyPress(KeyEvent.VK_SPACE); </div><div class="line">            r.keyRelease(KeyEvent.VK_ALT);</div><div class="line">            r.keyRelease(KeyEvent.VK_SPACE);            r.delay(500);</div><div class="line">            key(KeyEvent.VK_X);</div><div class="line">        &#125;</div><div class="line">        //工具4：回到桌面</div><div class="line">        public static void returnDesktop()&#123;</div><div class="line">            //组合键WIN+D回到桌面</div><div class="line">            r.keyPress(KeyEvent.VK_WINDOWS);            </div><div class="line">            r.keyPress(KeyEvent.VK_D); </div><div class="line">            r.keyRelease(KeyEvent.VK_WINDOWS);</div><div class="line">            r.keyRelease(KeyEvent.VK_D);    </div><div class="line">            r.delay(500);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">    </div><div class="line">        </div><div class="line">        public static void main(String []args)&#123;</div><div class="line">            try&#123;</div><div class="line">                startQQ();</div><div class="line">                startCloudmusic();  </div><div class="line">                startEclipse();</div><div class="line">            &#125;catch(Exception e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></1></p>
<hr>
<p><br></p>
<p><2>自动编写HelloWorld【2017.1.2】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div></pre></td><td class="code"><pre><div class="line">package start;</div><div class="line"></div><div class="line">import java.awt.AWTException;</div><div class="line">import java.awt.MouseInfo;</div><div class="line">import java.awt.Point;</div><div class="line">import java.awt.PointerInfo;</div><div class="line">import java.awt.Robot;</div><div class="line">import java.awt.event.InputEvent;</div><div class="line">import java.awt.event.KeyEvent;</div><div class="line"></div><div class="line">/**更新时间： 2017年1月26日   </div><div class="line"> *					机器人编写Hello World!</div><div class="line"> *</div><div class="line"> *  @author Suvan</div><div class="line"> */</div><div class="line">public class HelloWorld &#123;</div><div class="line">	private static Robot r;	</div><div class="line">	private  int X;	//X和Y的坐标</div><div class="line">	private  int Y;</div><div class="line">	//静态块赋初始值</div><div class="line">	static&#123;</div><div class="line">		try&#123;</div><div class="line">			r=new Robot();</div><div class="line">		&#125;catch(Exception e)&#123;&#125;;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//无参构造方法</div><div class="line">	public HelloWorld()&#123;</div><div class="line">		//获取鼠标当前坐标</div><div class="line">		PointerInfo pi =MouseInfo.getPointerInfo();</div><div class="line">		Point p =pi.getLocation();</div><div class="line">		this.X=p.x;</div><div class="line">		this.Y=p.y;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//方法1：编写HelloWorld</div><div class="line">	public  void helloWorld_GO() throws AWTException&#123;</div><div class="line">		r.delay(2000); //2s后开始教程</div><div class="line">		</div><div class="line">		//A-组合键win+D</div><div class="line">		keyCombine(KeyEvent.VK_WINDOWS,KeyEvent.VK_D);</div><div class="line">		</div><div class="line">		//B-在桌面移动鼠标，新建文档</div><div class="line">		mouseMove(1117,396);</div><div class="line">		mouse(InputEvent.BUTTON3_DOWN_MASK);	//单击右键</div><div class="line">		key(KeyEvent.VK_W); 							//&apos;W&apos;新建快捷键</div><div class="line">		for(int i=0;i&lt;20;i++)&#123;							//移动方向键，往下</div><div class="line">			key(KeyEvent.VK_DOWN); 				</div><div class="line">		&#125;</div><div class="line">		key(KeyEvent.VK_ENTER); 					//回车</div><div class="line">		String fileName=&quot;HelloWorld&quot;;				</div><div class="line">		keysInput(fileName)	;							//连续输入文件名</div><div class="line">		key(KeyEvent.VK_ENTER); 					//回车</div><div class="line">		</div><div class="line">//</div><div class="line">		//C-打开文档编写代码</div><div class="line">		mouseMove(1089,457);</div><div class="line">		mouse(InputEvent.BUTTON1_MASK);	</div><div class="line">		mouse(InputEvent.BUTTON1_MASK);	//双击</div><div class="line">			r.delay(1000);										//延迟1秒打开文件</div><div class="line">			//public class HelloWorld&#123;</div><div class="line">			key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">			</div><div class="line">			String value1=&quot;public class HelloWorld&quot;;</div><div class="line">			keysInput(value1);</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_OPEN_BRACKET);//  &#123; 【Sulime Test 3会自动补齐&#123;&#125;()】</div><div class="line">			key(KeyEvent.VK_ENTER);//换行</div><div class="line">			</div><div class="line">			//public static void main(String [] args)&#123;</div><div class="line">			key(KeyEvent.VK_TAB);														//TAB</div><div class="line">	 		value1=&quot;public static void main&quot;;</div><div class="line">			keysInput(value1);</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_9);					//  (</div><div class="line">			value1=&quot;String &quot;;</div><div class="line">			keysInput(value1);</div><div class="line">			key(KeyEvent.VK_OPEN_BRACKET); 										//  [</div><div class="line">			key(KeyEvent.VK_CLOSE_BRACKET); 										// ]</div><div class="line">			value1=&quot; args&quot;;</div><div class="line">			keysInput(value1);</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_0);//  )</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_OPEN_BRACKET);//  &#123; </div><div class="line">			key(KeyEvent.VK_ENTER);														//换行</div><div class="line">			</div><div class="line">			//System.out.println(&quot;Hello World!&quot;);</div><div class="line">			key(KeyEvent.VK_TAB);															//开头空格Tab键</div><div class="line">			key(KeyEvent.VK_TAB);</div><div class="line">			value1=&quot;System&quot;; </div><div class="line">			keysInput(value1);</div><div class="line">			key(KeyEvent.VK_PERIOD);														// .</div><div class="line">			value1=&quot;out&quot;; </div><div class="line">			keysInput(value1);</div><div class="line">			key(KeyEvent.VK_PERIOD);														// .</div><div class="line">			value1=&quot;println&quot;; </div><div class="line">			keysInput(value1);</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_9);					//  (</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_QUOTE);		//	&quot;</div><div class="line">			value1=&quot;Hello Wrold&quot;; </div><div class="line">			keysInput(value1); </div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_1);</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_QUOTE);		//	&quot;</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_0);					//  )</div><div class="line">			key(KeyEvent.VK_SEMICOLON); 											 	//;</div><div class="line">			key(KeyEvent.VK_ENTER);														//换行</div><div class="line">	</div><div class="line">			//&#125;</div><div class="line">			key(KeyEvent.VK_TAB);															// TAB</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_CLOSE_BRACKET);//  &#123; </div><div class="line">			key(KeyEvent.VK_ENTER);														//换行</div><div class="line">			</div><div class="line">			//&#125;</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_CLOSE_BRACKET);//  &#123; </div><div class="line">		</div><div class="line">		//D-保存</div><div class="line">		r.delay(100);</div><div class="line">		keyCombine(KeyEvent.VK_CONTROL, KeyEvent.VK_S); 			    //Ctrl+	S保存</div><div class="line">		keyCombine(KeyEvent.VK_ALT,KeyEvent.VK_SPACE);			    //Alt+空格</div><div class="line">		key(KeyEvent.VK_C);																    //&apos;C&apos;-快捷键，关闭文档</div><div class="line"></div><div class="line"></div><div class="line">		//E-移动到一旁，开启命令行，修改文件名，编译java文件，切执行</div><div class="line">		mouseMove(1500,500);</div><div class="line">		mouse(InputEvent.BUTTON1_MASK);							//左键单击</div><div class="line">		mouse(InputEvent.BUTTON1_MASK);							//左键单击</div><div class="line">		mouse(InputEvent.BUTTON1_MASK);							//左键单击</div><div class="line">		mouseShift(InputEvent.BUTTON3_DOWN_MASK);		//按住Shirt键，单机右键</div><div class="line">		key(KeyEvent.VK_W);														//&apos;W&apos;-快捷键【在此处打开命令窗口】</div><div class="line">		key(KeyEvent.VK_ENTER);												//回车</div><div class="line">		</div><div class="line">		r.delay(500);																		  //修改文件名</div><div class="line">		key(KeyEvent.VK_SHIFT);  												  //Shirt键，切换输入法</div><div class="line">		String inputValue =&quot;ren HelloWorld.txt HelloWorld.java&quot;;//修改文件名</div><div class="line">		keysInput(inputValue);</div><div class="line">		key(KeyEvent.VK_ENTER);												 //回车</div><div class="line"></div><div class="line">		</div><div class="line">		r.delay(500);																		//延迟500ms</div><div class="line">	    inputValue =&quot;javac HelloWorld.java&quot;;							    //编译java文件</div><div class="line">		keysInput(inputValue);</div><div class="line">		key(KeyEvent.VK_ENTER);											   //回车</div><div class="line">		</div><div class="line">		r.delay(2000);																	</div><div class="line">		inputValue =&quot;java HelloWorld&quot;;										//执行编译文件</div><div class="line">		keysInput(inputValue);</div><div class="line">		key(KeyEvent.VK_ENTER);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//工具1：鼠标点击</div><div class="line">	private  void mouse(int mouseValue)&#123;</div><div class="line">		r.mousePress(mouseValue);</div><div class="line">		r.delay(10);</div><div class="line">		r.mouseRelease(mouseValue);</div><div class="line">		r.delay(30);</div><div class="line">	&#125;</div><div class="line">	//工具2：键盘敲打</div><div class="line">	private void key(int keyValue)&#123;</div><div class="line">		r.keyPress(keyValue); </div><div class="line">		r.delay(5);					//	按下和抬起之间有间隔</div><div class="line">		r.keyRelease(keyValue);</div><div class="line">		r.delay(30);</div><div class="line">	&#125;</div><div class="line">	//工具3：组合键</div><div class="line">	private void keyCombine(int keyValue1,int keyValue2)&#123;</div><div class="line">		r.keyPress(keyValue1);</div><div class="line">		r.keyPress(keyValue2);</div><div class="line">		r.delay(5);</div><div class="line">		r.keyRelease(keyValue1);</div><div class="line">		r.keyRelease(keyValue2);	</div><div class="line">		r.delay(30);</div><div class="line">	&#125;</div><div class="line">	//工具4：鼠标移动到目标位置</div><div class="line">	private void mouseMove(int goX,int goY)&#123;</div><div class="line">		String signX=goX &gt; X ? &quot;+&quot; : &quot;-&quot;;</div><div class="line">		String signY=goY &gt; Y ?  &quot;+&quot; : &quot;-&quot;;</div><div class="line"></div><div class="line">		while(X!=goX || Y!=goY)&#123;</div><div class="line">			if(X!=goX)&#123;</div><div class="line">				if(&quot;+&quot;.equals(signX)) r.mouseMove(++X,Y);</div><div class="line">				else if(&quot;-&quot;.equals(signX)) r.mouseMove(--X, Y);</div><div class="line">			&#125;</div><div class="line">			if(Y!=goY)&#123;</div><div class="line">				if(&quot;+&quot;.equals(signY)) r.mouseMove(X,++Y);</div><div class="line">				else if(&quot;-&quot;.equals(signY)) r.mouseMove(X, --Y);</div><div class="line">			&#125;</div><div class="line">			r.delay(1);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//工具5：键盘连续输入</div><div class="line">	private void keysInput(String value)&#123;</div><div class="line">		char [] arrayC =value.toUpperCase().toCharArray(); 	//将字符串全部转换为大写，再转换为ASCII码</div><div class="line">		int [] arrayI = new int[arrayC.length];</div><div class="line">		for(int i=0;i&lt;arrayC.length;i++)&#123;</div><div class="line">			arrayI[i]=(int)arrayC[i];</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		//开始连续输入</div><div class="line">		</div><div class="line">		for(int i=0;i&lt;arrayI.length;i++)&#123;</div><div class="line">			//判断字符大小写,分别进行处理</div><div class="line">			if(65&lt;=(int)value.charAt(i) &amp; (int)value.charAt(i)&lt;=90)&#123;  //A-65,Z-90</div><div class="line">				keyCombine(KeyEvent.VK_SHIFT,arrayI[i]); //组合键Shift+字母键</div><div class="line">				continue;</div><div class="line">			&#125;</div><div class="line">			key(arrayI[i]);</div><div class="line">			r.delay(30);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//工具6：按住Shift键操作鼠标点击</div><div class="line">	private void mouseShift(int mouseValue)&#123;</div><div class="line">		r.keyPress(KeyEvent.VK_SHIFT);</div><div class="line">		r.delay(20);</div><div class="line">		r.mousePress(mouseValue);</div><div class="line">		r.delay(10);</div><div class="line">		r.mouseRelease(mouseValue);</div><div class="line">		r.delay(20);</div><div class="line">		r.keyRelease(KeyEvent.VK_SHIFT);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	public static void main(String []args)&#123;</div><div class="line">		HelloWorld  hw = new HelloWorld();</div><div class="line">		try&#123;</div><div class="line">			hw.helloWorld_GO();</div><div class="line">		&#125;catch(Exception e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></2></p>
<hr>
<p><br></p>
<p><3>java版拜年(新年快乐！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">package start;</div><div class="line"></div><div class="line">import java.awt.AWTException;</div><div class="line">import java.awt.MouseInfo;</div><div class="line">import java.awt.Point;</div><div class="line">import java.awt.PointerInfo;</div><div class="line">import java.awt.Robot;</div><div class="line">import java.awt.event.InputEvent;</div><div class="line">import java.awt.event.KeyEvent;</div><div class="line"></div><div class="line">/**更新时间： 2017年1月26日   </div><div class="line"> *					机器人编写Hello World!</div><div class="line"> *</div><div class="line"> *  @author Suvan </div><div class="line"> */</div><div class="line">public class 拜年 &#123;</div><div class="line">	private static Robot r;		</div><div class="line">	private  int X;	//X和Y的坐标</div><div class="line">	private  int Y;</div><div class="line">	//静态块赋初始值</div><div class="line">	static&#123;</div><div class="line">		try&#123;</div><div class="line">			r=new Robot();</div><div class="line">		&#125;catch(Exception e)&#123;&#125;;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//无参构造方法</div><div class="line">	public 拜年()&#123;</div><div class="line">		</div><div class="line">		//获取鼠标当前坐标</div><div class="line">		PointerInfo pi =MouseInfo.getPointerInfo();</div><div class="line">		Point p =pi.getLocation();</div><div class="line">		this.X=p.x;</div><div class="line">		this.Y=p.y;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//方法1：编写HelloWorld</div><div class="line">	public  void helloWorld_GO() throws AWTException&#123;</div><div class="line">		r.delay(2000); //2s后开始教程</div><div class="line">		</div><div class="line">		//A-组合键win+D</div><div class="line">		keyCombine(KeyEvent.VK_WINDOWS,KeyEvent.VK_D);</div><div class="line">		</div><div class="line">		//B-在桌面移动鼠标，新建文档</div><div class="line">		mouseMove(1117,396);</div><div class="line">		mouse(InputEvent.BUTTON3_DOWN_MASK);	//单击右键</div><div class="line">		key(KeyEvent.VK_W); 							//&apos;W&apos;新建快捷键</div><div class="line">		for(int i=0;i&lt;20;i++)&#123;							//移动方向键，往下</div><div class="line">			key(KeyEvent.VK_DOWN); 				</div><div class="line">		&#125;</div><div class="line">		key(KeyEvent.VK_ENTER); 					//回车</div><div class="line">		String fileName=&quot;xinniankuaile&quot;;				</div><div class="line">		keysInput(fileName)	;							//连续输入文件名</div><div class="line">		key(KeyEvent.VK_1);</div><div class="line">		key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">		key(KeyEvent.VK_ENTER); 					//回车</div><div class="line">		</div><div class="line">		</div><div class="line">		//C-打开文档编写代码</div><div class="line">		mouseMove(1142,441);</div><div class="line">		mouse(InputEvent.BUTTON1_MASK);	</div><div class="line">		mouse(InputEvent.BUTTON1_MASK);	//双击</div><div class="line">			r.delay(1000);										//延迟1秒打开文件</div><div class="line"></div><div class="line">			key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">			</div><div class="line">			String value1=&quot;public class &quot;;</div><div class="line">			keysInput(value1);</div><div class="line">			key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">			 value1=&quot;xinniankuaile&quot;;				</div><div class="line">			keysInput(fileName)	;							//连续输入文件名</div><div class="line">			key(KeyEvent.VK_1);</div><div class="line">			key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_OPEN_BRACKET);//  &#123; 【Sulime Test 3会自动补齐&#123;&#125;()】</div><div class="line">			key(KeyEvent.VK_ENTER);//换行</div><div class="line">			</div><div class="line">			//public static void main(String [] args)&#123;</div><div class="line">			key(KeyEvent.VK_TAB);														//TAB</div><div class="line">	 		value1=&quot;public static void main&quot;;</div><div class="line">			keysInput(value1);</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_9);					//  (</div><div class="line">			value1=&quot;String &quot;;</div><div class="line">			keysInput(value1);</div><div class="line">			key(KeyEvent.VK_OPEN_BRACKET); 										//  [</div><div class="line">			key(KeyEvent.VK_CLOSE_BRACKET); 										// ]</div><div class="line">			value1=&quot; args&quot;;</div><div class="line">			keysInput(value1);</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_0);//  )</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_OPEN_BRACKET);//  &#123; </div><div class="line">			key(KeyEvent.VK_ENTER);														//换行</div><div class="line">			</div><div class="line">			//System.out.println(&quot;Hello World!&quot;);</div><div class="line">			key(KeyEvent.VK_TAB);															//开头空格Tab键</div><div class="line">			key(KeyEvent.VK_TAB);</div><div class="line">			value1=&quot;System&quot;; </div><div class="line">			keysInput(value1);</div><div class="line">			key(KeyEvent.VK_PERIOD);														// .</div><div class="line">			value1=&quot;out&quot;; </div><div class="line">			keysInput(value1);</div><div class="line">			key(KeyEvent.VK_PERIOD);														// .</div><div class="line">			value1=&quot;println&quot;; </div><div class="line">			keysInput(value1);</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_9);					//  (</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_QUOTE);		//	&quot;</div><div class="line">			key(KeyEvent.VK_SHIFT);  			//Shirt键，切换输入法</div><div class="line">			value1=&quot;xinniankuaile&quot;;				</div><div class="line">			keysInput(value1)	;						</div><div class="line">			key(KeyEvent.VK_1);</div><div class="line">			key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_1);</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_QUOTE);		//	&quot;</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_0);					//  )</div><div class="line">			key(KeyEvent.VK_SEMICOLON); 											 	//;</div><div class="line">			key(KeyEvent.VK_ENTER);														//换行</div><div class="line">	</div><div class="line">			//&#125;</div><div class="line">			key(KeyEvent.VK_TAB);															// TAB</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_CLOSE_BRACKET);//  &#123; </div><div class="line">			key(KeyEvent.VK_ENTER);														//换行</div><div class="line">			</div><div class="line">			//&#125;</div><div class="line">			keyCombine(KeyEvent.VK_SHIFT, KeyEvent.VK_CLOSE_BRACKET);//  &#123; </div><div class="line"></div><div class="line">		//D-保存</div><div class="line">		r.delay(100);</div><div class="line">		keyCombine(KeyEvent.VK_CONTROL, KeyEvent.VK_S); 			    //Ctrl+	S保存</div><div class="line">		keyCombine(KeyEvent.VK_ALT,KeyEvent.VK_SPACE);			    //Alt+空格</div><div class="line">		key(KeyEvent.VK_C);																    //&apos;C&apos;-快捷键，关闭文档</div><div class="line"></div><div class="line"></div><div class="line">		//E-移动到一旁，开启命令行，修改文件名，编译java文件，切执行</div><div class="line">		mouseMove(1500,500);</div><div class="line">		mouse(InputEvent.BUTTON1_MASK);							//左键单击</div><div class="line">		mouse(InputEvent.BUTTON1_MASK);							//左键单击</div><div class="line">		mouse(InputEvent.BUTTON1_MASK);							//左键单击</div><div class="line">		mouseShift(InputEvent.BUTTON3_DOWN_MASK);		//按住Shirt键，单机右键</div><div class="line">		key(KeyEvent.VK_W);														//&apos;W&apos;-快捷键【在此处打开命令窗口】</div><div class="line">		key(KeyEvent.VK_ENTER);												//回车</div><div class="line">		</div><div class="line">		r.delay(100);																		  //修改文件名</div><div class="line">		key(KeyEvent.VK_SHIFT);  												  //Shirt键，切换输入法</div><div class="line">		String inputValue =&quot;ren &quot;;//修改文件名</div><div class="line">		keysInput(inputValue);</div><div class="line">		key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">		r.delay(50);</div><div class="line">		inputValue = &quot;xinniankuaile&quot;;</div><div class="line">		keysInput(inputValue);</div><div class="line">		key(KeyEvent.VK_1);</div><div class="line">		r.delay(10);</div><div class="line">		inputValue =&quot;.txt &quot;;</div><div class="line">		keysInput(inputValue);</div><div class="line">		key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">		r.delay(10);</div><div class="line">		inputValue =&quot;xinniankuaile&quot;;</div><div class="line">		keysInput(inputValue);</div><div class="line">		key(KeyEvent.VK_1);</div><div class="line">		key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">		r.delay(10);</div><div class="line">		inputValue = &quot;.java&quot;;</div><div class="line">		keysInput(inputValue);</div><div class="line">		key(KeyEvent.VK_ENTER);												 //回车</div><div class="line"></div><div class="line">		</div><div class="line">		r.delay(100);																		//延迟500ms</div><div class="line">	    inputValue =&quot;javac &quot;;							    //编译java文件</div><div class="line">	    keysInput(inputValue);</div><div class="line">	    key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">	    r.delay(10);</div><div class="line">		inputValue = &quot;xinniankuaile&quot;;</div><div class="line">		keysInput(inputValue);</div><div class="line">		key(KeyEvent.VK_1);</div><div class="line">		key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">		r.delay(10);</div><div class="line">	    inputValue =&quot;.java&quot;;							    //编译java文件</div><div class="line">	    keysInput(inputValue);</div><div class="line">		key(KeyEvent.VK_ENTER);											   //回车</div><div class="line">		</div><div class="line">		r.delay(300);																	</div><div class="line">		inputValue =&quot;java &quot;;										//执行编译文件</div><div class="line">		keysInput(inputValue); </div><div class="line">		   key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">		   r.delay(10);</div><div class="line">			inputValue = &quot;xinniankuaile&quot;;</div><div class="line">			keysInput(inputValue);</div><div class="line">			key(KeyEvent.VK_1);</div><div class="line">			key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">			r.delay(10);</div><div class="line">		key(KeyEvent.VK_ENTER);</div><div class="line">		</div><div class="line">		key(KeyEvent.VK_SHIFT);  					//Shirt键，切换输入法</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//工具1：鼠标点击</div><div class="line">	private  void mouse(int mouseValue)&#123;</div><div class="line">		r.mousePress(mouseValue);</div><div class="line">		r.delay(10);</div><div class="line">		r.mouseRelease(mouseValue);</div><div class="line">		r.delay(20);</div><div class="line">	&#125;</div><div class="line">	//工具2：键盘敲打</div><div class="line">	private void key(int keyValue)&#123;</div><div class="line">		r.keyPress(keyValue); </div><div class="line">		r.delay(5);					//	按下和抬起之间有间隔</div><div class="line">		r.keyRelease(keyValue);</div><div class="line">		r.delay(10);</div><div class="line">	&#125;</div><div class="line">	//工具3：组合键</div><div class="line">	private void keyCombine(int keyValue1,int keyValue2)&#123;</div><div class="line">		r.keyPress(keyValue1);</div><div class="line">		r.keyPress(keyValue2);</div><div class="line">		r.delay(5);</div><div class="line">		r.keyRelease(keyValue1);</div><div class="line">		r.keyRelease(keyValue2);	</div><div class="line">		r.delay(15);</div><div class="line">	&#125;</div><div class="line">	//工具4：鼠标移动到目标位置</div><div class="line">	private void mouseMove(int goX,int goY)&#123;</div><div class="line">		String signX=goX &gt; X ? &quot;+&quot; : &quot;-&quot;;</div><div class="line">		String signY=goY &gt; Y ?  &quot;+&quot; : &quot;-&quot;;</div><div class="line"></div><div class="line">		while(X!=goX || Y!=goY)&#123;</div><div class="line">			if(X!=goX)&#123;</div><div class="line">				if(&quot;+&quot;.equals(signX)) r.mouseMove(++X,Y);</div><div class="line">				else if(&quot;-&quot;.equals(signX)) r.mouseMove(--X, Y);</div><div class="line">			&#125;</div><div class="line">			if(Y!=goY)&#123;</div><div class="line">				if(&quot;+&quot;.equals(signY)) r.mouseMove(X,++Y);</div><div class="line">				else if(&quot;-&quot;.equals(signY)) r.mouseMove(X, --Y);</div><div class="line">			&#125;</div><div class="line">			r.delay(1);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//工具5：键盘连续输入</div><div class="line">	private void keysInput(String value)&#123;</div><div class="line">		char [] arrayC =value.toUpperCase().toCharArray(); 	//将字符串全部转换为大写，再转换为ASCII码</div><div class="line">		int [] arrayI = new int[arrayC.length];</div><div class="line">		for(int i=0;i&lt;arrayC.length;i++)&#123;</div><div class="line">			arrayI[i]=(int)arrayC[i];</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		//开始连续输入</div><div class="line">	</div><div class="line">		for(int i=0;i&lt;arrayI.length;i++)&#123;</div><div class="line">			//判断字符大小写,分别进行处理</div><div class="line">			if(65&lt;=(int)value.charAt(i) &amp; (int)value.charAt(i)&lt;=90)&#123;  //A-65,Z-90</div><div class="line">				keyCombine(KeyEvent.VK_SHIFT,arrayI[i]); //组合键Shift+字母键</div><div class="line">				continue;</div><div class="line">			&#125;</div><div class="line">			key(arrayI[i]);</div><div class="line">			r.delay(30);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//工具6：按住Shift键操作鼠标点击</div><div class="line">	private void mouseShift(int mouseValue)&#123;</div><div class="line">		r.keyPress(KeyEvent.VK_SHIFT);</div><div class="line">		r.delay(20);</div><div class="line">		r.mousePress(mouseValue);</div><div class="line">		r.delay(10);</div><div class="line">		r.mouseRelease(mouseValue);</div><div class="line">		r.delay(20);</div><div class="line">		r.keyRelease(KeyEvent.VK_SHIFT);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	public static void main(String []args)&#123;</div><div class="line">		拜年  hw = new 拜年();</div><div class="line">		try&#123;</div><div class="line">			hw.helloWorld_GO();</div><div class="line">		&#125;catch(Exception e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></3></p>
<h2 id="-9"><a href="#-9" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="14-JDBC连接数据库"><a href="#14-JDBC连接数据库" class="headerlink" title="14.JDBC连接数据库"></a>14.JDBC连接数据库</h2><p>&emsp;全称(java Data Base Connectivity ~ java数据库连接),连接数据库的桥梁,由java语言编写的类和接口组成,可以为多种数据库提供统一的访问,JDBC+DATABASE使Application与数据库分开,开发者只需关心内部逻辑的实现,不需注重数据库连接的具体实现<br><br></p>
<p>JDBC升级的替代产品</p>
<ul>
<li>Commons-dbutils【Apache组织提供的开源JDBC工具类库,对传统操作数据库类进行二次封装,可以把结果集转为List】</li>
<li>Hibermate【一种Java语言下的对象关系映射解决方案,轻量级ORM框架,提供缓存机制,提高效率,对大量数据进行频繁操作的话,性能效率低,不如直接使用JDBC】</li>
<li>MyBatis【是支持普通SQL查询,存储过程和高级映射的优秀持久层框架,sql卸载xml里,便于统一管理和优化,支持独享与数据库ORM字段关系映射,支持对象关系组建维护,支持编写动态sql】<br><br></li>
</ul>
<p>继承关系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Statement </div><div class="line">	1.PreparedStatement</div><div class="line">		(1)CollableStatement</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>JDBC的连接与使用</p>
<ul>
<li>加载驱动程序</li>
<li>数据库连接</li>
<li>Statement对象</li>
<li>PreparedStatement对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;加载驱动程序【须在项目中先Build指定数据库的驱动jar包】</div><div class="line">	Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</div><div class="line">	Class.forName(&quot;com.mysql.jdbc.Driver&quot;);//MySQL</div><div class="line">	Class.forName(&quot;roacle.jdbc.driver.OracleDriver&quot;);//Oracle</div><div class="line"></div><div class="line">&lt;2&gt;数据库连接</div><div class="line">	Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://127.0.0.1:3306/my_blog&quot;,&quot;root&quot;,&quot;123&quot;);   </div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;Statement对象【直接执行】</div><div class="line">         Statement st=conn.createStatement();</div><div class="line">         ResultSet rs = st.executeUpdate(&quot;select * from user&quot;);</div><div class="line"></div><div class="line">         while(rs.next())&#123;</div><div class="line">         	String name = rs.getString(&quot;user_name&quot;);//用户名</div><div class="line">         &#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;PreparedStatement对象【预编译】</div><div class="line">		 String sql = &quot;insert into user(user_name,user_age) values(?,?)&quot;;</div><div class="line">         PreparedStatement pst = conn.prepareStatement(sql);</div><div class="line">         pst.setString(1,&quot;用户名&quot;);</div><div class="line">         pst.setString(2,&quot;22岁&quot;)</div><div class="line">         pst.execute();</div><div class="line">         //Result rs = pst.executeQuery(); //查询语句,有返回结果集</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">扩展：</div><div class="line">    drop table book   删除整个book表</div><div class="line">    truncate table book 删除表中的数据(删除速度比delete更快,无法撤回)</div><div class="line">    delete from book 删除表中数据(可以回退)</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>JDBC调用存储过程</p>
<ul>
<li>调用无参数存储过程</li>
<li>调用含输入参数存储过程</li>
<li>调用含输出参数存储过程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;调用无参数*******************************************************</div><div class="line">		a.存储过程：</div><div class="line">			CREATE PROCEDURE imooc_db.sp_select_nofilter()</div><div class="line">			BEGIN</div><div class="line">				select * from imooc_gooddess;</div><div class="line">			END;</div><div class="line"></div><div class="line">		b.程序代码</div><div class="line">			Connection conn = DBUtils.getConnection();</div><div class="line">			CallableStatement c = conn.prepareCall(&quot;call sp_select_nofilter()&quot;);</div><div class="line">			c.execute(); //执行存储过程</div><div class="line">			ResultSet rs = c.getResultSet();//返回处理结果</div><div class="line">			while(rs.next())&#123;</div><div class="line">				String name = rs.getString(&quot;user_name&quot;);</div><div class="line">				......</div><div class="line">			&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;调用含输入参数*************************************************</div><div class="line">		a.存储过程【IN-输入参数】</div><div class="line">			CREATE DEFINER =&apos;imooc&apos;@&apos;localhost&apos; PROCEDURE &apos;sp_select_filter&apos;(IN sp_name VARCHAR(20))</div><div class="line">			BEGIN </div><div class="line">				IF sp_name IS NULL OR sp_name = &apos;&apos; THEN</div><div class="line">					SELECT * FROM imooc_goddess;</div><div class="line">				ELSE</div><div class="line">					IF length(sp_name)=11 AND substring(sp_name,1,1)=1 THEN</div><div class="line">						SELECT * FROM imooc_goddess WHERE mobile=sp_name;</div><div class="line">					ELSE</div><div class="line">						SELECT * FROM imooc_goddess WHERE user_name LIKE concat(&apos;%&apos;,sp_name,&apos;%&apos;);</div><div class="line">					END IF;</div><div class="line">				END IF;</div><div class="line">			END</div><div class="line"></div><div class="line">		b.程序代码</div><div class="line">			List&lt;User&gt; result = new ArrayList&lt;User&gt;();</div><div class="line"></div><div class="line">			Connection conn = DBUtil.getConnection();</div><div class="line">			CallableStatement cs = conn.prepareCall(&quot;Call sp_select_filter(?)&quot;);</div><div class="line">			cs.setString(1,&quot;user&quot;);</div><div class="line">			cs.execute();//执行</div><div class="line">			ResultSet rs = cs.getResultSet();</div><div class="line">			User user = null;</div><div class="line">			while(rs.next())&#123;</div><div class="line">				user = new User();</div><div class="line">				user.setId(rs.getInt(&quot;id&quot;));</div><div class="line">				user.setUser(rs.getString(&quot;user_name&quot;));</div><div class="line"></div><div class="line">				result.add(user);</div><div class="line">			&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;调用含输出参数****************************************************</div><div class="line">		a.存储过程【ON-输出参数】</div><div class="line">			CREATE DEFING=&apos;imooc&apos;@&apos;localhost&apos; PROCEDURE &apos;sp_select_count&apos;(OUT count INT(10))</div><div class="line">			BEGIN</div><div class="line">				SELECT count(*) INTO count FROM imooc_goddess;</div><div class="line">			END</div><div class="line"></div><div class="line">		b.程序代码</div><div class="line">			Connection conn = DBUtils.getConnection();</div><div class="line">			CallableStatement cs = conn.prepareCall(&quot;call sp_select_count(?)&quot;);</div><div class="line">			cs.registerOutParameter(1,Types.INTEGER);//注册输出参数</div><div class="line">			cs.execute();</div><div class="line"></div><div class="line">			Integer count = cs.getInt(1);//得到输出值</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>JDBC事务管理</p>
<ul>
<li>事务TRANSACTION是作为”单个逻辑工作单元”执行的一系列操作</li>
<li>这些操作作为一个”整体”一起向系统提交,要么都执行,要么都不执行</li>
<li>【特点】ACID,原子性(Atomicty,事务是一个完整的操作),一致性(Consistency,当事务完成时,数据处于一致状态),隔离性(Isolation,对数据进行修改的所有并发事务是彼此隔离的),永久性(Durability,事务完成后,对数据库的修改被永久保持)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;JDBC对事务管理的支持</div><div class="line">	a.</div><div class="line">		commit()  ~  提交</div><div class="line">		rollback() ~ 回滚</div><div class="line">	b.</div><div class="line">		事务操作默认是自动提交,可以通过调用setAutoCommit(false)来禁止自动提交</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;代码实现</div><div class="line">		public String transaction()&#123;</div><div class="line">			Connection conn = DBUtil.getConnection();</div><div class="line">			conn.setAutoCommit(false);//关闭自动提交,进行手动提交</div><div class="line">			try&#123;</div><div class="line">				//增删查改。。。。。	</div><div class="line"></div><div class="line">				conn.commit();//提交</div><div class="line">				return &quot;success&quot;;//成功标志</div><div class="line">			&#125;catch(Exception e)&#123;</div><div class="line">				conn.roollback();//回滚</div><div class="line">				e.printStrackTrace();</div><div class="line">				return &quot;fali&quot;;//失败标志</div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>JDBC数据库连接池</p>
<ul>
<li>【常用开源连接池】dbcp和c3p0<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;使用dbcp连接池************************************************************</div><div class="line">	a.导入相关jar包</div><div class="line">		commons-dpcp2-2.1.1.jar</div><div class="line">		commons-pool2-2.4.2.jar</div><div class="line">		commons-logging-1.2.jar</div><div class="line">	b.在项目根目录增加配置文件</div><div class="line">		dbcp.properties</div><div class="line"></div><div class="line">			********************************************</div><div class="line">			# 使用JDBC驱动的完整有效的java类名</div><div class="line">			driverClassName=com.mysql.jdbc.Driver</div><div class="line">			#传递给JDBC驱动的用于建立建立连接的url</div><div class="line">			url=jdbc:mysql://127.0.0.1:3306/myblog?useUnicode=true&amp;characterEncoding=UTF-8</div><div class="line">			#数据库用户名</div><div class="line">			username=root</div><div class="line">			#数据库密码</div><div class="line">			password=root</div><div class="line">			#最大活动连接</div><div class="line">			maxActive=</div><div class="line">			#最大空闲连接</div><div class="line">			maxIdle==</div><div class="line">			#无限，最大等待时间</div><div class="line">			maxWait=</div><div class="line">			initialSize=</div><div class="line">			minIdle=1</div><div class="line">			romveAbandoned=</div><div class="line">			removeAbandonedTimeout=</div><div class="line">			********************************************</div><div class="line"></div><div class="line">	c.程序初始化代码</div><div class="line">		</div><div class="line">		(1)【方式1】配置文件</div><div class="line">			try&#123;</div><div class="line">				//A.加载数据源</div><div class="line">				Properties pops = new Properties();</div><div class="line">				pops.load(Object.class.getResourceAsStream(&quot;/dbcp.properties&quot;))</div><div class="line"></div><div class="line">				DataSource DS = BasicDataSourceFactory.createDataSource(pops);</div><div class="line">			</div><div class="line">				//B.从数据源获取连接</div><div class="line">				Connection conn = DS.getConnection();</div><div class="line">				conn.setAutoCommit(false);//关闭自动提交</div><div class="line"></div><div class="line">			&#125;catch(Exception)&#123;&#125;</div><div class="line"></div><div class="line">		(2)【方式2】动态加载数据源</div><div class="line">			try&#123;</div><div class="line">				//A.新建数据源</div><div class="line">				BasicDataSource ds = new BasicDataSource();</div><div class="line">				ds.setDriverClassName(&quot;&quot;);</div><div class="line">				ds.setUserName(&quot;&quot;);</div><div class="line">				ds.setPassword(&quot;&quot;);</div><div class="line">				ds.setUrl(&quot;&quot;);</div><div class="line">				ds.setInitialSize(&quot;&quot;);</div><div class="line">				ds.setMaxTotal(&quot;&quot;);</div><div class="line">				ds.setMaxIdle(&quot;&quot;);</div><div class="line">				ds.setMaxWaitMillis(&quot;&quot;);</div><div class="line">				ds.setMinIdle(minIdle);</div><div class="line"></div><div class="line">				DataSource DS = ds;</div><div class="line"></div><div class="line">				//B.从数据源获取连接</div><div class="line">				Connection conn = DS.getConnection();</div><div class="line">				conn.setAutoCommit(false);</div><div class="line"></div><div class="line">			&#125;catch(Exception e)&#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;使用C3P0连接池**********************************************************</div><div class="line">	a.介绍</div><div class="line">		C3P0是一个开源的JDBC连接池,它实现了数据源和JNDI绑定,支持JDBC3和JDBC2的标准扩展</div><div class="line"></div><div class="line">	b.导入相关jar包</div><div class="line">		c3p0-版本号-pre4.jar</div><div class="line">		machange-commons-java-0.2.2.jar</div><div class="line"></div><div class="line">	c.增加配置文件</div><div class="line">		c3p0.properties</div><div class="line"></div><div class="line">	d.编写类文件,创建连接池</div><div class="line">		public static Connection getConnection()&#123;</div><div class="line">			//A.新建数据源</div><div class="line">			ComboPooledDataSource ds = new ComboPooleDataSource();</div><div class="line"></div><div class="line">			//B.获得连接诶</div><div class="line">			try&#123;</div><div class="line">				return ds.getConnectino();</div><div class="line">			&#125;catch(SQLException e)&#123;</div><div class="line">				throw new RuntimeException(e);//抛出运行时异常</div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br> </p>
<hr>
<p><br><br></p>
<h2 id="15-遍历与控制台打印输出"><a href="#15-遍历与控制台打印输出" class="headerlink" title="15.遍历与控制台打印输出"></a>15.遍历与控制台打印输出</h2><ul>
<li>输出26个字母</li>
<li>遍历HashMap<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;输出26个字母</div><div class="line">	public static void main(String [] arge)&#123;</div><div class="line">        int a_num=(int)&apos;a&apos;;</div><div class="line">        char [] num=new char[26];</div><div class="line">        int i=0;</div><div class="line">        flag:</div><div class="line">            while(true)&#123;</div><div class="line">                if(i==num.length) break flag;</div><div class="line">                num[i]=(char)a_num++;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        for(char o:num)&#123;</div><div class="line">            System.out.print(o);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;2&gt;遍历HashMap	</div><div class="line"> 			Iterator iter =hm.entrySet().iterator();</div><div class="line">                while (iter.hasNext()) &#123;</div><div class="line">                    Map.Entry entry = (Map.Entry) iter.next();</div><div class="line">                    Object key = entry.getKey();</div><div class="line">                    Object val = entry.getValue();</div><div class="line">                    System.out.println(key+&quot;----&quot;+val);</div><div class="line">                &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="16-XML文件读取与生成"><a href="#16-XML文件读取与生成" class="headerlink" title="16.XML文件读取与生成"></a>16.XML文件读取与生成</h2><p>xml应用场景</p>
<ul>
<li>不同应用程序之间的通信</li>
<li>不同平台间的通信</li>
<li>不同平台间的数据共享<br><br></li>
</ul>
<p>常见节点类型</p>
<ul>
<li>Element【ELEMENT_NODE,返回值{nodeName:”element name”,nodeVluae:”null”}】</li>
<li>Attr【ATTRIBUTE_NODE,返回值{nodeName:”属性名称”,nodeVluae:”属性值”}】</li>
<li>Text【TEXT_NODE,返回值{nodeName:”#text”,nodeVluae:”节点内容”}】<br><br></li>
</ul>
<p>注意</p>
<ul>
<li>使用DOM解析的时候,在xml中某个节点获取子节点,空格和换行符也会算1个子节点</li>
<li>SAX解析同上</li>
<li>JDOM乱码问题，先考虑xml文档中第一行<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;这里的编码&quot;?&gt;</code>,若仍然出现乱码,在程序中进行代码处理流【new InputStreamReader(FileInputStream,”编码”)】</li>
<li>将XML文件中的输入存入entity对象【各种解析】<br><br></li>
</ul>
<p>DOM特点</p>
<ul>
<li>基于true,DOM树,驻留在内存中,易于删除,修改,重新排列</li>
<li>【优点】形成了树结构,直观好理解,代码更易编写</li>
<li>【优点】解析过程中树结构保留在内存中,方便修改</li>
<li>【缺点】当xml文件较大时,对内存耗费比较大,容易影响解析性能,并造成内存溢出<br><br></li>
</ul>
<p>SAX特点</p>
<ul>
<li>基于事件,无状态性，不易于回头进行操作,不频繁操作的话,SAX性能相对DOM较高</li>
<li>【优点】采用事件驱动,对内存耗费比较小</li>
<li>【优点】适用于只需要处理xml中数据时</li>
<li>【缺点】不易编码</li>
<li>【缺点】很难同时访问同一个xml中的多处不同数据<br><br></li>
</ul>
<p>JDM特点</p>
<ul>
<li>仅仅使用具体类而不使用接口</li>
<li>API大量使用了Collections类</li>
<li>是一个开发代码的软件<br><br></li>
</ul>
<p>DOM4J特点</p>
<ul>
<li>JDOM的异种智能分支,它合并了许多超出基本XML表示的功能</li>
<li>DOM4J使用接口抽象基本类方法,是一个优秀的Java XML API</li>
<li>具有性能优异,灵活性好,功能强大和极端易用使用的特点【在某种程度比JDOM性能要好】</li>
<li>是一个开发代码的软件<br><br></li>
</ul>
<p>【读取】java中获取xml文件的四种解析方式</p>
<ul>
<li>DOM 【基础.官方(与平台无关,不只是java),将整个XML文件加载到内存中，再逐个解析】</li>
<li>SAX 【基础,官方(基于事件驱动的解析方式),通过自己创建的Hndler处理类,去逐个分析遇到的每个节点,按顺序最外层向里层依次解析】</li>
<li>DOM4J 【扩展在基础方法上扩展出的,只有java能够使用】</li>
<li>JDOM   【同上】</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;DOM解析**********************************************************</div><div class="line">	public DOMTest&#123;</div><div class="line">		/*</div><div class="line">			a.创建DocumentBuilderFactory对象</div><div class="line">			b.创建DocumentBuilder对象</div><div class="line">			c.通过DocumentBuilder对象的parse(String pathfileName)解析xml文件</div><div class="line">			d.得到Dom对象【org.w3c.dom】</div><div class="line">		*/</div><div class="line">		public static void main(String [] args)&#123;</div><div class="line">			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</div><div class="line">			try&#123;</div><div class="line">				DocumentBuilder db = dbf.newDocumentBuilder();</div><div class="line">				Document document = db.parse(&quot;books.xml&quot;);</div><div class="line"></div><div class="line">				//获取&quot;book&quot;节点对象结合</div><div class="line">				NodeList booklist = document.getElementByTagName(&quot;book&quot;);</div><div class="line">				for(int i = 0,len = nlist.getLength(); i &lt; len; i++)&#123;</div><div class="line">					//A【方式1】每个节点</div><div class="line">					Node book = booklist.item(i);</div><div class="line">					//节点的属性集合</div><div class="line">					NameNodeMap attrs = book.getAttributes();</div><div class="line"></div><div class="line">					for(int j = 0,len2 = atts.getLength(); j++)&#123;</div><div class="line">						//属性节点</div><div class="line">						Node attr = attrs.item(j);</div><div class="line">						String attrName = attr.getNodeName();</div><div class="line">						String attrValue = attr.getNodeValue();</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					//A【方式2】将节点对象强转为Element类型</div><div class="line">					Element book = (Element)booklist.item(i);</div><div class="line">					String attrValue = book.getAttribute(&quot;id&quot;);//id属性值</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">					//B【获取子节点】</div><div class="line">					NodeList childlist = book.getChildNodes();</div><div class="line">					for(int j = 0,len2 = childlist.getLength();j &lt; len2;j++)&#123;</div><div class="line">						//针对节点类型为ELEMENT_NODE的节点</div><div class="line">						Node child = childlist.item(j);</div><div class="line">						if(child.getNodeType == Node.ELEMENT_NODE)&#123;</div><div class="line">							//执行操作</div><div class="line">							System.out.println(&quot;打印节点值&quot;+ node.getTextContent());</div><div class="line">						&#125;</div><div class="line">					&#125;  </div><div class="line"></div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;catch(ParserConfigurationException e)&#123;</div><div class="line">				e.printStrackTrace();</div><div class="line">			&#125;catch(SAXException e)&#123;&#125;</div><div class="line">			catch(IOException e)&#123;&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;SAX解析**********************************************************</div><div class="line">	public class ASXTest&#123;</div><div class="line">		/*</div><div class="line">			a.通过SAXParserFactory.newInstanse获取通过SAXParserFactory的实例factory</div><div class="line">			b.通过factory.newSAXParser()获取SAXParser的实例parser</div><div class="line">			c.创建一个类继承DefaultHandler【org.xml.sax.helpers】,重写其中的一些方法进行业务处理,并创建这个类的实例</div><div class="line">		*/</div><div class="line">		public static void main(String [] args)&#123;</div><div class="line">			SAXParserFactory  factory = SAXParserFacotry.newInstance();</div><div class="line">			try&#123;</div><div class="line"></div><div class="line">				SAXParser parser = factory.newSAXParser();</div><div class="line"></div><div class="line">				MySAXParserHandler handler = new MySAXParserHandler();</div><div class="line"></div><div class="line">				parser.parser(&quot;books.xml&quot;,handler);</div><div class="line"></div><div class="line">				//遍历每一本书</div><div class="line">				for(Book book:handler.getBooklist)&#123;</div><div class="line">					System.out.println(book.toString());</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;catch(ParserConfigurationException e)&#123;&#125;</div><div class="line">			 catch(SAXException e)&#123;&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	class MySAXParserHandler extends DefaultHandler&#123;</div><div class="line"></div><div class="line">			private String value = null;  //节点值</div><div class="line">			private Book book = null;</div><div class="line">			private ArrayList&lt;Book&gt; booklist = new  ArrayList&lt;Book&gt;();</div><div class="line">			public ArrayList&lt;Book&gt; getBooklist()&#123;</div><div class="line">				return bookList;</div><div class="line">			&#125;</div><div class="line"></div><div class="line"></div><div class="line">			//标识解析开始</div><div class="line">			@Override</div><div class="line">			public void startDocument() throws SAXException&#123;</div><div class="line">				super.startDocument();</div><div class="line">				System.out.println(&quot;SAX解析开始[第一行开始]&quot;);</div><div class="line">			&#125;</div><div class="line"></div><div class="line"></div><div class="line">			//解析xml元素</div><div class="line">			@Override</div><div class="line">			public void startElement(String url,String localName,String qName,Attrubutes attributes) throws SAXException&#123;</div><div class="line">				super.startElement(uri,localName,qName,attributes);</div><div class="line"></div><div class="line">				//解析book节点属性</div><div class="line">				if(&quot;book&quot;.equals(qName))&#123;</div><div class="line">					//创建一个Book对象</div><div class="line">					this.book = new Book();</div><div class="line"></div><div class="line">					System.out.println(&quot;=======开始遍历book======&quot;)</div><div class="line">					 //获取id属性值</div><div class="line">					String value = attributes.getValue(&quot;id&quot;);</div><div class="line">					</div><div class="line">					//遍历该节点的所有属性</div><div class="line">					int num = attributes.getLength();</div><div class="line">					for(int i = 0 ; i &lt; num; i++)&#123;</div><div class="line">						String name = attributes.getQName(i); //属性名</div><div class="line">						String value = attributes.getValue(i);//属性值</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				//执行完后默认执行character()</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			//获取节点值[参数:节点内容,开始节点,长度]</div><div class="line">			@Override</div><div class="line">			public void characters(char [] ch,int start,int length) throws SAXException&#123;</div><div class="line">				super.characters(ch,start,length);	</div><div class="line"></div><div class="line">				this.value = new String(ch,start,length);</div><div class="line">				if(!value.trim().equals(&quot;&quot;))&#123; //去掉空格后,不是空字符串</div><div class="line">					System.out.println(&quot;节点值:&quot; + value);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			//节点的结束标签</div><div class="line">			@Override</div><div class="line">			public void endElement(String uri,String localName,String qName)throws SAXException&#123;</div><div class="line">				super.endElement(uri,localName,qName);</div><div class="line"></div><div class="line">				//判断是否结束某个book节点的遍历</div><div class="line">				if(&quot;book&quot;.equals(qName))&#123;</div><div class="line">					System.out.println(&quot;=======结束遍历book======&quot;)</div><div class="line">					this.booklist.add(book);  //将book对象添加进集合</div><div class="line">					this.book = null;		  //重置book对象</div><div class="line">				&#125;else if(&quot;name&quot;.equals(qName))&#123;</div><div class="line">					book.setName(value);</div><div class="line">				&#125;else if(&quot;author&quot;.equals(qName))&#123;</div><div class="line">					book.setAuthor(value);</div><div class="line">				&#125;else if(qName.equals(&quot;content&quot;))&#123;</div><div class="line">					book.setContent(value);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line"></div><div class="line">			//标识解析结束</div><div class="line">			@Override</div><div class="line">			public void endDocuemnt() throws SAXException&#123;</div><div class="line">				super.endDocument();</div><div class="line">				System.out.println(&quot;SAX解析结束[读完最后一行]&quot;);</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//entity实体类</div><div class="line">	class Book&#123;</div><div class="line">		private String name;</div><div class="line">		private String author;</div><div class="line">		private String content;</div><div class="line"></div><div class="line">		//Getter和Setter方法</div><div class="line">		...... </div><div class="line"></div><div class="line">		//toString()</div><div class="line">		public String toString()&#123;</div><div class="line">			....</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;JDOM解析**********************************************************</div><div class="line">	public class JDOMTest&#123;</div><div class="line"></div><div class="line">		private ArrayList&lt;Book&gt; booklist = new ArrayList&lt;Book&gt;();</div><div class="line"></div><div class="line">		/*</div><div class="line">			a.导入jdom-版本号.jar包</div><div class="line">			b.创建SAXBuilder的对象实例通过saxBuilde</div><div class="line">			c.指定xml文件创建输入流</div><div class="line">			d.通过saxBuilde的builder(),将输入流加载,返回Document【org.jdom2】实例</div><div class="line">		*/</div><div class="line">		public static void main(String [] args)&#123;</div><div class="line">			SAXBuilder saxBuilder = new SAXBuilder();</div><div class="line"></div><div class="line">			InputStream is;</div><div class="line">			try&#123;</div><div class="line">				in = new FileInputStream(&quot;src/res/books.xml&quot;);</div><div class="line"></div><div class="line">				Document document = saxBuilder.build(in);</div><div class="line"></div><div class="line">				//获取根节点</div><div class="line">				Element rootElement = document.getRootElement();</div><div class="line"></div><div class="line">				//获取根节点下的子节点集合</div><div class="line">				List&lt;Element&gt; booklist = rootElement.getChildren();</div><div class="line">				int len = booklist.size(); //集合长度</div><div class="line">				for(Element book: booklist)&#123;</div><div class="line">					Book book = new Book();</div><div class="line">					System.out.println(&quot;开始解析....&quot;);</div><div class="line"></div><div class="line">						String id = book.getAttrbuteValue(&quot;id&quot;);//获取节点的id属性值</div><div class="line"></div><div class="line">						//获取属性集合</div><div class="line">						List&lt;Attribute&gt; attrlist = book.getAttributes();</div><div class="line">						for(Attribute attr: attrlist)&#123;</div><div class="line">							String attrName = attr.getName();//属性名</div><div class="line">							String attrValue = attr.getValue();//属性值</div><div class="line">						&#125;</div><div class="line"></div><div class="line">						//book节点的子节点的遍历</div><div class="line">						List&lt;Element&gt; bookChilds = book.getChildren();</div><div class="line">						for(Element child: bookChilds)&#123;</div><div class="line">							String nodeName = child.getName();//子节点名</div><div class="line">							String nodeValue = child.getValue();//子节点值</div><div class="line"></div><div class="line">							if(&quot;name&quot;.equals(nodeName))&#123;</div><div class="line">								book.setName(nodeValue);</div><div class="line">							&#125;</div><div class="line">							else if(&quot;author&quot;.equals(nodeName))&#123;</div><div class="line">								book.setAuthor(nodeValue);</div><div class="line">							&#125;</div><div class="line">							else if(&quot;content&quot;.equals(nodeName))&#123;</div><div class="line">								book.setContent(nodeValue);</div><div class="line">							&#125;</div><div class="line"></div><div class="line">						&#125;</div><div class="line"></div><div class="line">					System.out.println(&quot;结束解析....&quot;);</div><div class="line">					booklist.add(book); //存储book集合</div><div class="line">					book = null;	//重置book</div><div class="line">				&#125;</div><div class="line"></div><div class="line"></div><div class="line">			&#125;catch(FileNotFoundException e)&#123;&#125;</div><div class="line">			 catch(JDOMException e)&#123;&#125;</div><div class="line">			 catch(IOException e)&#123;&#125;</div><div class="line">		&#125;</div><div class="line">   &#125;</div><div class="line">	//entity实体类</div><div class="line">	class Book&#123;</div><div class="line">		private String name;</div><div class="line">		private String author;</div><div class="line">		private String content;</div><div class="line"></div><div class="line">		//Getter和Setter方法</div><div class="line">		...... </div><div class="line"></div><div class="line">		//toString()</div><div class="line">		public String toString()&#123;</div><div class="line">			....</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;DOM4J解析**********************************************************</div><div class="line"></div><div class="line">	public DOM4JTest&#123;</div><div class="line">		 /*</div><div class="line">    		a.导入dom4j-版本号.jar包</div><div class="line">    		b.创建SAXReader对象reader</div><div class="line">    		c.通过read的read(),加载xml文件,得到Doument【org.dom4j】实例对象</div><div class="line">    		d.获取根节点,子节点。。。</div><div class="line">    	 */</div><div class="line">    	 public static void main(String [] args)&#123;</div><div class="line">    	 	SAXReader reader = new SAXReader();</div><div class="line"></div><div class="line">    	 	try&#123;</div><div class="line">    	 		Document document reader.read(new File(&quot;src.res/books.xml&quot;));</div><div class="line"></div><div class="line">    	 		Element bookRoot = document.getRootElement();</div><div class="line"></div><div class="line">    	 		//获取迭代器,遍历迭代器,获取根节点中的信息</div><div class="line">    	 		Iterator it = bookRoot.elementIterator();</div><div class="line">    	 		while(it.hasNext())&#123;</div><div class="line">    	 			System.out.println(&quot;========开始遍历一本书==========&quot;)</div><div class="line">    	 			Element book = (Element)it.next(); //节点</div><div class="line"></div><div class="line">    	 			//获取book属性集合</div><div class="line">    	 			List&lt;Attribute&gt; bookAttrs = book.attributes();</div><div class="line">    	 			for(Attribute attr: bookAttrs)&#123;</div><div class="line">    	 				String attrName = attr.getName(); //属性名</div><div class="line">    	 				String attrValue = attr.getValue();//属性值</div><div class="line">    	 			&#125;</div><div class="line"></div><div class="line"></div><div class="line">    	 			//获取book节点的子节点迭代器</div><div class="line">    	 			Iterator itt = book.elementIterator();</div><div class="line">    	 			while(itt.hasNext())&#123;</div><div class="line">    	 				Element bookChild = (Element)itt.next();</div><div class="line"></div><div class="line">    	 				String childName = bookChild.getName();//子节点名</div><div class="line">    	 				String childValue = bookChild.getValue();//子节点值</div><div class="line">    	 			&#125;</div><div class="line">    	 			println(&quot;==========结束遍历===================&quot;)</div><div class="line">     	 		&#125;</div><div class="line"></div><div class="line">    	 	&#125;catch(DocumentException e)&#123;&#125;</div><div class="line">    	 	</div><div class="line">    	 &#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<hr>
<p>【生成】java生成XML文件的四种方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;DOM生成*********************************************************</div><div class="line">	 public void createXML()&#123;</div><div class="line">	  	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</div><div class="line">	  	</div><div class="line">	  	DocumentBuilder db = null;</div><div class="line">	  	try&#123;</div><div class="line">	  		db = dbf.newDocumentBuilder();</div><div class="line">	    &#125;catch(ParserConfigurationException e)&#123;&#125;</div><div class="line"></div><div class="line">	    //获得Document</div><div class="line">	    Doucment document  = db.newDocument(); </div><div class="line">	    document.setXmlStandalone(true);//将第一行的xml标签,standalone属性【yes-表示当前xml文件没有ddt和schema作为说明文档,no-表示有..说明文档,解释说明允许有哪些值,以及值的一些形式】声明为yes(默认是不显示)</div><div class="line"></div><div class="line">	    //添加根节点bookstore</div><div class="line">	    Element bookstore = document.createElement(&quot;bookstore&quot;);</div><div class="line">	    Element book = document.createElement(&quot;book&quot;);</div><div class="line">	    book.setAttribute(&quot;节点属性名&quot;,&quot;节点属性值&quot;);</div><div class="line">	    Element name = document.createElement(&quot;name&quot;);</div><div class="line">	    name.setTextContent(&quot;节点文本内容&quot;);</div><div class="line"></div><div class="line">	    book.appendChild(name);		</div><div class="line">	    bookstore.appendChild(book);      //给bookstore添加子节点</div><div class="line">	    document.appendChild(bookstore);  //添加根节点</div><div class="line">	  </div><div class="line"></div><div class="line">	    //创建xml文件</div><div class="line">	    TransformerFactory tff = TransformerFactory.newInstance();//工程类创建对象</div><div class="line">	    try&#123;</div><div class="line">	    	Transformer tr = tff.newTransformer();</div><div class="line"></div><div class="line">	    	//设置换行</div><div class="line">	    	tf.setOutputProperty(OutputKeys.INDENT,&quot;yes&quot;);</div><div class="line"></div><div class="line">	    	//传入document,生成xml文档</div><div class="line">	    	tf.transform(new DOMSource(document),</div><div class="line">	    				 new StreamResult(new File(&quot;book1.xml&quot;)));</div><div class="line">	    &#125;catch(TransformerConfigurationException e)&#123;&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;1&gt;SAX生成*********************************************************</div><div class="line">	public void createXML()&#123;</div><div class="line">		//1.得到Book对象集合进行生成xml文件</div><div class="line">		ArrayList&lt;Book&gt; bookList = getBooklist();</div><div class="line"></div><div class="line">		SAXTransformerFactory tff = (SAXTransformerFactory)SAXTransformerFactory.newInstance();</div><div class="line"></div><div class="line">		try&#123;</div><div class="line">			TransformerHandler handler = tff.newTransformerHandler();</div><div class="line"></div><div class="line">			//通过Transformer对象,设置xml编码与换行</div><div class="line">			Transformer tf = handler.getTransformer();</div><div class="line">			tf.setOutputProperty(OutputKeys.ENCODING,&quot;UTF-8&quot;);</div><div class="line">			tf.setOutputProperty(OutputKeys.INDENT,&quot;yes&quot;);</div><div class="line"></div><div class="line"></div><div class="line">			//创建Result对象并与handler关联</div><div class="line">			File file = new File(&quot;src/res/newbooks.xml&quot;);</div><div class="line">			if(!file.exists())&#123;</div><div class="line">					file.createNewFile();//不存在则创建xml文件</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			Result result = new StreamResult(new FileInputOutputStream(file));</div><div class="line">			handler.setResult(result);</div><div class="line"></div><div class="line">			//打开document</div><div class="line">			handler.startDocument();</div><div class="line"></div><div class="line">				//bookstore节点</div><div class="line">				AttributesImpl attr = new AttributesImpl();//属性</div><div class="line">				handler.startElement(&quot;&quot;,&quot;&quot;,&quot;bookstore&quot;,attr); //开始标签</div><div class="line">		</div><div class="line">					//子节点book,并赋予属性</div><div class="line">					attr.clear();</div><div class="line">					attr.addAttribute(&quot;&quot;,&quot;&quot;,&quot;id&quot;,&quot;&quot;,&quot;1&quot;);</div><div class="line">					handler.startElement(&quot;&quot;,&quot;&quot;,&quot;book&quot;,attr);</div><div class="line"></div><div class="line">						//子节点name</div><div class="line">						handler.startElement(&quot;&quot;,&quot;&quot;,&quot;name&quot;,attr);</div><div class="line">						handler.characters(&quot;文本值&quot;.toCharArray(),0,&quot;文本值&quot;.length();)</div><div class="line">						handler.endElement(&quot;&quot;,&quot;&quot;,&quot;name&quot;);</div><div class="line"></div><div class="line">					handler.endElement(&quot;&quot;,&quot;&quot;,&quot;book&quot;);</div><div class="line"></div><div class="line">				handler.endElement(&quot;&quot;,&quot;&quot;,&quot;bookstore&quot;;//结束标签</div><div class="line"></div><div class="line">			//关闭document</div><div class="line">			handler.endDocuemnt();</div><div class="line"></div><div class="line">	</div><div class="line"></div><div class="line">		&#125;catch(TransformerConfigurationException e)&#123;&#125;</div><div class="line">		 catch(FileNotFoundException e)&#123;&#125;</div><div class="line">		 catch(IOException e)</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;JDOM生成*********************************************************</div><div class="line">	public void createXML()&#123;</div><div class="line">		Element rss = new Element(&quot;rss&quot;);</div><div class="line">		rss.setAttribute(&quot;version&quot;,&quot;2.0&quot;);</div><div class="line"></div><div class="line">		Document docuemnt = new Document(rss);</div><div class="line"></div><div class="line">		//子节点</div><div class="line">		Element channel = new Element(&quot;channel&quot;);</div><div class="line">		rss.addcContent(channel);</div><div class="line">		Element title = new Element(&quot;title&quot;);</div><div class="line">		title.setText(&quot;国内最新新闻&quot;);</div><div class="line">		channel.addContext(title);</div><div class="line"></div><div class="line">		//设置XML格式</div><div class="line">		Format format = Format.getCompactFormat()</div><div class="line">		format.setIndent(&quot;&quot;); //设置换行</div><div class="line">		format.setEncoding(&quot;GBK&quot;);//设置编码</div><div class="line"></div><div class="line"></div><div class="line">		//创建XML文件</div><div class="line">		XMLOutputter outputer = new XMLOutputter(format);</div><div class="line"></div><div class="line">		try&#123;</div><div class="line">			outputer.output(document,new fileOutputStream(new File(&quot;rssnews.xml&quot;)));</div><div class="line">		&#125;catch(FileNotFoundException e)&#123;&#125;</div><div class="line">		 catch(IOException e)&#123;&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;DOM4J生成*********************************************************</div><div class="line"></div><div class="line">	public void createXML()&#123;</div><div class="line">		Document document = DocumentHepler.createDocument();</div><div class="line">		Element rss = document.addElement(&quot;rss&quot;); /RSS节点</div><div class="line">		rss.addAttribute(&quot;version&quot;,2.0);</div><div class="line"></div><div class="line">		//子节点</div><div class="line">		Element channel = rss.addElement(&quot;channel&quot;);</div><div class="line">		Element title = channel.addElement(&quot;title&quot;);</div><div class="line">		title.setText(&quot;&lt;![CDATA[国内最新新闻]]&gt;&quot;);</div><div class="line"></div><div class="line">		//设置漂亮的换行格式</div><div class="line">		OutputFormat format = OutputFormat.createPrettyPrint();</div><div class="line">		format.sendEncoding(&quot;GBK&quot;);//设置编码</div><div class="line"></div><div class="line">		//生成文件</div><div class="line">		File file = new File(&quot;src/res/rssnew.xml&quot;);</div><div class="line">		XMLWrite write;</div><div class="line">		try&#123;</div><div class="line">			write = new XMLWrite(new FileOutputStream(file),format);</div><div class="line"></div><div class="line">			//设置转义,默认为ture(自动将特殊符号转义),false-不转义</div><div class="line">			write.setEscapeText(false);</div><div class="line">			</div><div class="line">			write.write(document);</div><div class="line">			write.close();</div><div class="line">		&#125;catch(IOException e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="17-1-Java加密与解密机制介绍"><a href="#17-1-Java加密与解密机制介绍" class="headerlink" title="17_1.Java加密与解密机制介绍"></a>17_1.Java加密与解密机制介绍</h2><p>&emsp;加密与解密算法的最终目的是实现数据的安全传输<br><br></p>
<p>密码常用术语</p>
<ul>
<li>明文【待加密信息】</li>
<li>密文【经过加密后的明文】</li>
<li>加密【明文转密文的过程】</li>
<li>加密算法【明文转密文的转换算法】</li>
<li>加密密钥【通过加密算法进行加密操作的密钥】</li>
<li>解密【将密文转为明文的过程】</li>
<li>解密算法【密文转为明文的算法】</li>
<li>解密密钥【通过解密算法进行解密操作用的密钥】</li>
<li>密码分析【截获密文者视图通过分析截获的密文从而推断出原来的明文或密钥的过程】</li>
<li>主动工具【攻击者非法入侵密码系统,采用伪造,修改,删除等手段向系统注入假消息进行欺骗(对密文具有破坏作用)】</li>
<li>被动攻击【对一个保密系统采取截获密文并对其进行分析和攻击(对密文没有破坏作用)】</li>
<li>密码体质【由明文空间,密文空间,密钥空间,加密算法和解密算法五部分构成】</li>
<li>密码协议【也称安全协议,指以密码为基础的消息交换通信协议,目的是在网络环境中提供安全的服务】</li>
<li>密码系统【指用于加密,解密的系统】</li>
<li>柯科克霍夫原则【数据安全基于密钥而不是算法的保密.即系统的安全取决于密钥,对密钥保密,对算法公开(现代密码学设计的基本原则)】<br><br></li>
</ul>
<p>密码的分类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;时间分类</div><div class="line">		a.古典密码【以字符为基本加密单元】</div><div class="line">		b.现代密码【以信息块为基本加密单元】</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;保密内容算法分类</div><div class="line">		a.受限制算法【算法保密性基于对算法的保密】</div><div class="line">		b.基于密钥算法【...保密性基于对密钥的保密】</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;密码体质分类</div><div class="line">	a.对称密码(单密码or私钥密码)   【值加密密钥与解密密钥相同】</div><div class="line">	b.非对称密码(双钥oir公钥密码)	 【指加密密钥与解密密钥不同,密钥分公钥,私钥】</div><div class="line"></div><div class="line">	a-2.对称密码算法(单钥密码算法or私钥密码算法)  【指应用于对称密码的加密,解密算法】</div><div class="line">	b-2.非对称密码算法(双钥密码算法or公钥密码算法) 【指对应用与非对称密码的加密,解密算法】</div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;明文处理方法分类</div><div class="line">	 a.分组密码  【指加密时将明文分成固定长度的组,用同一密钥和算法对每一块加密,输入也是固定长度的密文(多用于网络加密)】</div><div class="line">	 b.流密码(序列密码)    【指加密时每次加密1位或一个字节的明文】</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>散列函数的特点</p>
<ul>
<li>【作用】用于验证数据的完整性,并不是用来加解密</li>
<li>长度不受限制</li>
<li>哈希值容易计算</li>
<li>散列运算过程不可逆</li>
<li>【相关算法】消息摘要算法MD5,SHA(安全散列算法),MAC(消息认证码算法)<br><br></li>
</ul>
<p>数字签名的特点</p>
<ul>
<li>【是什么】主要是针对以数字的形式存储的消息进行的处理,产生一种带有操作者身份(签名者)信息的编码<br><br></li>
</ul>
<p>OSI(Open System Interconnection)安全体系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;网络通信</div><div class="line">	7.应用层</div><div class="line">	6.表示层</div><div class="line">	5.会话层</div><div class="line">	4.传输层</div><div class="line">	3.网络层</div><div class="line">	2.数据链路层</div><div class="line">	1.物理层</div><div class="line"></div><div class="line">&lt;2&gt;安全机制</div><div class="line">	+ 加密机制</div><div class="line">    + 数字签名机制</div><div class="line">    + 访问控制机制</div><div class="line">    + 数据完整性机制</div><div class="line">    + 认证机制</div><div class="line">    + 业务流填充机制</div><div class="line">    + 路由控制机制</div><div class="line">    + 公证机制</div><div class="line"></div><div class="line">&lt;3&gt;安全服务</div><div class="line">	+ 认证(鉴别)</div><div class="line">	+ 访问控制服务</div><div class="line">	+ 数据保密性服务</div><div class="line">	+ 数据完整性服务</div><div class="line">	+ 抗否认服务</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>TCP/IP安全体系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;网络通信层</div><div class="line">			【这里是指对应的OSI参考模型】</div><div class="line">	4.应用层~~应用曾安全【对应应用,表示,会话层】</div><div class="line">	3.传输层~~传输层安全【...传输层】</div><div class="line">	2.网络层~~网络层安全【...网络层】</div><div class="line">	1.网络接口层~~网络接口层安全【...数据链路,物理层】</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;安全服务与安全机制的对应</div><div class="line">	抗否认性服务  ~~~  公正机制</div><div class="line">	数据完整性服务 ~~~ 数据完整性机制</div><div class="line">	数据保密性服务 ~~~  加密机制,业务流填充机制</div><div class="line">	访问控制服务 ~~~  访问控制机制,路由控制机制</div><div class="line">	认证(鉴别)服务 ~~~ 数字签名,认证机制</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>Java安全组成组成</p>
<ul>
<li>JCA(Java Crptography Architecture)【Java加密信息结构,提供基本框架,如消息摘要,数字签名等】</li>
<li>JCE(Java Cryptography Extension)【Java加密扩展包,在JCA的基础上进行扩展,提供更多加密算法,消息摘要,密钥管理等功能(例如DES,AES,RSA算法)】</li>
<li>JSSE(Java Secure Socket Extension)【Java安全套接字扩展包,提供基于SSL的加密功能,主要用于网络传输】</li>
<li>JAAS(Java Authentication and Authentication Service)【Java的鉴别与安全服务,提供在java平台上进行用户身份验证的功能,基于java开发的系统的权限与安全】</li>
<li>JCA和JCE是java官方提供的基于用户安全和加密的API,只是提供一些接口,java的安全机制是可以扩展的【可适用JDK意外的扩展包,需要修改资源文件([jdk根目录]~jre~lib~security~[java.security文件]),增加相关内容】<br><br></li>
</ul>
<p>相关java包和类</p>
<ul>
<li>java.security 【消息摘要】</li>
<li>javax.crypto  【安全信息摘要,消息认证(鉴别)码】</li>
<li>java.net.ssl  【安全套接字】<br>+【第三方扩展包】Bouncy Castel<br>+【第三方扩展包】Commons Codec<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="17-2-运用Base64算法"><a href="#17-2-运用Base64算法" class="headerlink" title="17_2.运用Base64算法"></a>17_2.运用Base64算法</h2><p>&emsp;Base64是英文邮件的”历史问题”而产生算法,基于64个字符的编码算法【一种用替换的方式实现的算法】,RFC 2045【64位编码算法的规范】,衍生Base16,Base32,UrlBase64等算法,</p>
<p>Base64算法应用场景</p>
<ul>
<li>e-mail</li>
<li>密钥</li>
<li>证书文件<br><br></li>
</ul>
<p>三种方式实现Base64算法</p>
<ul>
<li>JDK</li>
<li>Commons Codec【导入commons-codec-版本号.jar包】</li>
<li>Bouncy Castle【导入bcprow-jdk15on-版本号.jar包】<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;JDK实现*************************************************************</div><div class="line">	public static void jdkBase64()&#123;</div><div class="line"></div><div class="line">		String clearText = &quot;hello world&quot;;//明文</div><div class="line">		String cipherText; //密文</div><div class="line">		String result;//密文解密后</div><div class="line"></div><div class="line">		try&#123;</div><div class="line">			//加密</div><div class="line">			BASE64Encoder encoder = new BASE64Encoder();//编码器</div><div class="line">			cipherText = encoder.encode(clearText.getBytes());</div><div class="line"></div><div class="line">			//解析</div><div class="line">			BASE64Decoder decoder = new BASE64Decoder();//解码器</div><div class="line">			result = new String(decoder.decodeBuffer(cipherText));</div><div class="line">		&#125;catch(IOException e)&#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;Coomons Codec实现******************************************************</div><div class="line">	public static void commonsCodesBase64()&#123;</div><div class="line">		String clearText = &quot;hello world&quot;;//明文</div><div class="line">		String cipherText; //密文</div><div class="line">		String result;//密文解密后</div><div class="line"></div><div class="line">		//加密</div><div class="line">		byte [] encodeBytes = Base64.encodeBase64(clearText.getBytes());</div><div class="line">		cipherText = new String(encodeBytes);</div><div class="line"></div><div class="line">		//解密</div><div class="line">		byte [] decodeBytes = Base64.decodeBase64(encodeBytes);</div><div class="line">		result = new String(decodeBytes);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;Bocuncy Castle实现******************************************************</div><div class="line">	 public static void bouncyCastleBase64()&#123;</div><div class="line">	 	String clearText = &quot;hello world&quot;;//明文</div><div class="line">		String cipherText; //密文</div><div class="line">		String result;//密文解密后</div><div class="line"></div><div class="line">		//加密</div><div class="line">		byte [] encodeBytes = org.bouncycastle.encoders.Base64(clearText);</div><div class="line">		cipherText = new String(encodeBytes);</div><div class="line"></div><div class="line">		//解密</div><div class="line">		byte [] decodeBytes = org.bouncycastle.util.encoders.Base64.decode(encodeBytes);</div><div class="line">		result = new String(decodeBytes);</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="-10"><a href="#-10" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="17-3-运用消息摘要算法"><a href="#17-3-运用消息摘要算法" class="headerlink" title="17_3.运用消息摘要算法"></a>17_3.运用消息摘要算法</h2><p>&emsp;主要用于验证数据的完整性,是整个数字前面的核心算法</p>
<p>主要讲解三种类型</p>
<ul>
<li>MD(Message Digest)【128位摘要信息】</li>
<li>SHA(Secure Hash Algorithm)【在MD4的基础上演进而得】</li>
<li>MAC(Message Authentication Code)<br><br></li>
</ul>
<p>MD5应用场景<br>1.用户注册~密码进行信息摘要(密码是使用MD5信息摘要得到的16进制的字符串)~信息持久化~返回注册结果<br>2.用户登录~对密码进行信息摘要(判断与注册时的MD5处理结果是否相等)~通过用户名及摘要查询~返回登录结果<br><br></p>
<p>SHA应用场景<br>1.firefox浏览器~选项~高级~证书-查看证书~随便查看一个【证书,指纹】<br>2.发送方~(1)公布消息摘要算法(是SHA..)~(2)对待发布消息进行摘要处理~(3)发送摘要消息与原始消息【加入约定的key 或 时间戳 or 排序】~(4)接收方进行消息鉴别【指将原始消息进行摘要,与接收到摘要信息进行对比】<br>3.信息:原始消息 + key + 时间戳<br><br></p>
<p>MAC应用场景</p>
<ul>
<li>SecureCRT【Linux操作系统的客户端】</li>
<li>发送方~公布消息摘要算法~构建密钥~发送密钥~对待发送的信息进行消息摘要处理~发送消息知啊要~发送消息~接收方进行消息鉴别<br><br></li>
</ul>
<p>三种消息摘要算法的不同实现</p>
<ul>
<li>JDK</li>
<li>Commons Codec【导入commons-codec-版本号.jar包】</li>
<li>Bouncy Castle【导入bcprow-jdk15on-版本号.jar包】<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;MD算法【jdk,Bocuncy Castle,Coomons Codec方式实现,同一明文用不同方式实现,得到结果仍然保持一致】</div><div class="line">		算法    摘要长度	实现方</div><div class="line">		MD2       128  		  JDK            [1代]</div><div class="line">		MD4		  128 		  Bouncy Castle  [2代.安全性比前一代提高]</div><div class="line">		MD5       128         JDK            [3代,安全性比前一代提高]</div><div class="line"></div><div class="line">		/*【jdk实现】MD5-加密*/</div><div class="line">		public static void jdkMD5()&#123;</div><div class="line">				String clearText = &quot;hello world&quot;;//明文</div><div class="line"></div><div class="line">			try&#123;</div><div class="line">                MessageDigest md = MessgeDigest.getInstance(&quot;MD5&quot;);</div><div class="line">                byte [] md5Bytes = md.digest(clearText.getBytes());</div><div class="line"></div><div class="line">                //加密后的内容转为16进制【org.apache.commons.codec.binary.Hex包】</div><div class="line">                String result = Hex.encodeHexString(md5Bytes);</div><div class="line"></div><div class="line">			&#125;catch(NoSuchAlgorithmException e)&#123;&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		/*【Bouncy Castle实现】MD4-加密*/</div><div class="line">		public static void bcMD4()&#123;</div><div class="line">			String clearText = &quot;hello world&quot;;//明文</div><div class="line"></div><div class="line">			//加密</div><div class="line">			Digest digest = new MD4Digest();</div><div class="line">			digest.update(clearText.getBytes,0,clearTextBytes().length);//byte数组,开始位置,长度</div><div class="line"></div><div class="line">			byte [] md4Bytes = new byte[digest.getDigestSize()];</div><div class="line">			digest.doFinal(md4Bytes,0);//摘要处理后输入的内容,输入长度</div><div class="line"></div><div class="line">			//转成16进制</div><div class="line">			String result = org.bouncycastle.util.encoders.Hex.toHexString(md4Bytes);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		/*【Bouncy Castle实现】MD5-加密*/</div><div class="line">		public static void bcMD5()&#123;</div><div class="line">			String clearText = &quot;hello world&quot;;//明文</div><div class="line"></div><div class="line">			//方式1~~~~~~~~~~~~</div><div class="line">			//加密</div><div class="line">			Digest digest = new MD5Digest();</div><div class="line">			digest.update(clearText.getBytes,0,clearTextBytes().length);</div><div class="line"></div><div class="line">			byte [] md5Bytes = new byte[digest.getDigestSize()];</div><div class="line">			digest.doFinal(md5Bytes,0);</div><div class="line"></div><div class="line">			//转成16进制</div><div class="line">			String result = org.bouncycastle.util.encoders.Hex.toHexString(md5Bytes);</div><div class="line"></div><div class="line"></div><div class="line">			//方式2~~~~~~~~~~JDK动态添加BC的MD5实现【也可以使用配置文件方式】</div><div class="line">			try&#123;</div><div class="line">				Security.addProvide(new BouncyCastleProvider());</div><div class="line">				MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;);</div><div class="line">				byte [] md5Bytes = md.digest(clearText.getBytes());</div><div class="line"></div><div class="line">				String result = Hex.encodeHexString(md5Bytes);</div><div class="line"></div><div class="line">			&#125;catch(NoSuchAlgorithmException e)&#123;</div><div class="line">				e.printStrackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		/*【Coomons Codec实现】MD5-加密*/</div><div class="line">		public static void ccMD5()&#123;</div><div class="line">			String clearText = &quot;hello world&quot;;//明文</div><div class="line"></div><div class="line">			String result = DigestUtils.md5Hex(clearTextx.getBytes());</div><div class="line">			</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">****************************************************************</div><div class="line"></div><div class="line">&lt;2&gt;SHA算法</div><div class="line">	 .安全散列算法</div><div class="line">	 .固定长度摘要信息</div><div class="line">	 		算法	摘要长度 	实现方</div><div class="line">	 		SHA-1	  160  		  JDK</div><div class="line">	 		SHA-224	  224         Bocuny Castle</div><div class="line">	 		SHA-256   256         JDK</div><div class="line">	 		SHA-384   384         JDK</div><div class="line">	 		SHA-512   512         JDK</div><div class="line"></div><div class="line">	    /*【JDK实现】SHA1-加密*/</div><div class="line">	 	public static void jdkSHA1()&#123;</div><div class="line"></div><div class="line">	 		String clearText = &quot;hello world&quot;;//明文</div><div class="line"></div><div class="line">	 		try&#123;</div><div class="line">	 			MessageDigest md = MessageDigest.getInstance(&quot;SHA&quot;);</div><div class="line">	 			md.update(clearText.getBytes());</div><div class="line"></div><div class="line">	 			String result = Hex.encodeHexString(md.digest());</div><div class="line">	 		&#125;catch(NoSuchAlgorithmException e)&#123;&#125;</div><div class="line">	 	&#125;</div><div class="line"></div><div class="line">	 	/*【Bocuny Castle实现】SHA1-加密*/</div><div class="line">	 	public staic void bcSHA1()&#123;</div><div class="line">	 		String clearText = &quot;hello world&quot;;</div><div class="line"></div><div class="line">	 		Digest digest = new SHA1Digest();</div><div class="line">	 		digest.update(clearText.getBytes(),0,clearText.getBytes().length);</div><div class="line"></div><div class="line">	 		byte [] sha1Bytes = new byte[digest.getDigestSize()];</div><div class="line">	 		digest.doFinal(sha1Bytes,0);</div><div class="line"></div><div class="line">	 		String result = org.bouncycasetle.util.encoders.Hex.toHexString(sha1Bytes);</div><div class="line">	 	&#125;</div><div class="line"></div><div class="line">	 	/*【Bocuny Castle实现】SHA224-加密*/</div><div class="line">	 	public static void bcSHA224()&#123;</div><div class="line">	 		String clearText = &quot;hello world&quot;;</div><div class="line"></div><div class="line">	 		Digest digest = new SHA22Disgest();</div><div class="line">	 		digest.update(clearText.getBytes(),0,clearText.getBytes().length);</div><div class="line"></div><div class="line">	 		byte [] sha224Bytes = new byte[digest.getDigestSize()];</div><div class="line">	 		digest.doFinal(sha224Bytes,0);</div><div class="line"></div><div class="line">	 		String result = org.bouncycastle.util.encoders.Hex.toHexString(sha224Bytes);</div><div class="line">	 	&#125;</div><div class="line"></div><div class="line">	 	/*【Coomons Codec实现】SHA1-加密*/</div><div class="line">	 	public static void ccSHA1()&#123;</div><div class="line">	 		String clearText = &quot;hello world&quot;;</div><div class="line"></div><div class="line">	 		//两种方式,对于同一个字符的摘要结果,都一样</div><div class="line">	 		String result1 = DigestUitls.sha1Hex(clearText.getBytes());</div><div class="line">	 		String result2 = DigestUitls.sha1Hex(clearText);</div><div class="line">	 	&#125;</div><div class="line"></div><div class="line"></div><div class="line">****************************************************************</div><div class="line">&lt;3&gt;MAC算法</div><div class="line">	.融合了MD和SHA算法的特性,并在基础上加入密钥</div><div class="line">	.也可称为HMAC(keyed-Hash Message Authentication Code)含有密钥的散列函数算法</div><div class="line">			算法		摘要长度		实现方</div><div class="line">			HmacMD2		128 			Bocuncy Castle   【MD系列】</div><div class="line">			HmacMD4	 	128 			Bocuncy Castle</div><div class="line">			HmacMD5     128             JDK</div><div class="line">			HmacSHA1	160 			JDK</div><div class="line">			HmacSHA224  224             Bouncy Castle    【SHA系列】</div><div class="line">			HmacSHA256  256 			JDK</div><div class="line">			HmacSHA384  384             JDK</div><div class="line">			HmacSHA512  512             JDK       </div><div class="line"></div><div class="line"></div><div class="line">		/*【JDK实现】HmacMD5-加密*/</div><div class="line">		public static void jdkHmacMD5()&#123;</div><div class="line">			String clearText = &quot;hello world&quot;;</div><div class="line"></div><div class="line">			try&#123;</div><div class="line">				//A.获取密钥[初始化KeyGenerator + 产生 + 获得]</div><div class="line">				KeyGenerator keyGenerator = KeyGenerator.getInstance(&quot;HmacMD5&quot;);</div><div class="line">				SecreKey secreKey = keyGenerator.generateKey();</div><div class="line"></div><div class="line">				//byte [] key = secreKey.getEncode();//自动生成</div><div class="line">				byte [] key = Hex.decodeHex(new char[]&#123;&apos;a&apos;,&apos;a&apos;,&apos;a&apos;&#125;);//自己指定密钥</div><div class="line"></div><div class="line">				//B.还原密钥</div><div class="line">				SecretKey restoreSecretKey = new SeretKeySpec(key,&quot;HmacMD5&quot;);</div><div class="line"></div><div class="line">				//C.实例化MAC + 初始化摘要</div><div class="line">				MAC mac = Mac.getInstance(restoreSecretKey.getAlgorithm());</div><div class="line">				mac.init(restoreSecretKey);</div><div class="line"></div><div class="line">				//D.执行摘要 + 得到结果</div><div class="line">				byte [] hmacMD5Bytes = mac.doFinal(clearText.getBytes());</div><div class="line">				String result = Hex.encodeHexString(hmacMD5Bytes());</div><div class="line"></div><div class="line">			&#125;catch(Exception e)&#123;&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		/*【Bocuny Castle实现】HmacMD5-加密*/</div><div class="line">		public static void bcHmacMD5()&#123;</div><div class="line">			String clearText = &quot;hello world&quot;;</div><div class="line"></div><div class="line">			HMac hmac = new HMac(new MD5Digest());</div><div class="line">			hmac.init(new KeyParameter(org.bouncycastle.util.encoders.Hex.decode(&quot;aaa&quot;)));</div><div class="line">			hmac.update(clearText.getBytes(),0,clearText.getBytes().length);</div><div class="line"></div><div class="line">			byte [] hmacMD5Bytes = new byte[hmac.getMacSize()];</div><div class="line">			hmac.doFinal(hmacMD5Bytes,0);</div><div class="line"></div><div class="line">			String result = org.bouncycastle.util.encoders.Hex.toHexString(hmacMD5Bytes);</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>消息摘要算法其他类型【Bouncy Castle实现】</p>
<ul>
<li>RipeMD</li>
<li>Tiger</li>
<li>Whirlpool</li>
<li>GOST3411<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="17-4-运用对称加密算法"><a href="#17-4-运用对称加密算法" class="headerlink" title="17_4.运用对称加密算法"></a>17_4.运用对称加密算法</h2><p>&emsp;初等加密的算法,提高了数据安全性,但是密钥管理复杂,密钥传递过程复杂,DES,3DES,AES的这三种的实现方式基本相近,ABE算法常用于.用于移动通信系统加密以及SSH协议的的软件[SSH Client,secureCRT],PBE并不是一个新的加密算法,而是对已有的算法补充,整合<br><br></p>
<p>几种对称加密算法</p>
<ul>
<li>DES算法(Data Encryption Standard ~ 数据加密标准)</li>
<li>三重DES算法(Triple DES 或 DESede)</li>
<li>AES算法【DES替代者，安全程度逐级增加】</li>
<li>PBE算法(Password Based Encryption ~ 基于口令加密)【结合了消息摘要算法和对称加密算法的优点,对已有算法提供宝座】<br><br></li>
</ul>
<p>算法两种库提供实现</p>
<ul>
<li>jdk</li>
<li>BC(Bocuny Castle)<br><br></li>
</ul>
<p>应用场景</p>
<ul>
<li>【DES算法】【AES算法】发送者构建密钥~公布密钥~使用密钥对数据加密~发送加密数据~接受者使用密钥对数据解密</li>
<li>【PBE算法】发送者构建口令~公布口令~构建盐~使用口令,盐对数据加密~发送盐,加密数据~接受者使用口令,盐对数据解密<br><br></li>
</ul>
<p>代码中运用算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;DES算法**************************************************************</div><div class="line">		public static void jdkDES(String clearText)&#123; //参数：明文,要被加密</div><div class="line">			try&#123;</div><div class="line">				//A-生成Key</div><div class="line">				KeyGenerator keyGenerator = KeyGernerator.getInstance(&quot;DES&quot;);</div><div class="line">				keyGenerator.init(56); //指定key【默认是56位】</div><div class="line">				SecreKey secretKey = keyGenerator.generateKey();</div><div class="line">				byte [] bytesKey = secretKey.getEncoded();</div><div class="line"></div><div class="line"></div><div class="line">				//B-Key转换</div><div class="line">				DESKeySpec desKeySpec = new DESKeySpec(bytesKey);</div><div class="line">				SecreteKeyFactory factory = SecretKeyFacotry.getInstance(&quot;DES&quot;);</div><div class="line">				Key convertSecretKey = factory.generateSecrete(desKeySpec);</div><div class="line"></div><div class="line">				//C.加密</div><div class="line">				Cipher cipher = Cipher.getInstance(&quot;DES/ECB/PKCSSPadding&quot;);</div><div class="line">				cipher.init(Cipher.ENCRYPT_MOOD,convertSecretKey);//加密模式,密钥</div><div class="line">				byte [] result = cipher.doFinaly(clearText.getBytes());</div><div class="line">				System.out.println(&quot;加密结果(十六进制)：&quot; + Hex.encodeHexString(result));</div><div class="line"></div><div class="line">				//D.解密</div><div class="line">				ciper.init(Cipher.DECRYTPT_MODE,convertSecretKey);//解密模式,密钥</div><div class="line">				result = ciper.doFinal(result);</div><div class="line">				System.out.println(&quot;解密结果(字符串):&quot; + new String(result));</div><div class="line">			&#125;catch(Exception e)&#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			 </div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;三重DES算法*************************************************************</div><div class="line">		public static void jdk3DES(String clearText)&#123; //参数：明文,要被加密</div><div class="line">			try&#123;</div><div class="line">				//A-生成Key</div><div class="line">				KeyGenerator keyGenerator = KeyGernerator.getInstance(&quot;DESede&quot;);</div><div class="line">				//keyGenerator.init(168); //DESede必须是112 or 168</div><div class="line">				keyGenerator.init(new SecureRandom());//生成默认长度(根据不同的算法)</div><div class="line">				SecreKey secretKey = keyGenerator.generateKey();</div><div class="line">				byte [] bytesKey = secretKey.getEncoded();</div><div class="line"></div><div class="line"></div><div class="line">				//B-Key转换</div><div class="line">				DESedeKeySpec desKeySpec = new DESedeKeySpec(bytesKey);</div><div class="line">				SecreteKeyFactory factory = SecretKeyFacotry.getInstance(&quot;DESede&quot;);</div><div class="line">				Key convertSecretKey = factory.generateSecrete(desKeySpec);</div><div class="line"></div><div class="line">				//C.加密</div><div class="line">				Cipher cipher = Cipher.getInstance(&quot;DESede/ECB/PKCSSPadding&quot;);</div><div class="line">				cipher.init(Cipher.ENCRYPT_MOOD,convertSecretKey);//加密模式,密钥</div><div class="line">				byte [] result = cipher.doFinaly(clearText.getBytes());</div><div class="line">				System.out.println(&quot;3DES加密结果(十六进制)：&quot; + Hex.encodeHexString(result));</div><div class="line"></div><div class="line">				//D.解密</div><div class="line">				ciper.init(Cipher.DECRYTPT_MODE,convertSecretKey);//解密模式,密钥</div><div class="line">				result = ciper.doFinal(result);</div><div class="line">				System.out.println(&quot;3DES解密结果(字符串):&quot; + new String(result));</div><div class="line">			&#125;catch(Exception e)&#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			 </div><div class="line">		&#125;</div><div class="line"></div><div class="line">&lt;3&gt;AES算法**************************************************************</div><div class="line"></div><div class="line">		public static void jdkAES(String clearText)&#123;</div><div class="line">			try&#123;</div><div class="line">				//A.生成KEY</div><div class="line">				KeyGenerator keyGenerator = KeyGeneraator.getInstance(&quot;AES&quot;);</div><div class="line">				keyGenerator.init(128);</div><div class="line">				SecraKay secretKey = keyGenerator.generateKey();</div><div class="line">				byte [] keyBytes = secretKey.getEncoded();</div><div class="line"></div><div class="line">				//B.key转换</div><div class="line">				Key key new SecreKeySpec(keyBytes,&quot;AES&quot;);</div><div class="line"></div><div class="line">				//C.加密</div><div class="line">				Cipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);</div><div class="line">				cipher.init(Ciphert.ENCRYPT_MODE,key);</div><div class="line">				byte [] result = cipher.doFinal(clearText.getBytes());</div><div class="line">				System.out.println(&quot;AES加密结果(16进制):&quot; + Base64.encodeBase64String(result));</div><div class="line"></div><div class="line">				//D.解密</div><div class="line">				cipher.init(Cipher.DECRYPT_MODE,key);</div><div class="line">				result = cipher.doFinal(result);</div><div class="line">				System.out.println(&quot;AES解密结果:&quot; + new String(result));</div><div class="line"></div><div class="line">			&#125;catch(Exception e)&#123;</div><div class="line">				e.printStrackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;PBE算法**************************************************************</div><div class="line"></div><div class="line">		public static void jdkPBE(String clearText)&#123;</div><div class="line">			try&#123;</div><div class="line">				//A-初始化盐【通过额外引入东西去扰乱,通常说叫扰码】</div><div class="line">				SecureRandom random = new SecureRandom();</div><div class="line">				byte [] salt = random.generateSeed(8);//8位,随机数产生盐</div><div class="line"></div><div class="line">				//B-口令与密钥</div><div class="line">				String password = &quot;study&quot;;//定义密码</div><div class="line">				PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());</div><div class="line">				SecretKeyFactory factory = SecretKeyFactory.getInstance(&quot;PBEWITHMD5andDES&quot;);</div><div class="line">				Key key = factory.generateSecret(pbeKeySpec);</div><div class="line"></div><div class="line"></div><div class="line">				//C.加密</div><div class="line">				PBEParameterSpec pbeParameterSpec = new  PBEParameterSpec(salt,100);</div><div class="line">				Cipher cipher = Cipher.getInstance(&quot;PBEWITHMD5SanDES&quot;);</div><div class="line">				cipher.init(Cipher.ENCRYPT_MODE,key,pbeParameterSpec);</div><div class="line">				byte [] result = cipher.doFinal(clearText.getBytes());</div><div class="line">				System.out.println(&quot;PBE加密结果(十六进制):&quot; + Base64.encodeBase64String(result));</div><div class="line"></div><div class="line">				//D.解密</div><div class="line">				ciper.init(Cipher.DECRYPT_MODE,key,pbeParameterSpec);</div><div class="line">				result = cipher.doFinal(result);</div><div class="line">				System.out.println(&quot;PBE解密结果:&quot; + new String(result));</div><div class="line"></div><div class="line">		&#125;catch(Exception e)&#123;</div><div class="line">			e.printStrackTrace();</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="17-5-运用非对称加密算法"><a href="#17-5-运用非对称加密算法" class="headerlink" title="17_5.运用非对称加密算法"></a>17_5.运用非对称加密算法</h2><p>&emsp;高级,双保险,密钥分开【公钥,私钥~成对出现】,提高了<br><br></p>
<p>几种类型</p>
<ul>
<li>DH(Diffie-Hellman)密钥交换算法【构建本地密钥,只有jdk提供实现】</li>
<li>RSA算法【基于因子分解,速度较慢,数据加密&amp;数字前面,jdk和BC提供实现】</li>
<li>ElGamal【基于离散对数,只有公钥加密算法,只有BC提供实现】</li>
<li>ECC(Elliptical Curve CrypTography)椭圆曲线加密<br><br></li>
</ul>
<p>代码运用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;DH算法********************************************************</div><div class="line">		/*</div><div class="line">			简单思路和类说明：</div><div class="line">				a.初始化发送密钥(</div><div class="line">								  KeyPairGenerator ~ 生成KeyPair的类</div><div class="line">								  KeyPair  ~ 得到公钥,私钥</div><div class="line">							      PublicKey类)</div><div class="line">				b.初始化接收方密钥(</div><div class="line">									KeyFactory</div><div class="line">									X509EncodedeKeySpec ~ 根据ASN.1标准进行密钥编码</div><div class="line">									DHPublicKey ~ PublicKey的具体形式</div><div class="line">									DHParameterSpec ~ DH算法使用参数的集合</div><div class="line">									KeyPairGenerator </div><div class="line">									PrivateKey类)</div><div class="line">				c.密钥构建(</div><div class="line">								KeyAgreeement ~  提供密钥一致性(或密钥交换)协议的功能,主要出现在DH算法中</div><div class="line">								SecreteKey ~ 生成一个分组的秘密密钥,也提供一些相应的类型安全的操作,父接口是Key</div><div class="line">								KeyFacotry</div><div class="line">								X509EncodedKeySpec</div><div class="line">								PublicKey)</div><div class="line">				d.Cipher(</div><div class="line">							Cipher ~ 为加密和解密提供密码的功能)</div><div class="line"></div><div class="line"></div><div class="line">			【初始化DH算法密钥对】</div><div class="line">			发送者构建发送方密钥</div><div class="line">				~ 公布发送方密钥</div><div class="line">				~ 接收者使用发送方密钥,构建自己密钥</div><div class="line">					~公布接收方公钥</div><div class="line"></div><div class="line">			【DH算法加密消息传递】</div><div class="line">			发送方使用本地密钥加密信息</div><div class="line">				~发送加密信息</div><div class="line">				~接受者使用本地密钥及诶系消息</div><div class="line"></div><div class="line">		*/</div><div class="line">		public static void jdkDH(String clearText)&#123;</div><div class="line">			try&#123;</div><div class="line">				//A.初始化发送方密钥</div><div class="line">				KeyPairiGenerator senderKeyPairGenerator = KeyPairGenerator.getInstance(&quot;DH&quot;);</div><div class="line">				sendKeyPairGenerator.initialize(512);//长度</div><div class="line">				KeyPair senderKeyPair = senderKeyPairGenerator.generateKeyPair();</div><div class="line">		 		byte [] senderPublicKeyEnc = senderKeyPair.getPbulic().getEncoded();//发送方公钥,发送给接收方(网络,文件,序列化操作...)		 </div><div class="line"></div><div class="line"></div><div class="line">		 		//B.初始化接收方密钥</div><div class="line">		 		KeyFactory receiverKeyFactory = KeyFactory.getInstance(&quot;DH&quot;);</div><div class="line">		 		X509EncodeKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(senderPublicKeyEnc);</div><div class="line">		 		PublicKey receiverPublicKey = receiverKeyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line">		 		DPparameterSpec dhParameterSpec = ((DHPublicKey)receiverPublicKey).getParams();</div><div class="line">		 		KeyPairGenerator receiverKeyPairGenerator = KeyPairGenerator.getInstance(&quot;DH&quot;);</div><div class="line">		 		receiverKeyPairGenerator.initialize(dhParameterSpec);</div><div class="line">		 		KeyPair receiverKeypair = receiverKeyPairGenerator.generateKeyPair();</div><div class="line">		 		byte [] receiverPublicKeyEnc = receiverKeypair.getPublic().getEncoded();</div><div class="line"></div><div class="line"></div><div class="line">		 		//C.密钥构建</div><div class="line">		 		KeyAgreement receiverKeyAgreement = KeyAgreement.getInstance(&quot;DH&quot;);</div><div class="line">		 		receiverKeyAgreement.init(receiverPrivateKey);</div><div class="line">		 		receiverKeyAgreement.doPhase(receiverPbulic,true);</div><div class="line">		 		SecretKey receiverDesKey = receiverKeyAgreement.generateSecrete(&quot;DES&quot;);//接收方key</div><div class="line"></div><div class="line"></div><div class="line">		 		KeyFactory senderKeyFactory = KeyFactory.getInstance(&quot;DH&quot;);</div><div class="line">		 		x509EncodeKeySpec = new X509EncodedKeySpec(receiverPublicKeyEnc);</div><div class="line">		 		PublicKey senderPublicKey = senderKeyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line">		 		KeyAgreement senderKeyAgreement = KeyAgreeemnt.getInstance(&quot;DH&quot;);</div><div class="line">		 		senderKeyAgreement.init(senderKeyPair.getPrivate());//初始化</div><div class="line">		 		senderKeyAgreement.doPhase(senderPublicKey,true);</div><div class="line">		 		SecretKey senderDesKey = senderKeyAgreement.generateSecrete(&quot;DES&quot;);/发送方key</div><div class="line"></div><div class="line">		 		if(Objects.equals(receiverDesKey,senderDesKey))&#123;</div><div class="line">		 			System.out.println(&quot;双方密钥相同&quot;);</div><div class="line">		 		&#125;</div><div class="line"></div><div class="line">		 		//D.加密</div><div class="line">		 		Cipher cipher = Cipher.getInstance(&quot;DES&quot;);</div><div class="line">		 		cipher.init(Cipher.ENCRYPT_MODE，senderDesKey);</div><div class="line">		 		byte [] result = cipher.doFinal(clearText.getBytes());</div><div class="line">		 		System.out.println(&quot;DH加密(十六进制):&quot; + Base64.encodeBase64String(result));</div><div class="line"></div><div class="line">		 		//E.解密</div><div class="line">		 		cipher.init(Cipher.DECRYPT_MODE,receiverDesKey);</div><div class="line">		 		result = cipher.doFinal(result);</div><div class="line">		 		System.out.println(&quot;DH解密结果:&quot; + new String(result));</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">			&#125;catch(Exception e)&#123;&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;1&gt;RSA算法********************************************************</div><div class="line">		/*</div><div class="line">			【RSA算法传输数据~私加公解】</div><div class="line">			发送者使用私钥加密数据</div><div class="line">				~发送加密数据</div><div class="line">					~接受者使用公钥数据</div><div class="line"></div><div class="line">			【RSA算法传输数据-公加私解】</div><div class="line">			发送者使用公钥加密数据</div><div class="line">				~发送加密数据</div><div class="line">					~接受者使用私钥解密数据</div><div class="line"></div><div class="line">		*/</div><div class="line">		public static void jdkRSA(String clearText)&#123;</div><div class="line">			try&#123;</div><div class="line">				//A.初始化密钥</div><div class="line">				 KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;RSA&quot;);</div><div class="line">				 keyPairGenerator.initialize(512);</div><div class="line">				 KeyPair keyPair = keyPairGenerator.generateKeyPair();</div><div class="line">				 RSAPublicKey rsaPublicKey = (RSAPublicKey)keyPair.getPublic();</div><div class="line">				 RSAPrivateKey rsaPrivateKey = (RSAPrivateKey)keyPair.getPrivate(); </div><div class="line">				 System.out.println(&quot;公钥:&quot; + Base64.encodeBase64String(rsaPublicKey.getEncoded()));</div><div class="line">				 System.out.println(&quot;私钥:&quot; + Base64.encodeBase64String(rsaPrivateKey.getEncoded()));</div><div class="line"></div><div class="line"></div><div class="line">				 //B-1.加密[私钥加密,公钥解密]</div><div class="line">				 PKCS8EncodedKeySpec pkscs8EncodedKeySpec = new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());</div><div class="line">				 KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);</div><div class="line">				 PrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line"></div><div class="line">				 Cipher cipher = Cipher.getInstance(&quot;RSA&quot;);</div><div class="line">				 cipher.init(Cipher.ENCRYPT_MODE,privateKey);</div><div class="line">				 byte [] result = cipher.doFinal(clearText.getBytes());</div><div class="line">				 System.out.println(&quot;RSA加密(十六进制)-私加公解:&quot; + Bse64.encodeBase64String(result));</div><div class="line"></div><div class="line">				 //B-2.解密[私钥加密,公钥解密]</div><div class="line">				 X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(rsaPublicKey.getEncoded());</div><div class="line">				 keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);</div><div class="line">				 PublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line"></div><div class="line">				 cipher.init(Cipher.DECRYPT_MODE,publicKey);</div><div class="line">				 result = cipher.doFinal(result);</div><div class="line">				 System.out.prtinln(&quot;RSA解密(字符串)-私加公解:&quot; + new String(result))；</div><div class="line"></div><div class="line"></div><div class="line">				 //C-1.加密[公钥加密,私钥解密]</div><div class="line">				 x509EncodedKeySpec  = new X509EncodedKeySpec(rsaPublicKey.getEncoded());</div><div class="line">				 keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);</div><div class="line">				 publicKey = keyFactory.geteratePublic(x509EncodedKeySpec);</div><div class="line">				 cipher = Cipher.getInstance(&quot;RSA&quot;);</div><div class="line">				 cipher.init(Cipher.ENCRYPT_MODE,publicKey);</div><div class="line">				 result = cipher.doFinal(clearText.getBytes());</div><div class="line">				 System.out.println(&quot;RSA加密(十六进制)-公加私解:&quot; + Bse64.encodeBase64String(result));</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">				 //C-2.解密[公钥加密,私钥解密]</div><div class="line">				 pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());</div><div class="line">				 keyFactory = KeyFactory.getInstance(&apos;RSA&apos;);</div><div class="line">				 privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line">				 cipher = Cipher.getInstance(&quot;RSA&quot;);</div><div class="line">				 cipher.init(Cipher.DECRYPT_MODE,privateKey);</div><div class="line">				 result = cipher.doFinal(result);</div><div class="line">				 System.out.prtinln(&quot;RSA解密(字符串)-公加私解:&quot; + new String(result))；</div><div class="line"></div><div class="line"></div><div class="line">		    &#125;catch(Exception e)&#123;&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;1&gt;ElGmal算法********************************************************</div><div class="line">		/*</div><div class="line">			【构建密钥对及加密数据传输过程】</div><div class="line">			接受者构建密钥对</div><div class="line">				~公布密钥</div><div class="line">				~发送者使用公钥加密数据</div><div class="line">					~发送加密数据</div><div class="line">					~接受者使用私钥解密数据</div><div class="line">		*/</div><div class="line">		public static void bcElGmail(String clearTexte)&#123;</div><div class="line">			//公钥加密,私钥解密</div><div class="line">			Security.addProvide(new BouncyCastleProvider());</div><div class="line"></div><div class="line">			//A.初始化密钥</div><div class="line">			AlgorithmParameterGenerator algorithmParameterGenerator = AlgroithmParameterGenerator.getInstance(&quot;ElGmal&quot;);</div><div class="line">			algorithmParameterGenerator.init(256);</div><div class="line">			AlgorithmParameters algorithmParameters = algorithmParameterGenerator.generateParameters();</div><div class="line">			DHParameterSpec dhParameterSpec = (DHParameterSpec)algorithmParameters.getParameterSpec(DHParameterSpec.class);</div><div class="line"></div><div class="line">			KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;ElGamal&quot;);</div><div class="line">			keyPairGenerator.initialize(dhParameterSpec, new SecureRandom());</div><div class="line">			KeyPair keyPair = keyPairGenerator.generateKeyPair();</div><div class="line"></div><div class="line">			PublicKey elGamalPublicKey = keyPair.getPublic();//公钥</div><div class="line">			PrivateKey elGamilPrivateKey = keyPair.getPrivate();//私钥</div><div class="line"></div><div class="line">			//B.加密解密操作【与其他算法类似】</div><div class="line">				。。。。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="17-6-运用数字签名算法"><a href="#17-6-运用数字签名算法" class="headerlink" title="17_6.运用数字签名算法"></a>17_6.运用数字签名算法</h2><p>&emsp;带有密钥(公钥,私钥)的消息摘要算法,使用私钥前面,使用公钥进行验证,用于验证数据完整性,认证数据来源,抗否认,遵循DSS(Digital Signature Standard~数字签名标准)</p>
<p>数字签名算法几种类型</p>
<ul>
<li>RSA算法【包括MD.SHA两类,有JDK和BC提供实现】</li>
<li>DSA(Digital Signature Algorithm)算法 【仅包含数字签名,证书没法进行加解密,JDK和BC提供实现】</li>
<li>ECDSA(Elliptic Curve Digital Signature Algorithm~椭圆区县数字签名)算法【速度快,强度高,签名短,有JDK(7.0之前是没有提供的)和BC提供实现,应用与微软的产品,提供序列号的算法】</li>
</ul>
<p>代码运用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;RSA算法*****************************************************************</div><div class="line">		/*</div><div class="line">			【构建密钥对】</div><div class="line">			发送方构建密钥对</div><div class="line">				~公布密钥</div><div class="line"></div><div class="line">			【发送数据】</div><div class="line">			发送方使用私钥对数据签名</div><div class="line">				~发送签名,数据</div><div class="line">				~接收方使用公钥,签名验证数据</div><div class="line">		*/</div><div class="line">		public static void jdkRSA(String clearText)&#123;</div><div class="line">			try&#123;</div><div class="line">				//A.初始化密钥</div><div class="line">				KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstrance(&quot;RSA&quot;);</div><div class="line">				keyPairGenerator.initialize(512);</div><div class="line">				KeyPair keyPair = keyPairGenerator.generateKeyPair();</div><div class="line">				RSAPublicKey rsaPublicKey = (RSAPublicKey)keyPair.getPublic();//公钥验证</div><div class="line">				RSAPrivateKey rsaPrivateKey = (RSAPrivateKey)keyPair.getPrivate();/私钥签名</div><div class="line"></div><div class="line">				//B.执行签名</div><div class="line">				PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PCKS8EncodedKeySpec(rsaPrivateKey.getEncoded());//私钥进行签名</div><div class="line">				KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);</div><div class="line">				PrivateKey privateKey = kayFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line">				Signature signature = Signature.getInstance(&quot;MD5withRSA&quot;);</div><div class="line">				signature.initSign(privateKey);</div><div class="line">				signature.update(clearText.getBytes());//处理明文</div><div class="line"></div><div class="line">				byte [] result = signature.sign();</div><div class="line">				System.out.println(&quot;RSA的jdk(十六进制):&quot;+ hex.encodeHexString(result));</div><div class="line"></div><div class="line">				//C.验证签名</div><div class="line">				X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(rsaPublicKey.getEncoded);//公钥验证签名</div><div class="line">				keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);</div><div class="line">				PublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line">				signature = Signature.getInstance(&quot;MD5withRSA&quot;);</div><div class="line">				signature.initVerify(publicKey);</div><div class="line">				signature.update(clearText.getBytes());</div><div class="line">				boolean bool = signature.verify(result);</div><div class="line">				System.out.println(&quot;验证结果:&quot;+ bool);</div><div class="line"> </div><div class="line">			&#125;catch(Exception e)&#123;&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;DSA算法*****************************************************************</div><div class="line"></div><div class="line">		/*</div><div class="line">			【构建密钥对】</div><div class="line">			 发送方构建密钥对</div><div class="line">			 	~公布密钥</div><div class="line"></div><div class="line">			 【发送数据】</div><div class="line">			 发送方使用私钥对数据签名</div><div class="line">			 	~发送签名,数据</div><div class="line">			 	~接收方使用公钥,签名验证数据</div><div class="line">		*/</div><div class="line">		public static void jdkDSA(String clearText)&#123;</div><div class="line">			try&#123;</div><div class="line">				//A.初始化密钥</div><div class="line">				KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;DSA&quot;);</div><div class="line">				keyPairGenerator.initialize(512);</div><div class="line">				KeyPair keyPair = keyPairGenerator.generateKeyPair();</div><div class="line">				DSAPublicKey dsaPublicKey = (DSAPublicKey)keyPair.getPublic();</div><div class="line">				DSAPrivateKey dsaPrivateKey = (DSAPrivateKey)keyPair.getPrivate();</div><div class="line"></div><div class="line">				//B.执行签名</div><div class="line">				PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(dsaPrivateKey.getEncoded());</div><div class="line">				KeyFactory keyFactory = KeyFactory.getInstance(&quot;DSA&quot;);</div><div class="line">				PrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line">				Signature signature = Signature.getInstance(&quot;SHA1withDSA&quot;);</div><div class="line">				signature.initSign(privateKey);</div><div class="line">				signature.update(clearText.getBytes());</div><div class="line">				byte [] result = signature.sign();</div><div class="line">				System.out.println(&quot;DSA数字签名(十六进制):&quot; + Hex.encodeHexString(result));</div><div class="line"></div><div class="line">				//C.验证签名</div><div class="line">				X509EncodedKey Spec x509EncodedKeySpec = new X509EncodedKeySpec(dsaPublicKey.getEncoded());</div><div class="line">				keyFactory = KeyFactory.getInstance(&quot;DSA&quot;);</div><div class="line">				PublicKey publicKey = keyFactory.getInstance(&quot;DSA&quot;);</div><div class="line">				signature.initVerify(publicKey);</div><div class="line">				signature.update(clearText.getBytes());</div><div class="line">				boolean bool = signature.verify(result);</div><div class="line">				System.out.println(&quot;DAS数字签名验证结果:&quot; +  bool);</div><div class="line"></div><div class="line"></div><div class="line">			&#125;catch(Exception e)</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;ECDSA算法*****************************************************************</div><div class="line">		/*</div><div class="line">			【构建密钥对】</div><div class="line">			 发送方构建密钥对</div><div class="line">			 	~公布密钥</div><div class="line"></div><div class="line">			 【发送数据】</div><div class="line">			 发送方使用私钥对数据签名</div><div class="line">			 	~发送签名,数据</div><div class="line">			 	~接收方使用公钥,签名验证数据</div><div class="line">		*/</div><div class="line">		public static void jdkECDSA(String clearText)&#123;</div><div class="line">			try&#123;</div><div class="line">				//A.初始化密钥</div><div class="line">				KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;EC&quot;);</div><div class="line">				KeyPairGenerator.initialize(256);//初始长度</div><div class="line">				KeyPair keyPair = keyPairGenerator.generateKeyPair();</div><div class="line">				ECPublickEey ecPublicKey = (ECPublicKey)keyPair.getPublic();</div><div class="line">				ECPrivate ecPrivateKey = (ECPrivateKey)keyPair.getPrivate();</div><div class="line"></div><div class="line">				//B.执行签名</div><div class="line">				PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PCKS8EncodedKeySpec(ecPrivateKey.getEncoded());</div><div class="line">				KeyFactory keyFactory = KeyFactory.getInstance(&quot;EC&quot;);</div><div class="line">				PrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</div><div class="line">				Signature signature = Signature.getInstance(&quot;SHA1withECDSA&quot;);</div><div class="line">				signature.initSign(privateKey);</div><div class="line">				signature.update(clearText.getBytes());</div><div class="line">				byte [] result = signature.sign();</div><div class="line">				System.out.println(&quot;ECDSA数字签名(十六进制):&quot; + result);</div><div class="line"></div><div class="line">				//C.验证签名</div><div class="line">				X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(ecPublicKey.getEncoded());</div><div class="line">				keyFactory = KeyFactory.getInstance(&quot;EC&quot;);</div><div class="line">				PublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</div><div class="line">				signature.initVerify(publicKey);</div><div class="line">				signature.update(clearText.getBytes());</div><div class="line">				boolean bool = signature.verify(result);</div><div class="line">				System.out.println(&quot;ECDSA数字签名结果:&quot; + boool);</div><div class="line"></div><div class="line"></div><div class="line">			&#125;catch(Exception e)&#123;&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<h2 id="-11"><a href="#-11" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="18-1-JSP开发"><a href="#18-1-JSP开发" class="headerlink" title="18_1.JSP开发"></a>18_1.JSP开发</h2><p>&emsp;JSP全名Java Server Pages,其根本是一个简化的Servlet设计,实现了在Java中使用HTML标签.JSP是一种动态网页技术,标准是JAVAEE标准.JSP与Servlet一样,实在服务器端执行的<br><br></p>
<p>常见动态网站开发技术对比</p>
<ul>
<li>JSP【Java平台,安全性高,适合开发大型的,企业级的Web应用程序】</li>
<li>ASP.net【.Net平台,简单易学,可视化组件开发,但是安全性以及跨平台性差(仅支持微软的产品)】</li>
<li>Php【简单,高效,成本低开发周期短,特别适合中小型企业的Web应用开发(LAMP(开发环境组合):Linux+Apache+MySQL+PHP)】<br><br></li>
</ul>
<p>会话跟踪技术的四种方法</p>
<ul>
<li>隐藏表单域 【input的type属性设置为hidden,适合不需要大量数据存储的会话应用】</li>
<li>URL重写 【URL后面附加参数】</li>
<li>Cookie</li>
<li>Session 【将对象捆绑到会话】<br><br></li>
</ul>
<p>JSP状态管理</p>
<ul>
<li>http协议的无状态性</li>
<li>两种保存用户状态的机制</li>
<li>Session与Cookie对比<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;http协议的无状态性</div><div class="line">	指当浏览器发送请求给服务器的时候,服务器响应客户端请求，</div><div class="line">	但是当同一个浏览器再次发送请求给服务器的时候,服务器并不知道它就是刚才哪个浏览器</div><div class="line">	【服务器不会去记得你】</div><div class="line"></div><div class="line">&lt;2&gt;两种保存用户状态的机制</div><div class="line">	a.Cookie【是WEb服务器保存在客户端的一系列文本信息】</div><div class="line">		(1)作用</div><div class="line">			.对特定对象的追踪</div><div class="line">			.保存用户网页浏览器记录与习惯</div><div class="line">			.简化登录</div><div class="line">		(2)使用</div><div class="line">			Cookie newCookie = new Cookie(String key, Object value);//创建</div><div class="line">			response.addCookie(newCookie);//添加</div><div class="line">			Cookie [] cookies = request.getCookies();//读取</div><div class="line">			String username = URLDecoder.decode(cookies[0].getValue(),&quot;utf-8&quot;);//获取Cookie值与解码</div><div class="line">		(3)常用方法</div><div class="line">			void setMaxAge(int expiry)   __设置cookie有效期(单位:s/秒)</div><div class="line">			void setValue(String value)  __创建Cookie后,对Cookie进行赋值</div><div class="line">			String getName()			 __获取cookie名称</div><div class="line">			String getValue()  			 __获取cookie值</div><div class="line">			int getMaxAge()  			 __获取cookie有效时间(单位:s/秒)</div><div class="line"></div><div class="line">	b.Session</div><div class="line"></div><div class="line">&lt;3&gt;Session与Cookie对比</div><div class="line">	Session    	~   	Cookie</div><div class="line">	[在服务器端保存用户信息]  ~		[在客户端保存用户信息]</div><div class="line">	[保存的是Object类型]      ~		[保存的是String类型]</div><div class="line">	[随会话的结束而将储存的数据销毁] 	~	[cookie可以长期保存在客户端]</div><div class="line">	[保存重要的信息]  	~ 	[保存不重要的信息] </div><div class="line">	[可以保存任意大小的对象类型]   ~ 	[保存cookie个数,大小都有限制]</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>两种表单提交方式【Get和Post】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;代码</div><div class="line">	&lt;form name=&quot;regForm&quot; action=&quot;提交之后动作&quot; method=&quot;提交方式&quot;&gt;&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;2&gt;区别</div><div class="line">	a.get </div><div class="line">		以明文的方式通过URL提交数据,数据在URL可以看到.提交的数据最多不超过2KB，安全性较低,但效率比post高。适合提交数据量不打,安全性不高的数据.比如:搜索,查询等功能</div><div class="line">	b.post</div><div class="line">		将用户提交的信息封装在HTML HEADER内.适合提交数据量大,安全性高的用户信息.比如:注册,修改,上传等功能</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>两种请求处理</p>
<ul>
<li>【请求转发】服务器行为,<code>reqeust.getRequestDispatcher(&quot;../xxx.jsp&quot;).forward(request,response);</code>是一次请求,转发后请求对象会保存,地址栏的URL地址不会改变</li>
<li>【请求重定向】客户端行为,<code>response.sendRedirect(&quot;../xxx.jsp&quot;)</code>,从本质上讲等同于两次请求,前一次的请求对象不会保存,地址栏的URL会改变<br><br></li>
</ul>
<p>JavaBean设计</p>
<ul>
<li>简介</li>
<li>设计原则</li>
<li>在jsp页面中使用</li>
<li>作用域【scope=”作用域”】</li>
<li>Model1模式<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;简介</div><div class="line">	JavaBeans就是符合某种特定的规范的Java类,使用JavaBeans的好处是解决代码的重复编写,减少代码冗(rong)余,功能区分明确,提高了代码的维护性</div><div class="line"></div><div class="line">&lt;2&gt;设计原则</div><div class="line">	.共有类</div><div class="line">    .包含无参公有构造方法</div><div class="line">    .属性私有</div><div class="line">    .getter和setter方法</div><div class="line"></div><div class="line">&lt;3&gt;在jsp页面中使用</div><div class="line">	a.普通方式</div><div class="line">		&lt;%@ page import=&quot;com.po.User&quot;%&gt; &lt;%--page指令导入User类--%&gt;</div><div class="line">		&lt;%</div><div class="line">			User user = new User();</div><div class="line">				user.setName(&quot;皮皮&quot;);</div><div class="line">				user.setPassword(&quot;123456&quot;);</div><div class="line">		%&gt;</div><div class="line">		用户名:&lt;%=user.getName() %&gt;</div><div class="line">		密码:  &lt;%=user.getPassword() %&gt;</div><div class="line"></div><div class="line">	b.使用动作标签</div><div class="line">		&lt;jsp:userBean id=&quot;user&quot; class=&quot;com.po.User&quot; scope=&quot;page&quot; /&gt;</div><div class="line"></div><div class="line">		&lt;!--根据提交表单自动匹配所有元素--&gt;</div><div class="line">		&lt;jsp:serProperty name=&quot;user&quot; property=&quot;*&quot; /&gt;</div><div class="line"></div><div class="line">		用户名:&lt;jsp:getProperty name=&quot;user&quot; property=&quot;name&quot; /&gt;</div><div class="line">		用户值:&lt;jsp:getProperty name=&quot;user&quot; property=&quot;password&quot; /&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;作用域【scope=&quot;作用域&quot;】</div><div class="line">	a.page  __仅在当前页面有效</div><div class="line">	b.request __可以通过HttpRequest.getAttribute()获得JavaBean对象</div><div class="line">	c.session __可以通过HttpSession.getAttribute()获取JavaBean对象</div><div class="line">	d.application __可以通过application.getAttribute()获得JavaBean对象</div><div class="line"></div><div class="line"></div><div class="line">&lt;5&gt;Model1模式</div><div class="line">	a.前景</div><div class="line">		Model模型出现前,整个Web应用的情况:几乎全部由JSP页面组成,JSP页面接收处理客户端请求,对请求处理后直接做出响应</div><div class="line"></div><div class="line">		弊端：在界面层充斥大量的业务逻辑的代码和数据访问层代码,web程序的可扩展性和可维护性非常差</div><div class="line"></div><div class="line">	b.模型</div><div class="line">				 (1)请求	   (2)            (3)</div><div class="line">		1.浏览器 ~~~~~~~&gt; JSP &lt;~~~&gt; JavaBean &lt;~~~&gt; 企业数据库</div><div class="line">				&lt;~~~~~~~</div><div class="line">			     (4)响应</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>JSP动作元素</p>
<ul>
<li>定义</li>
<li>标签分类</li>
<li>include指令与include动作的区别<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;定义</div><div class="line">	JSP动作元素(action elements),动作元素为请求处理阶段提供信息。动作元素遵循XML元素语法,有一个包含元素名的开始标签,可以有属性,可选的内容,与开始标签匹配的结束标签</div><div class="line"></div><div class="line">&lt;2&gt;标签分类</div><div class="line">	a.存储JavaBeans有关的</div><div class="line">		&lt;jsp:userBean&gt;</div><div class="line">			例：&lt;jsp:userBean id=&quot;标识符&quot; class=&quot;包名.类名&quot; scope=&quot;作用范围&quot; /&gt;</div><div class="line">		&lt;jsp:setProperty&gt;</div><div class="line">			例:【四种形式】</div><div class="line">				&lt;jsp:setProperty name=&quot;Java实例名(id名)&quot; property=&quot;*&quot; /&gt; //根据表单自动匹配所有属性</div><div class="line">				&lt;jsp:setProperty name=&quot;&quot; property=&quot;属性名&quot; /&gt;  //仅自动匹配指定属性名</div><div class="line">				&lt;jsp:setProperty name=&quot;&quot; property=&quot;属性名&quot; value=&quot;属性值&quot; /&gt; //手工设置属性为指定值</div><div class="line">				&lt;jsp:setProperty name=&quot;&quot; property=&quot;属性名&quot; param=&quot;属性值为reqeust的指定参数名的值&quot;&gt;</div><div class="line">		&lt;jsp:getProperty&gt;</div><div class="line">			例：&lt;jsp:getProperty name=&quot;Java实例名(id)&quot; property=&quot;属性名&quot; /&gt;//获取指定对象的属性值</div><div class="line"></div><div class="line">	b.JSP1.2就开有的基本元素,6个动作元素</div><div class="line">		&lt;jsp:include&gt;</div><div class="line">			例:&lt;jsp:include page=&quot;被包含的页面&quot; flush=&quot;true | false&quot; /&gt;</div><div class="line">					//flush表示被包含的页面是否从缓冲区读取</div><div class="line">		&lt;jsp:forward&gt;</div><div class="line">			例:&lt;jsp:forward page=&quot;URL&quot; /&gt; //请求转发,等同于request.getRequestDispatcher(&quot;/url&quot;).forward(request,response);</div><div class="line">		&lt;jsp:param&gt;</div><div class="line">			例:&lt;jsp:param name=&quot;参数名&quot; value=&quot;参数值&quot; /&gt; //请求参数,可传递新的也可由修改原有的参数【与&lt;jsp:forward一起使用,作为其子标签】</div><div class="line">		&lt;jsp:plugin&gt;</div><div class="line">		&lt;jsp:params&gt;</div><div class="line">		&lt;jsp:fallback&gt;</div><div class="line">	c_1.JSP2.0新增的6个元素,与JSP Document有关</div><div class="line">		&lt;jsp:root&gt;</div><div class="line">		&lt;jsp:declaration&gt;</div><div class="line">		&lt;jsp:scriptlet&gt;</div><div class="line">		&lt;jsp:expression&gt;</div><div class="line">		&lt;jsp:text&gt;</div><div class="line">		&lt;jsp:output&gt;</div><div class="line">	c_2.JSP2.0新增的3个元素,动态生成XML元素标签的值</div><div class="line">		&lt;jsp:attribute&gt;</div><div class="line">		&lt;jsp:body&gt;</div><div class="line">		&lt;jsp:element&gt;</div><div class="line">	c_3.JSP新增的2个元素,主要用在Tag File中</div><div class="line">		&lt;jsp:invoke&gt;</div><div class="line">		&lt;jsp:dobody&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;include指令与include动作的区别</div><div class="line">	a.语法格式不同</div><div class="line">	b.include指令在&quot;页面转换期间&quot;发生作用,而动作在&quot;请求期间&quot;发生作用</div><div class="line">	c.include指令包含的内容为&quot;文件的实际内容&quot;,动作为&quot;页面的输出&quot;</div><div class="line">	d.include指令的&quot;主页面和包含页面转换为一个Servlet&quot;,动作为&quot;主页面和包含页面转换为独立的Servlet&quot;</div><div class="line">	e.编译时间,include指令&quot;较慢&quot;,动作&quot;较快&quot;</div><div class="line">	f.执行时间,include指令&quot;稍快&quot;,动作&quot;较慢(每次请求资源必须被解析)&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>JSP基本语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;指令(&lt;%@page 属性值1=&quot;属性值&quot; %&gt;)</div><div class="line">	page     【通常位于jsp页面的顶端,同一个页面可以有多个page指令】</div><div class="line">		language    __指定JSP页面使用的脚本语言(默认java)</div><div class="line">		import      __通过该属性来引入脚本语言中使用到的类文件(java包)</div><div class="line">		contentType __用来指定jsp页面所采用的编码方式(默认:text/html,ISO-8859-1)</div><div class="line"></div><div class="line">	include  【将外部文件嵌入到当前jsp文件中,同时解析这个页面的JSP语句】</div><div class="line">		例:</div><div class="line">			&lt;%@ include file=&quot;要包含页面的URL&quot; %&gt;</div><div class="line"></div><div class="line">	tablib   【使用标签库定义新的自定义标签,在jsp页面中启用定制行为】</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;注释</div><div class="line">	&lt;!--HTML注释--&gt;   【客户端源代码可见】</div><div class="line">	&lt;%--JSP注释--%&gt;   【客户端不可见】</div><div class="line">	//单行注释</div><div class="line">	/*多行注释*/</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;脚本</div><div class="line">	&lt;%  Java代码 %&gt;  </div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;声明</div><div class="line">	&lt;%! Java代码 %&gt;  【声明全局变量,字段 or 方法,可供jsp脚本调用(注意:jsp脚本里声明的变量是局部变量)】</div><div class="line"></div><div class="line"></div><div class="line">&lt;5&gt;表达式</div><div class="line">	&lt;%=表达式 %&gt;  【直接调用字段 or 方法,不用以分号‘;’结束】</div><div class="line"></div><div class="line"></div><div class="line">&lt;5&gt;JSP页面生命周期</div><div class="line">	1.用户发出index.jsp请求</div><div class="line">	2.判断用户访问的资源是否是第一次请求</div><div class="line">		a.是  </div><div class="line">			————JSP引擎把该JSP文件转换成为Servlet(本质是一个java类),生成字节码文件,并执行spInit()【只在编译生成字节码文件的时候才执行】</div><div class="line">			___生成的字节码文件</div><div class="line">		b.否</div><div class="line">			————生成的字节码文件</div><div class="line"></div><div class="line">	3.解析执行,jspService()</div><div class="line"></div><div class="line">	 注意点：</div><div class="line">		A.jspService()方法被调用来处理客户端的请求。对每一个请求,JSP引擎创建一个新的线程来处理该请求。如果有多个客户端同时请求该JSP文件,则JSP引擎会创建多个线程,每个客户端请求对应一个线程。以多线程方式执行可以大大降低对系统的资源需求,提高系统的并发量及响应时间。但也要注意多线程的编程带来的同步问题,由于该Servlet始终驻与内存,所以响应是非常快的</div><div class="line"></div><div class="line">		B.当用户第一次请求jsp页面时,首先被执行的是&quot;构造方法&quot;</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>JSP内置对象</p>
<ul>
<li>【定义】是Web容器创建的一组对象,不使用new关键字就可以使用内置对象,有九大内置对象</li>
<li>out</li>
<li>request    【用户请求】</li>
<li>response   【用户响应】</li>
<li>session</li>
<li>application</li>
<li>page</li>
<li>pageContext</li>
<li>config</li>
<li>exception<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;out对象【JspWriter类的实例,向客户端输出内容的对象】</div><div class="line">		a.缓冲区(Buffer)</div><div class="line">			是内存的一块区域用来保存临时数据</div><div class="line">		b.常用方法</div><div class="line">			(1)void println()		__向客户端打印字符串</div><div class="line">			(2)void clear()			__清除缓冲区内容,如果flush之后调用会抛出异常</div><div class="line">			(3)void clearBuffer()   __清楚缓冲区内容,如果在flush之后调用不会抛出异常</div><div class="line">			(4)void flush()         __将缓冲内容输出到客户端</div><div class="line">			(5)int getBufferSize()  __返回缓冲区以字节数的大小,如果不设缓冲区则为0</div><div class="line">			(6)int getRemaining()   __返回含缓冲区还剩余多少可用</div><div class="line">			(7)boolean isAutoFlush()__放回缓冲区满时,是自动清空还是抛出异常</div><div class="line">			(8)void close()         __关闭输出流</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;request对象</div><div class="line">	a.定义</div><div class="line">		客户端的请求信息被封装在request对象中,通过它才能了解到客户的需求,然后做出响应,它是HttpServletRequest类的实例。request对象具有请求域,即完成客户端的请求之前,该对象一直有效</div><div class="line">			</div><div class="line">	b.常用方法</div><div class="line">		String getParameter(String name)  __返回name参数名的参数值</div><div class="line">		String [] getParameterValues(String name) __返回name参数名的所有参数值数组</div><div class="line">		void setAttribute(String,Object)  __储存给request请求设置参数键值队</div><div class="line">		object getAttribute(String name)  __返回name参数名的参数值对象</div><div class="line">		String getContextType()			  __得到请求体的MIME类型</div><div class="line">		String getProtocol()			  __返回请求用的协议类型以及版本号</div><div class="line">		String getServerName()			  __返回接收请求的服务器主机名</div><div class="line">		int getServerPort()               __返回服务器接收此请求所用的端口号</div><div class="line">		void setCharacterEncoding(&quot;编码&quot;) __设置请求的字符编码【解决中文乱码】</div><div class="line">		String getCharacterEncoding()     __返回字符编码方式</div><div class="line">		int getContectLength()            __返回请求体的长度(以字节数)</div><div class="line">		String getRemoteAddr()   		  __返回发送此请求的客户端IP地址</div><div class="line">		String getRealPath(String path)   __返回虚拟路径的真实路径【括号内可是补充到最后的path】</div><div class="line">		String request.getContextPath()   __返回上下文路径</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;response对象</div><div class="line">	a.定义</div><div class="line">		response对象包含了响应客户请求的有关信息,但在JSP中很少直接用到它.它是HttpServletResponse类的实例。response对象具有页面作用域,即访问一个页面时,该页面内的response对象只能对此次访问有效,其他页面的response对象对当前页面无效</div><div class="line">	b.常用方法</div><div class="line">		String getCharacterEncoding()  __返回响应用时使用的字符编码</div><div class="line">		void setContentType(String type) __设置相应的MIME类型</div><div class="line">		PrintWriter getWriter()			  __返回可以向客户端输出字符的一个对象【注:需比较,与out内置对象的区别(PrintWriter对象打印输出,总是咸鱼out内置对象打印输出)】</div><div class="line">		sendRedirect(java.lang.String.location) __重新定向客户端的请求</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;session对象</div><div class="line">	a.定义</div><div class="line">		ssession表示客户端与服务器的一次会话,web中的session指的是用户在浏览某个网站时,从进入网站到浏览器关闭所经过的这段时间,也是用户浏览这个网站所花费的时间;因此从上述定义中可以看到,Session实际上是一个特点的时间概念,在服务器的内存中保存着不同用户的session,与用户一一对应;</div><div class="line">			.session对象在第一个JSP页面被装载时自动创建,完成会话期管理</div><div class="line">			.从一个客户打开浏览器并连接到服务器开始,到客户管理浏览器离开这个服务器结束,称为一个会话</div><div class="line">			.当一个客户访问一个服务器时,可能会在服务器的几个页面之间切换,服务器应当通过某种办法知道这是一个客户,就需要session对象</div><div class="line">			.session对象实例是HttpSession类的实例</div><div class="line"></div><div class="line">	b.常用方法</div><div class="line">		long getCreateTime()     __返回session创建时间</div><div class="line">		public String getId()    __返回session创建时jsp引擎为它设的唯一ID号</div><div class="line">		public Object setAttribute(String name,Object value)   _使用只i定名称将指定对象绑定到此会话</div><div class="line">		public Object getAttribute(String name)    __返回此会话中的指定名称的指定对象,若不存在,返回null</div><div class="line">		String [] getValueNames()  __返回一个包含此seesion中所有可用属性名数组</div><div class="line">		void setMaxInactiveInterval(int time)  __设置session存在时间,指定时间后过期</div><div class="line">		int getMaxInactiveInterval()   __返回session几秒钟过期</div><div class="line"></div><div class="line">	c.生命周期</div><div class="line">		(1)创建</div><div class="line">			当客户端第一次访问某个jsp或者Servlet时,服务器会为当前会话创建一个SessionId,每次客户端向服务端发送请求时,都会将此SessionId携带过去,服务端会对此SessionId进行校验</div><div class="line">		(2)活动</div><div class="line">			.某次会话中通过超链接打开的新页面属于通过一次会话</div><div class="line">			.只要当前会话的页面没有全部关闭,重新打开新的浏览器窗口访问同一项目资源时,仍然属于同一次会话</div><div class="line">			.本次会话的所有页面都关闭情况下，再次重新访问某个jsp或Servlet时会创建新的会话</div><div class="line">			.【注意】创建新的会话,原有的会话仍然存在,只是这个旧的SessionId仍然存在于服务端,只不过再也没有客户端会携带它然后交于服务端校验,超时之后才会自动销毁</div><div class="line">		(3)销毁【三种方式】</div><div class="line">			.调用session.invalidate()</div><div class="line">			.Session过期(超时)【Tomcat默认session超时是30分钟】</div><div class="line">				+ session.setMaxInactiveInterval(时间)</div><div class="line">				+ 在web.xml里配置</div><div class="line">						&lt;!--Session10分钟后过期--&gt;</div><div class="line">						&lt;session-config&gt;</div><div class="line">							&lt;session-timout</div><div class="line">							 10</div><div class="line">							 &lt;/session-timeout&gt;</div><div class="line">						&lt;/session-config&gt;</div><div class="line">			.服务器重新启动</div><div class="line"></div><div class="line">&lt;5&gt;application对象</div><div class="line">	a.定义</div><div class="line">		实现了用户间数据的共享,可存放全局变量</div><div class="line">		该对象开始于服务器的启动,终止于服务器的关闭</div><div class="line">		在用户的前后连接或不同用户之间的连接中,可以对application对象的同一属性进行操作</div><div class="line">		在任何地方对application对象属性的操作,都将影响到其他用户对此的访问</div><div class="line">		服务器的启动和关闭决定了application对象的生命</div><div class="line">		application对象是ServletContext类的实例</div><div class="line"></div><div class="line">	b.常用方法</div><div class="line">		public void setAttribute(String name,Object value) __设置指定名称的指定对象值,绑定到此会话</div><div class="line">		public Object getAttribute(String name)   __返回与此会话中指定名称绑定的对象,若不存在,返回null</div><div class="line">		Enumeration getAttributeNames()  __返回所有可用属性名的枚举</div><div class="line">		String getServerInfo()		__返回JSP(SERVER)引擎及版本号</div><div class="line"></div><div class="line"></div><div class="line">&lt;6&gt;page对象</div><div class="line">	a.定义</div><div class="line">		指向当前jsp页面本身,有点像类中的this指针,它是java.lang.Object类的实例</div><div class="line"></div><div class="line">	b.常用方法</div><div class="line">		class getClass()		__返回此Object的运行时Class</div><div class="line">		int hasCode()			__返回此Object的hash码</div><div class="line">		boolean equals(Object obj)	__判断相等</div><div class="line">		void copy(Object obj)  __拷贝到指定obj对象</div><div class="line">		Object clone()   	   __克隆Object对象</div><div class="line">		String toString()      __转换成String类的对象</div><div class="line">		void notifyAll()       __唤醒一个等待线程</div><div class="line">		void notifyAll()	   __唤醒所有等待线程</div><div class="line">		void wait(int timeout) __使一个线程处于等待状态直到timeout结束or被唤醒</div><div class="line">		void wait()            __使一个线程处于等待直到被唤醒	</div><div class="line"></div><div class="line"></div><div class="line">&lt;7&gt;pageContext对象</div><div class="line">	a.定义</div><div class="line">		提供了对JSP页面内所有的对象及名字空间的访问</div><div class="line">		可以访问到本页所在的session,也可以提取本页面所在的application的某一属性值</div><div class="line">		该对象相当于页面中所有功能的集大成者</div><div class="line">		对象本类名实例也叫做pageContext</div><div class="line"></div><div class="line">	b.常用方法</div><div class="line">		JspWrite getOut()		__返回当前客户端响应被使用的JspWriter流(out)</div><div class="line">		HttpSession getSession() __返回当前页中的HttpSession对象(session)</div><div class="line">		Object getPage() 		__返回当前页的Object对象(page)</div><div class="line">		ServletRequest getRequest()  __返回当前页的ServletRequest对象(reqeust)</div><div class="line">		ServletResponse getResponse  __返回当前页的ServletResponse对象(response)</div><div class="line">		void setAttribute(String name,Object obj);   __设置属性名与值</div><div class="line">		Object getAttribute(String name,int scope)   __返回指定名称,作用域的值对象</div><div class="line">		int getAttributeScope(String name)   __返回某属性的作用范围</div><div class="line">		void forward(String relativeUrlPaht) __使当前页面重导到另一页面</div><div class="line">		void include(String relativeUrlPath) __在当前位置包含另一文件</div><div class="line"></div><div class="line"></div><div class="line">&lt;8&gt;Config对象</div><div class="line">	a.定义</div><div class="line">		config对象是在一个Servlet初始化时,JSP引擎向它传递信息用的,此信息包括Servlet初始化时所要用到的参数(通过属性名和属性值构成)以及服务器的有关信息(通过传递一个ServletContext对象)</div><div class="line"></div><div class="line">	b.常用对象</div><div class="line">		ServletContext getServletContext()  __返回含有服务器有信息的ServletContext对象</div><div class="line">		String getInitParameter(String name)  __返回初始化参数的值</div><div class="line">		Enumeration getInitParameterNames()   __返回Servlet初始化所需所有参数的枚举</div><div class="line"></div><div class="line"></div><div class="line">&lt;9&gt;Exception对象</div><div class="line">	a.定义</div><div class="line">		该对象是一个异常对象,当一个页面运行过程中发生了异常,就产生这个对象.如果一个JSP页面要应用此对象,就必须在开头page指令中添加属性,isErrorPage=&quot;true&quot;【默认是false】,否则无法编译.实际上是java.lang.Throwable的对象</div><div class="line">		</div><div class="line">	b.常用方法</div><div class="line">		String getMessage()   __返回描述异常的消息</div><div class="line">		String toString()     __返回关于异常的简短描述消息</div><div class="line">		void printStackTrace() __显示异常及其栈轨迹</div><div class="line">		Throwable FillInStackTrace()  __重写异常的执行轨迹</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="18-2-Servlet基础"><a href="#18-2-Servlet基础" class="headerlink" title="18_2.Servlet基础"></a>18_2.Servlet基础</h2><p>&emsp;Servlet是在服务器上运行的小程序,一个Servlet就是一个Java类,并且可以通过“请求-响应”编程模型来访问的这个驻留在服务器内存里的Servlet程序<br><br></p>
<p>Tomcat容器等级<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;概念与分级</div><div class="line">	a.Tomcat容器分为四个等级</div><div class="line">		(1)Container容器</div><div class="line">		(2)Engine容器  【引擎容器】</div><div class="line">		(3)HOST容器 【主机容器】</div><div class="line">		(4)Context容器</div><div class="line">	b.Servlet的容器管理Context容器</div><div class="line">	c.一个COntext对应一个Web工程</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>Tomcat装载Servlet的三种情况</p>
<ul>
<li>Servlet容器启动时会根据web.xml配置文档自动装载某些Servlet</li>
<li>Servlet容器启动后,客户端首次向Servlet发送请求</li>
<li>Servlet类文件被更新后<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;Servlet容器启动时会根据web.xml配置文档自动装载某些Servlet【Tomcat启动后自动装载】</div><div class="line">		需在配置文件加入如下代码: </div><div class="line">			&lt;Servlet&gt;</div><div class="line">					......</div><div class="line">					&lt;loadon-startup&gt;1&lt;/loadon-startup&gt; &lt;!--数字越小优先级别越高--&gt; </div><div class="line">			&lt;/Servlet&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;Servlet容器启动后,客户端首次向Servlet发送请求</div><div class="line">		Tomcat容器进行装载Servlet</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;Servlet类文件被更新后</div><div class="line">		Tomcat容器重新装载Servlet</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">注意:</div><div class="line">	a.Servlet一旦被加载后,Servlet对象会长期保存在服务器的内存当中</div><div class="line">	b.Servlet被装载后,Servlet容器会创建一个Servlet实例并调用Servlet的init()将进行初始化。整个Servlet生命周期内,init()只会被调用一次</div><div class="line">	c.构造方法在init()方法执行前执行</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Servlet生命周期</p>
<ul>
<li>初始化</li>
<li>加载</li>
<li>实例化</li>
<li>服务和销毁<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;初始化阶段,调用init()</div><div class="line">&lt;2&gt;响应客户请求阶段,调用service()【由service()根据提交方式选择执行doGet()或者doPost()】</div><div class="line">&lt;3&gt;终止阶段,调用destroy()【服务器终止的时候】</div><div class="line"></div><div class="line"></div><div class="line">	注意：Servlet编写doPost()方法时,</div><div class="line">		会抛出ServletException和IOException异常</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p>Servlet对应JSP的九大内置对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">【JSP对象】  ~~~   【Servlet获得】</div><div class="line">   out 					response.getWriter();</div><div class="line">   reqeust 				service()的request</div><div class="line">   response  			service()的response</div><div class="line">   session  			request.getSession();</div><div class="line">   application   		getServletContext();</div><div class="line">   exception 			Throwable</div><div class="line">   page 				this</div><div class="line">   pageContext  		PageContext</div><div class="line">   Config 				getServletConfig();</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>Servlet应用</p>
<ul>
<li>获取初始化参数</li>
<li>Mdeol2模型<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;获取初始化参数</div><div class="line">	【在web.xml中配置Servlet时,可以配置一些初始化参数。而在Servlet中可以通过ServletConfig接口提供的方法来取得这些参数】</div><div class="line">		a.在web.xml里</div><div class="line">			&lt;servlet&gt;</div><div class="line">				......</div><div class="line">				&lt;init-param&gt;</div><div class="line">					&lt;param-name&gt;username&lt;/param-name&gt;</div><div class="line">					&lt;param-value&gt;suvan&lt;/param-value&gt;</div><div class="line">				&lt;/init-param&gt;</div><div class="line">			&lt;/servlet&gt;</div><div class="line"></div><div class="line">		b.Servlet的init()里</div><div class="line">			public void init() throws ServletException&#123;</div><div class="line">				String username = this.getInitParameter(&quot;username&quot;);</div><div class="line">			&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;Mdeol2模型</div><div class="line">	【Java Web的Model2开发模型就是MVC思想的体现】</div><div class="line">		JavaBean(M)</div><div class="line">		JSP(V)</div><div class="line">		Servlet(C)</div><div class="line">		DB</div><div class="line"></div><div class="line">```	</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line">Servlet模版代码</div></pre></td></tr></table></figure>
</li>
</ul>
<p><1>程序代码<br>        public class MyServlet extends HttpServlet{<br>            @Override<br>            protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException{<br>                //super.doGet(request,response);</1></p>
<pre><code>        String name = request.getParameter(&quot;name&quot;);//获取name参数
        String [] facorite = request.getParameterValues(&quot;favorite&quot;);//获取表单复选框的多个参数

        Systen.out.println(&quot;处理Get请求.....&quot;);

        PrintWriter out = response.getWriter();
        response.setContentType(&quot;text/html;charset=utf-8&quot;);
        out.println(&quot;&lt;strong&gt;在web页面打印输出&lt;/strong&gt;&lt;br&gt;&quot;)
    }

    @Override
    protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException{
        super.doPost(request,response);

        //请求转发
        reqeust.getRequestDispatcher(&quot;../xxx.jsp&quot;).forward(request,response);

        //请求重定向
        response.sendRedirect(&quot;test.jsp&quot;);

    }
}
</code></pre><p><2>在web项目的,web.xml里注册Servlet<br>        <servlet><br>            <servlet-name>MyServlet</servlet-name><br>            <servlet-class>com.MyServlet</servlet-class><br>        </servlet><br>        <servlet-mapping><br>            <servlet-name>MyServlet</servlet-name><br>            <url-pattern>/com/MyServlet</url-pattern><br>        </servlet-mapping></2></p>
<p><3>浏览器hello项目访问servlet<br>    http:/localhost:8080/HelloApp/com/MyServlet</3></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">18_3.过滤器</div><div class="line">------------------------</div><div class="line">&amp;emsp;定义是一个服务器端的组件,可以截取用户端的请求与响应信息,并对这些信息进行过滤【过滤源,过滤规则,过滤结果】</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">工作原理</div></pre></td></tr></table></figure>
<p>web容器启动时加载过滤器</p>
<pre><code>___发送请求___&gt;                               __过滤器将用户请求发送至Web资源___&gt;
</code></pre><p>用户                                           过滤器                                         Web资源<br>        &lt;<strong>_过滤器将Web资源的响应发送给用户</strong>         &lt;<strong>资源响应发送至过滤器</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">生命周期</div><div class="line">1.实例化【在web.xml进行配置,启动容器则加载过滤器,仅此1次】、</div><div class="line">2.初始化【过滤器启动成功,加载初始化信息,调用过滤器的init(),仅次1次】</div><div class="line">3.过滤  【每次过滤器捕获用户请求,都会执行doFilter(),执行N次】</div><div class="line">4.销毁  【web容器关闭时,调用过滤器的destroy()进行销毁处理的工作】</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">过滤器类型(在web.xml的filter标签dispatcher标签配置)</div></pre></td></tr></table></figure>
<p>Servlet2.5的四种类型<br>        REQUEST  【默认,用户直接访问页面时,web容器调用过滤器】<br>        FORWARD  【目标资源是通过ReqeustDispatcher的forward()访问时,即请求转发,调用过滤器】<br>        INCLUDE  【目标通过RequestDispatcher的include()访问时,请求通过包含方式获得时(在本页面中同时包含了下一个url的内容),调用过滤器】<br>        ERROR    【目标资源通过声明式异常处理机制调用时,调用过滤器】</p>
<p>Servlet3.0的添加的一种类型<br>        ASYNC    【目标资源是异步处理时,过滤器将被调用】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">多个过滤器组成过滤器链子</div></pre></td></tr></table></figure></p>
<p><1>服务器会按照web.xml中过滤器的定义的先后顺序组成过滤器链</1></p>
<pre><code>用户请求——&gt;过滤器1——&gt;过滤器2——&gt;过滤器3——&gt;web资源
</code></pre><p><2>过滤链执行过滤</2></p>
<pre><code>过滤器1【释放请求前】
过滤器2
    web资源
过滤器2 【释放请求后】
过滤器1


用户请求---&gt;Code1【放行前代码】                  ---&gt; Code2
              |                                 |         |
              Chain.doFilter【释放请求】   ----      Chain.doFilter  ---&gt;     Servlet的Service()
                                                                                            |
                                                                                           |
            Code1【放行后】        &lt;----           Code2        &lt;--------------    
</code></pre><p><3>初始化顺序号和销毁顺序<br>     按照web.xml的定义顺序,依次初始化,依次销毁</3></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">注意：</div><div class="line">+ 过滤器可以更改用户请求的路径</div><div class="line">+ 过滤器不能直接返回数据,不能直接处理用户请求【过滤器不是标准的Servlet,不能直接把数据直接返回到用户,只能重定向or请求转发到指定web资源】</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">过滤器代码</div><div class="line">+ 程序代码</div><div class="line">+ web.xml内配置</div></pre></td></tr></table></figure>
<p><1>程序代码<br>        public class MyFilter implements Filter{</1></p>
<pre><code>         public FilterConfig config;     //FilterConfig对象访问web.xml里初始化的参数

        @Override
        public void init(FiterConfig arg0) throws ServletException{
              System.out.println(&quot;MyFilter--init()---&gt;初始化&quot;);
              this.config = filterConfig;
        }

        @Override
        public void doFilter(ServletRequest arg0, ServletResponse arg1, FilterChain arg2) throws IOException,ServletException{

                /*
                  * servlet理论上可以处理多种形式的请求响应形式,http只是其中之一
                  * HttpServletRequest, HttpServletResponse分别是ServletRequest和ServletResponse的子类,多了一些针对http协议的方法
                  *  4个都是接口
                  */
                    //1.定义
                    HttpServletRequest httprequest = (HttpServletRequest)request;
                    HttpServletResponse httpresponse = (HttpServletResponse)response;
                    HttpServletResponseWrapper httpresponsewrapper = new HttpServletResponseWrapper(httpresponse);

                    //过滤器对请求进行编码转换
                    request.setCharacterEncoding(&quot;UTF-8&quot;);

                   //2.操作Cookie
                    //this.useCookie(httprequest,httpresponse);

                    //3.是否执行过滤器
                    String disabletestfilter = config.getInitParameter(&quot;disabletestfilter&quot;);            //获取配置文件参数,判断过滤器是否有效
                    if (disabletestfilter.toUpperCase().equals(&quot;YES&quot;)) {    //web.xml设置为YES则过滤器无效,直接跳过该过滤器
                       //把请求传回过滤链
                        chain.doFilter(request, response);  //检查过滤链是否还有其他filter,有就调用,没有就调用目标资源
                        return;
                    }


                    //4.进入博客首页index
                    String includeSuffix = config.getInitParameter(&quot;includeSuffix&quot;);                    //指定后缀index.jsp
                    String url = httprequest.getRequestURI();
                    if ((url.equals(&quot;/blog/&quot;)  || (url.indexOf(includeSuffix) != -1))){  //不是欢迎页面 &amp;&amp; 不是指定index.jsp页面则跳过

                        httprequest.getRequestDispatcher(&quot;/article/index&quot;).forward(request,response);
                        return;
                    }



                    //请求转发【服务器内部转发,/表示当前web应用程序跟目录】【url不会显示出链接地址】【会导致指定页面的CSS和js的相对路径是指当前CSS的,需把改为绝对路径】
                    //httprequest.getRequestDispatcher(&quot;/html/register.html&quot;).forward(request,response);

                    //请求重定向【服务器外请求】
                    //httpresponsewrapper.sendRedirect(&quot;/My_Blog/html/register.html&quot;);


                    System.out.println(&quot;----------------------&gt;请求仍然停留在IndexFilter过滤器&quot;);
        }

        @Override
        public void destroy(){
                System.out.println(&quot;MyFilter--destroy()---&gt;销毁&quot;);
                this.config = null;
        }


         /*【自定义函数】过滤器中操作Cookie*/
        public void useCookie(HttpServletRequest httprequest,HttpServletResponse httpresponse){

            //1.构造Cookie
            Cookie myCookie = new Cookie(&quot;myRecord&quot;, &quot;888888888&quot;);
            myCookie.setSecure(true);       //使用加密传输
            myCookie.setHttpOnly(true);     //将Cookie设置成HttpOnly[指示浏览器不要在除HTTP（和 HTTPS)请求之外暴露Cookie],防止XSS攻击【跨站点脚本攻击(例如js引用document.cookie0】
                                            //Servlet 2.5 API 不支持 cookie设置HttpOnly,Servlet3.0支持
            //2.客户端添加Cookie
            httpresponse.addCookie(myCookie);

            //3.读取客户端Cookie
            Cookie[] cookies = httprequest.getCookies();
            for(int i = 0;i &lt; cookies.length;i++){
                System.out.println(&quot;Cookie\n名字:&quot; + cookies[i].getName() +
                                    &quot;\n值:&quot; + cookies[i].getValue());

                //可选删除指定Cookie
                if(&quot;myCookie&quot;.equals(cookies[i].getName())){
                    cookies[i].setMaxAge(0);                    //有效期设置为0
                    httpresponse.addCookie(cookies[i]);            //将cookie重新添加到响应头中
                }
            }
}

    }
</code></pre><p><2>web.xml配置<br>    <filter><br>        <filter-name>过滤器名字</filter-name><br>        <filter-class>过滤器类</filter-class><br>        <init-param><br>            <description>描述信息【可省略】</description><br>            <param-name>参数名</param-name><br>            <param-value>参数值</param-value><br>        </init-param><br>        <init-param><br>            <param-name>参数名2</param-name>参数值2<br>        </init-param><br>    </filter><br>    <filter-mapping><br>        <filter-name>过滤器名</filter-name><br>        <url-pattern>URL正则路径</url-pattern> <!--设置 filter 所拦截的请求路径(过滤器关联的URL)  /*[路径映射],*.[扩展],/[default servlet]--><br>        <dispatcher></dispatcher><!--过滤器分类(四种过滤器),可以设置的值:REQUEST,INCLUDE,FORWARD,ERROR--><br>    </filter-mapping><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">18_4.监听器</div><div class="line">-----------------</div><div class="line"></div><div class="line">定义</div><div class="line">+ Servlet规范中定义的一种特殊类</div><div class="line">+ 用于监听ServletContext,HttpSession和ServletRequest等域对象的创建与销毁事件</div><div class="line">+ 用于监听域对象的属性发生修改的事件</div><div class="line">+ 可以在事件发生前,发生后做一些必要的处理</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">监听器顺序与优先级</div><div class="line">+ 【顺序】安装监听器在web.xml的注册顺序进行加载</div><div class="line">+ 【优先级】监听器 &gt; 过滤器 &gt; Servlet</div><div class="line">+ Servlet2.5中监听器顺序是按照注册顺序,Servlet3.0中无法决定顺序</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">监听器分类</div><div class="line">+ 对象划分</div><div class="line">+ 事件划分</div></pre></td></tr></table></figure></2></p>
<p><1>对象划分<br>    a.用于监听应用程序环境对象(ServletContext)的事件监听器<br>    b.用于监听用户会话对象(HttpSession)的事件监听器<br>    c.用于监听请求消息对象(ServletRequest)的事件监听器</1></p>
<p><2>事件划分<br>    a.监听域对象自身的创建和销毁<br>        ServletContext【唯1】  ——&gt;  ServletContextListener【n个】<br>            用途:定时器,全局属性对象<br>        HttpSession【唯1】   ——&gt;     HttpSessionListener【n个】<br>            用途：统计在线人数,记录访问日志<br>        ServletRequest【唯1】 ——&gt;  ServletRequestListener【n个】<br>            用途:读取request参数,记录访问历史</2></p>
<pre><code>b.监听域对象中的属性的增加和删除【不同作用域的属性进行添加,替换(当属性已经存在时,再次添加,则进行替换),移除时调用指定监听器】
    ServletContext   ——&gt;  ServletContextAttributeListener
    HttpSession  ——&gt;  HttpSessionAttributeListener
    ServletRequest ——&gt;  ServletRequestAttributeListener

c.监听绑定到HttpSession域的某个对象状态【注意:下面两个监听器不需要在web.xml文件中注册,要进行钝化活化,监听器还得实现Serializable(序列化)接口】
    HttpSessionBindingListener
        valueBound(绑定)  ——&gt; valueUnbound(解除钝化)
    HttpSessionActivationListener
        sessionWillPassivate(钝化)  ——&gt; sessionDidActivate(活化)

    session钝化机制本质是【由SessionManager管理】:
        将服务器不经常使用的session对象暂时序列化到系统文件or数据库系统中,当需要使用时则反序列化到服务器内存中,整个过程由服务器自动完成
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">Tomcat中有两种Session钝化管理器</div></pre></td></tr></table></figure>
<p><1>org.apache.catalina.session.StandaradManager<br>        (1)当Tomcat服务器被关闭or重启时,tomcat服务器会将当前内存中的Session对象钝化到服务器文件系统中<br>        (2)另一种情况是Web应用程序被重新加载时,内存中的Session对象也会被钝化到服务器的文件系统中<br>        (3)钝化后的文件被保存在Tomcat的指定路径[/work/Catalina/hostname/application/SESSION.ser]</1></p>
<p><2>org.apache.catalina.session.Persistentmanager<br>        (1)首先在钝化的基础上进行了扩张。第一种如上1,第二种如上2.第三种情况,可以配置主流内存的Session对象数目,将不常使用的Session对象保存到文件系统or数据库,需要用时再重新加载<br>        (2)默认情况下,Tomcat提供两种钝化驱动类<br>        (3)org.apache.Catalina.FileStore和org.apache.Catalina.JDBCStore<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">监听器实例</div><div class="line">+ 程序代码</div><div class="line">+ 配置web.xml</div></pre></td></tr></table></figure></2></p>
<p><1>程序代码<br>    /<em>ServletContextListener监听器</em>/<br>    public class MyServletContext implements ServletContextListener{</1></p>
<pre><code>    /*web容器启动时调用-初始化*/
    public void contextInitialized(ServletContextEvenet servletcontextevent){
        //获取当前应用ServletContext对象,然后获取web.xml的初始化值
        String initParam = servletcontextevent.getServletContext().getInitParameter(&quot;initParam&quot;);
    }

    /*web容器关闭时调用-销毁*/
    public void contextDestroyed(ServletContextEvent servletcontextevent){
         //释放资源操作
    }
}


/*HttpSessionListener监听器*/
public class MyHttpSession implements HttpSessionListener{
    public void sessionCreated(HttpSessionEvent httpsessionevent){

    }

    /*
     * 销毁的三种场景
     *    1.关闭服务器
     *    2.关闭浏览器一段时间,直到session过期
     *    3.不关闭浏览器,session超时
     */
    public void sessionDestroyed(HttpSessionEvent httpsessionevent){

    }
}


/*ServletRequestListener监听器*/
public class MyServletRequest extends ServletRequestListener{
    /*监听每一个用户请求*/
    public void requestInitialized(ServletRequestEvent servletreqeustevent){
        //获取请求参数
        String username = servletrequestevent.getServletRequest().getParameter(&quot;name&quot;);
    }

    /*用户请求结束后,自动销毁*/
    public void requestDestroy(ServletRequestEvenet servletrequestevent){

    }
}
</code></pre><p><2>配置web.xml<br>    <web-app><br>        ….</web-app></2></p>
<pre><code>    &lt;!--监听器--&gt;
    &lt;listener&gt;
        &lt;listener-class&gt;com.my.MyServletContext&lt;/listener-class&gt;
    &lt;/listener&gt;
    &lt;listener&gt;
        &lt;listener-class&gt;com.my.MyHttpSession&lt;/listener-class&gt;
    &lt;/listener&gt;
    &lt;listener&gt;
        &lt;listener-class&gt;com.my.MyServletRequest&lt;/listener-class&gt;
    &lt;/listener&gt;

    &lt;!--session超时限制 --&gt;
    &lt;session-config&gt;
        &lt;session-timeout&gt;1&lt;/session-timeout&gt;
    &lt;/session-config&gt;
    &lt;!--初始化参数--&gt;
    context-param&gt;
        &lt;param-name&gt;initParam&lt;/param-name&gt;
        &lt;param-value&gt;初始化值&lt;/param-value&gt;
    &lt;/context-param&gt;

&lt;/web-app&gt;
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">18_5.JSTL标签</div><div class="line">---------------------------</div><div class="line">&amp;emsp;JSTL是java中的一个定制标记库集,实现了JSP页面中的代码复用(基于标签库原理,重复率较高的代码块支持复用,提高效率),书写JSP页面时可读性更强(类似于xml,方便前端查看和参与开发)</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">参考资料</div><div class="line">+ [下载JSTL](http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/)</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">EL表达式【全称Expression Language】</div><div class="line">+ 写法比较</div><div class="line">+ 格式</div><div class="line">+ 运算符&quot;.&quot;和&quot;[]&quot;</div><div class="line">+ EL变量</div><div class="line">+ 类型转换 </div><div class="line">+ EL隐式对象</div><div class="line">+ 支持的运算符</div></pre></td></tr></table></figure>
<p><1>写法比较<br>    普通: &lt;%=session.getValue(“name”) %&gt;<br>    EL表达式: <c:out value="${sessionScope.name}"></c:out></1></p>
<p><2>格式: ${表达式}</2></p>
<p><3>运算符”.”和”[]”<br>    a.${user.sex} 等同于 ${user[“sex”]}<br>        (1)包含特殊符号时不能等同,只用一种写法${user[“first-name”]}<br>        (2)通过变量动态取值时【param可以是sex.price,之类各种传入值】<br>                ${user[param]}</3></p>
<pre><code>b.&quot;[]&quot;的另一种用法,定位集合中某元素
    ${booklist[0].price}
</code></pre><p><4>EL变量<br>    JSP内置对象    ~~   EL变量<br>    Page                 PageScope<br>    Request              RequestScope<br>    Session              SessionScope<br>    Application          Application</4></p>
<pre><code>注:
    如果使用时未限制作用域,例:${username}
    则会在Page ——&gt; Request ——&gt; Session ——&gt; Application 依次寻找
    【如果找不到不会输出null,而会输出一个空字符串】
</code></pre><p><5>类型转换<br>    由String变为int类型<br>        ${param.count + 20} </5></p>
<p><6>EL隐式对象<br>    pageContext<br>    pageScope<br>    requetsScope<br>    sessionScope<br>    applicationScope<br>    param<br>    paramValues<br>    Header<br>    headerValues<br>    cookie<br>    initParam</6></p>
<p><7>支持的运算符<br>    算术运算符<br>    关系运算符<br>    逻辑运算符<br>    验证运算符 empty  【判断表达式是否为null,返回true or false,】<br>        例:${empty username}  “”~空字符串也返回true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">四种JSTL标签</div><div class="line">+ 核心标签</div><div class="line">+ 格式化标签</div><div class="line">+ SQL标签</div><div class="line">+ XML标签</div></pre></td></tr></table></figure></7></p>
<p><1>核心标签</1></p>
<pre><code>导入核心库:
    &lt;%@ taglib prefix=&quot;c&quot; url=&quot;http://java.sun.com/jsp.jstl/core&quot;%&gt;

a.表达式控制标签 out set remove catch
        &lt;c:out value=&quot;输出常量&quot;&gt;&lt;/c:out&gt;
        &lt;c:out value=&quot;${输出变量}&quot; default=&quot;默认值&quot;&gt;&lt;/cout&gt;
        &lt;c:out value=&quot;&amp;ltout标签&amp;gt--转义&quot; escapeXml=&quot;false&quot;&gt;&lt;/c:out&gt;

        &lt;c:set var=&quot;变量名&quot; value=&quot;变量值&quot;  scope=&quot;作用域&quot;&gt;&lt;/c:set&gt;
        &lt;c:set var=&quot;变量名&quot; scope=&quot;作用域&quot;&gt;变量值&lt;/c:set&gt;
        &lt;jsp:useBean id=&quot;person&quot; class=&quot;com.my.Person&quot;&gt;&lt;/jsp:userBean&gt;
        &lt;c:set target=&quot;${person}&quot; property=&quot;name&quot;  value=&quot;小明&quot;&gt;&lt;/c:set&gt;
        &lt;c:set target=&quot;${person}&quot; property=&quot;age&quot;&gt;18&lt;/c:set&gt;

        &lt;c:remove var=&quot;变量&quot;/&gt;

        &lt;!--可包含容易出错的JSTL标签(逻辑)--&gt;
        &lt;c:catch var=&quot;error&quot;&gt;
            &lt;c:set target=&quot;aa&quot; property=&quot;bb&quot;&gt;测试&lt;/c:set&gt;\
        &lt;/c:catch&gt;
        &lt;c:out value=&quot;error&quot;&gt;&lt;/c:out&gt;【顶部没有定义aa对象,所以会输出报错信息】


b.流程控制标签 if choose when otherwise
        &lt;c:if test=&quot;判断条件(一般用EL表达式编写)&quot; var=&quot;指定名称,存放true or false&quot; scope=&quot;var属性存放作用域&quot;&gt;&lt;/c:if&gt;
        &lt;c:if test=&quot;{param.scope &gt;= 90&quot; var=&quot;result&quot; scope=&quot;application&quot;&gt;
            &lt;c:out value=&quot;成绩优秀&quot;&gt;&lt;/c:out&gt;
        &lt;/c:if&gt;
        &lt;c:out value=&quot;${aplicationScope.result}&quot;&gt;&lt;/c:out&gt;

        &lt;!--类似if-else结构,otherwise可写可不写 --&gt;
        &lt;c:choose&gt;
            &lt;c:when test=&quot;${param.scope &gt;= 90 &amp;&amp; param.scope&lt;=100}&quot;&gt;
                    ...
            &lt;/c:when&gt;
            &lt;c:when test=&quot;&quot;&gt;
                    ...
            &lt;/c:when&gt;
            &lt;c:otherwise&gt;
                ...
            &lt;/c:otherwise&gt;
        &lt;/:c:choose&gt;


c.循环标签 forEach forTokens
        &lt;c:forEach items=&quot;待遍历集合&quot; var=&quot;当前元素的变量&quot;&gt;
            ...
        &lt;/c:forEach&gt;
        &lt;c:forEach item=&quot;userlist&quot; var=&quot;user&quot;
                    begin=&quot;开始遍历的index值&quot;
                    end=&quot;结束遍历的index值&quot;
                    step=&quot;遍历间隔(步长)&quot;
                    varStatus=&quot;指定变量,储存当前元素状态(first,index,count,last)&quot;&gt;
            ...
        &lt;/c:forEach&gt;

        &lt;!--浏览字符串,并根据指定字符将字符串截取--&gt;
        &lt;c:forTokens items=&quot;被迭代的字符串&quot; delims=&quot;指定分隔符&quot;     var=&quot;分隔后的变量&quot;
            begin=&quot;开始索引&quot;
            end=&quot;结束索引&quot;
            step=&quot;遍历间隔&quot;
            varStatus=&quot;指定变量,储存当前元素状态(first,index,count,last)&quot;
        &gt;
            ...
        &lt;/c:forTokens&gt;

d.URL操作标签 import url redirect

        &lt;!--
            可以把其他静态 or 动态文件包含到本JSP页面
                注意:
                    (1)&lt;jsp:include&gt;只能包含同一个web应用的文件
                        &lt;c:import&gt;可以包含其他web应用中的文件,甚至网络上的
                    (2)使用context引入其他项目的文件
                        a.要修改Tomcat的发布路径
                        b.要修改%TOMCAT_HOME%/cof/context/xml的Context标签中的属性
                            crossContext=&quot;true&quot;
        --&gt;
        &lt;c:import url=&quot;被导入资源的URL路径&quot;
                  context=&quot;相同服务器下其他web工程(必须以\开头)&quot;
                  scope=&quot;作用域&quot;
                  charEncoding=&quot;编码字符集&quot;
                  var=&quot;以String类型存入被包含文件内容&quot;
                  varReader=&quot;以Reader类型存储包含文件内容&quot;&gt;
            ...
        &lt;/c:import&gt;
        &lt;c:import url=&quot;text.txt&quot; var=&quot;tt&quot; scope=&quot;session&quot; charEncoding=&quot;gbk&quot;&gt;&lt;/c:import&gt;
        &lt;c:import url=&quot;/importFile.jsp&quot; context=&quot;/AnotherWebProject&quot;&gt;&lt;/c:import&gt;


        &lt;!-- url标签,动态生成一个String类型的URL,可以用&lt;c:param&gt;标签共同使用也可以使用html的&lt;a&gt;实现超链--&gt;    
        &lt;c:url value=&quot;url路径值&quot; 
                var=&quot;将url路径储存在变量中&quot;
                scope=&quot;作用域&quot; /&gt;
        &lt;/url&gt;


        &lt;!--请求重定向 --&gt;
        &lt;c:redirect url=&quot;重定向地址&quot; context=&quot;用于导入其他web应用中的页面&quot;&gt;&lt;/c:redirec&gt;
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">JSTL函数</div></pre></td></tr></table></figure>
<p>导入函数库<br>    &lt;%@ taglib prefix=”fn” url=”<a href="http://java.sun.com/jsp/jstl/functions" target="_blank" rel="external">http://java.sun.com/jsp/jstl/functions</a>“ %&gt;</p>
<p>使用<br>    &lt;:out value=”在指定字符串中是否包含——————————${fn.contains(‘整个字符串是否包含啥’,’啥’)}”&gt;</p>
<pre><code>${fn.contains(&apos;整个字符串是否包含啥&apos;,&apos;啥&apos;)}
${fn.containsIgoreCase(&apos;哈哈哈你好,Hello World&apos;,&apos;hello&apos;)}    //忽略大小写
${fn.endsWith(&quot;不懂&quot;,&quot;董&quot;)}                                     //判断是否以指定字符结尾

${fn.escapeXml(&apos;&lt;book&gt;冰与火之歌&lt;/book&gt;&apos;)}&quot;&gt;&lt;/c:out&gt;         //输出$it;book$gt...,输出未转义的
${fn.indexOf(&apos;哈哈哈,KKKK&apos;,&apos;K&apos;)}                               //输出字符索引


fn:length()              //字符长度
fn:replace()             //替换
fn:split()               //分隔成数组
fn:startsWitth()         //是否以指定字符开头
fn:substring()          //字符串截取
fn:toLowerCase()          //变小写
fn:totoUpperCase()         //变大写
fn:trim()                  //首尾去空格
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">18_6.JSP自定义标签</div><div class="line">-----------------------------</div><div class="line"></div><div class="line"></div><div class="line">TagSupport类【自定义标签】</div><div class="line">+ 标签处理类</div><div class="line">+ 标签库描述文件(.tld)中注册标签</div><div class="line">+ 在jsp文件中使用自定义标签</div></pre></td></tr></table></figure>
<p><1>标签处理类【编写标签处理类,继承TagSupport,一般一个标签对应一个类】<br>        public class LoginDateTag extends TagSupport{</1></p>
<pre><code>    //D.【标签属性】类中添加全局变量,并添加Getter和Setter方法,在标签库文件注册
    private String value = &quot;&quot;;
    private String name =&quot;&quot;;

    //Getter
    public String getValue(){
        return value;
    }
    public String getName(){
        return name;
    }
    //Setter
    public void setValue(String value){
        this.value = value;
    }
    public void setName(String name){
        this.name = name;
    }

    //用于遍历
    private String [] items;   //遍历数组
    private int i;                //用于定位索引



    /*开始标签则调用*/
    @Override
    public int doStartTag() throws jspException{
        //A.记录登录时间
        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MMM-dd HH:mm:ss&quot;);
        String date = sdf.format(new Date());
        try{
            pageContext.getOut().print(date);    //打印输出
        }catch(IOException e){}


        //B.流程控制【两种合法返回值】
        String name  = pageContext.getRequest().getParameter(&quot;name&quot;);//请求参数
        if(name != null &amp;&amp; name.equals(&quot;小明&quot;)){
                return EVAL_BODY_INCLUDE;    //显示标签体文字
        }else{
                return SKIP_BODY;            //不显示标签体文字
        }


        //E.遍历(初次循环)
        if(items != null &amp;&amp; items.length &gt; 0){
                pageContext.setAttribute(&quot;name&quot;,items[0]);
                return EVAL_BODY_INCLUDE;  //执行标签体
        }else{
                return SKIP_BODY;   //不执行标签体
        }



        return super.doStartTag();//不执行标签体即是:SKIP_BODY常量
    };


    /*结束标签时调用*/
    @Override 
    public int doEndTag() throws JspException{ 


        //C.防盗链(只能通过超链接访问)【两种合法返回值】
        HttpServletRequest request = (HttpServletRequest)pageContext.getRequest();

        String referer = request.getHeader(&quot;referer&quot;);//HTTP请求头的属性,可以通过该属性判断用户从哪个页面连接过来,只有通过超链接 or 表单提交方式,该属性才有效
        String url = &quot;http://&quot; + request.getServerName();

        if(referer!= null &amp;&amp; referer.startsWith(url)){  //超链接 &amp;&amp; 通过本站的链接
            return EVAL_PAGE;    //执行该标签后的JSP网页
        }else{

            //否则不能访问
            try{
                 pageContext.getOut();print(&quot;不能访问&quot;);
            }catch(IOException e){}

            return SKIP_BODY;    //不执行后续JSP网页
        }


        return super.doEndTag();//执行标签后的内容,返回EVAL_PAGE常量
    }


    /*执行完标签体后执行*/
     @Override
    public int doAfterBody() throws JspException{

        /*E.遍历
            【两个合法返回值】EVAL_BODY_AGAIN(再显示标签间文字)SKIP_BODY(执行标签后的下一步)

            jsp页面中:
                &lt;%
                     String [] list = {&quot;1&quot;,&quot;2&quot;,&quot;3&quot;};
                     pageContext.setAttribute(&quot;list&quot;,list);
                %&gt;
                &lt;my:list items=&quot;${list}&quot;&gt;
                    ${name}
                &lt;/my:list&gt;
        */


         if(i &lt; items.length){
             pageContext.setAttribute(&quot;name&quot;,items[i]);
             i++;
             return EVAL_BODY_AGAIN;//再次执行标签体
         }else{
             return SKIP_BODY;
         }

    }
}
</code></pre><p><2>标签库描述文件(.tld)中注册标签【可以参考Tomcat目录下的\webapps\examples\WEB-INF\jsp2\jsp2-example-taglib.tld】<br>        &lt;?xml version=”1.0” encoding=”UTF-8” ?&gt;<br>        <taglib xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd" version="2.0"><br>            <description>A tag library exercising SimpleTag handlers.</description><br>            <tlib-version>1.0</tlib-version><br>            <short-name>SimpleTagLibrary</short-name><br>            <uri>/studyJSPTag</uri><br>            <tag><br>                <description>描述</description><br>                <name>loginDate</name><!--标签名(相当于类名)--><br>                <tag-class>com.my.LoginDateTag</tag-class><br>                <body-content>empty</body-content><!--空标签体--><br>            </tag><br>             <tag><br>                <name>study</name>&lt;<br>                <tag-class>com.my.Study</tag-class><br>                <body-content>scriptless</body-content><!--有内容标签体--><br>            </tag><br>            <tag><br>                <name>user</name>&lt;<br>                <tag-class>com.my.User</tag-class><br>                <body-content>empty</body-content><!--有内容标签体--><br>                <attribute> <!--标签属性--><br>                    <name>value</name><br>                    <required>true</required><br>                    <rtexprvalue>true</rtexprvalue><!--表示能在运行时接收表达式的值 --><br>                </attribute><br>                 <attribute><br>                    <name>name</name><br>                    <required>true</required><br>                    <rtexprvalue>true</rtexprvalue><br>                </attribute><br>            </tag><br>             <tag><br>                <name>list</name>&lt;<br>                <tag-class>com.my.List</tag-class><br>                <body-content>scriptless</body-content><br>                <attribute> <!--标签属性--><br>                    <name>items</name><br>                    <required>true</required><br>                    <rtexprvalue>true</rtexprvalue>m<br>                </attribute><br>            </tag><br>         </taglib></2></p>
<pre><code>将该标签库描述文件放到WEB-INF 或者其子目录下
</code></pre><p><3>在jsp文件中使用自定义标签<br>        a.导入<br>            &lt;%@ taglib prefix=”my” uri=”/studyJSPTag” %&gt;</3></p>
<pre><code>b.代码调用
    &lt;my:loginDate /&gt;
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">BodyTagSupport类【BodyTag接口的实现类,将标签体中的执行结果,修改后输出】</div><div class="line">+ 修改标签体的字符串</div></pre></td></tr></table></figure>
<p><1>修改标签体的字符串<br>        public class MyBodyTagSupport extends BodyTagSupport{<br>            private BodyContent body bodyContet;</1></p>
<pre><code>    @Override
    public void setBodyContent(BodyContent b){
        this.bodyContent = b;
    }

    @Override
    public int doEndTag() throws JspException{
        //A.获取标签体内容,然后修改
        String content = bodyContent.getString();
        System.out.println(&quot;原标签体内容&quot; + content);

        String newContent = &quot;学习&quot;;
        JspWriter jspWriter = bodyContent.getEnclosingWriter();
        try{
            jspWriter.write(newContent); //修改标签内容
        }catch(Exception e){}
    }

    return EVAL_PAGE;//执行后续JSP网页
}

************************************************************************
在标签库中注册
    &lt;tag&gt;
        &lt;name&gt;bodyTag&lt;/name&gt;
        &lt;tag-class&gt;com.my.MyBodyTagSupport&lt;/tag-class&gt;
        &lt;body-content&gt;scriptless&lt;/body-content&gt;
    &lt;/tag&gt;
************************************************************************
在页面中调用
    &lt;%@ taglib prefix=&quot;my&quot; uri=&quot;/my-tag&quot; %&gt;

    &lt;my:bodyTag&gt;
        学习
    &lt;/my:bodyTag&gt;
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">SimpleTagSupport类【SimpleTag接口的实现类,用于快速开发自定义标签】</div></pre></td></tr></table></figure>
<pre><code>public class MySimple extends SimpleTagSupport{

    private String [] items;
    private String name;

    public void setItems(String [] items){ //页面的setter方法都是由容器调用,将属性值填入指定属性
        this.items = items;
    }
    public void setName(String name){
        this.name = name;
    }

    @Override
    public void doTag() throws JspException,IOException{

        //A.输出时间
        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
        String date = sdf.format(new Date());
        JspWriter jspWriter = getJspContext().getOut();
        jspWriter.writer(date);


        //B.判断是否显示标签体
        PageContext pageContext = (PageContext)getJspContext();
        String name = pageContext.getRequest().getParameter(&quot;name&quot;);
        if(name != null &amp;&amp; name.equals(&quot;小明&quot;)){
            getJspBody().invoke(null);//显示标签体
        }else{
            super.doTag();//不显示标签体
        }

        //C.是否继续执行剩余JSP内容
        PageContext pageContext = (PageContext)getJspContext();
        HttpServletRequest request = (HttpServletRequest)pageContext.getRequest();
        String referer = request.getHeader(&quot;referer&quot;);
        if(referer == null){
            throw new SkipPageException();
        }


        //D.循环遍历
        if(item != null &amp;&amp; items.length &gt; 0){
            PageContext.pageContext = (PageContext)getJspContext();
            for(int i = 0; i &lt; items.length;i++){
                pageContext.setAttribute(name,items[i]);
                getJspBody().invoke(null);
            }
        }

        //E.修改标签内容
        StringWriter sw = new StringWriter(); //构建缓冲区
        JspFragment jspFragment = getJspBody();  //标签体中内容
        jspFragment.invoke(sw); //将数据写到缓冲区中
        String content = stringWriter.toString();
        content = &quot;hello&quot;;
        PageContext pageContext = (PageContext)getJspContext();
        pageContext.getOut().write(content);

    }
}
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">19.JSON数据处理</div><div class="line">----------------------</div><div class="line">&amp;emsp;与开发语言无关的,轻量级的数据格式。全称(JavaScript Object Notation),易于解析和生成</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">参考资料</div><div class="line">+ [GSON的Github项目](https://github.com/google/gson)</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">比较:</div><div class="line">+ JSON是Android SDK官方的库,GSON是Google发起的开源库</div><div class="line">+ GSON更适用于服务端对JSON数据的处理,功能比JSON强大</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">JSON数据样例</div></pre></td></tr></table></figure>
<p>wangxiaoer.json<br>    {<br>        “name”:”王小二”,<br>        “age”:25,<br>        “birthday” : “1990-01-01”,<br>        “school” : “蓝翔”,<br>        “major” : [“理发”,”炒菜”,”挖掘机”],<br>        “girfriend” : false,<br>        “car” : null,<br>        “house” : null<br>    }</p>
<pre><code>注意:json文件是没有注释的格式
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">java中的json处理</div><div class="line">+ org.json</div><div class="line">+ GSON</div></pre></td></tr></table></figure>
<p><1>org.json<br>        a.在pom.xml中引入依赖<br>            <dependencies><br>                …<br>                <dependency><br>                    <groupid>org.json</groupid><br>                    <artifoctid>json<br>                    <version>20090211</version><br>                </artifoctid></dependency><br>            </dependencies></1></p>
<pre><code>b.程序代码
        /*(1)添加数据*/
        public static void addJSONData(){
            //A.put方式添加
            JSONObject obj = new JSONObject();
            Object nullObj = null;
            try{
                obj.put(&quot;name&quot;,&quot;小明&quot;);
                obj.put(&quot;age&quot;,25);
                obj.put(&quot;major&quot;,new String[]{&quot;炒菜&quot;,&quot;挖掘机&quot;});
                obj.put(&quot;car&quot;,nullObj);
                obj.put(&quot;grilfriend&quot;,false);

                System.out.println(obj.toString());
            }catch(JSONException e){}

            //B.通过Map方式构建
            Map&lt;String,Object&gt; mapobj = new HashMap&lt;String,Object&gt;();
                mapobj.put(&quot;name&quot;,&quot;小明&quot;);
                mapobj.put(&quot;age&quot;,25);
                mapobj.put(&quot;major&quot;,new String[]{&quot;炒菜&quot;,&quot;挖掘机&quot;});
                mapobj.put(&quot;car&quot;,nullObj);
                mapobj.put(&quot;grilfriend&quot;,false);
            System.out.println(mapobj.toString());

            //C.JavaBean构建
            User user = new User();
                user.setName(&quot;王小二&quot;);
                user.setAge(25);
                user.setMajor(new String[]{&quot;炒菜&quot;,&quot;挖掘机&quot;});
                user.setCar(null);
                user.setGrilFriend(false);
            JSONObject obj = new JSONObject(user);
        }


        /*(2)解析JSON数据*/
        public static void readJSONDate(){
            //A-1.从文件中读取
            File file = new File(ReadJSONSample.class.getResource(&quot;/wangxiaoer.json&quot;).getFile());
            String content = FileUtils.readFileToString(file);
            JSONObject obj = new JSONObject(content); //得到JSON对象

            //A-2.解析
            String name = null;
            if(!obj.isNull(&quot;name&quot;)){  //判断指定属性是否为null
                name = obj.getString(&quot;name&quot;);
            }
            double age = obj.getDouble(&quot;age&quot;);
            boolean girlFriend = obj.getBoolean(&quot;grilFriend&quot;);
            JSONArray array = obj.getJSONArray(&quot;major&quot;);
            for(int i = 0,len = array.length(); i &lt; len; i++){
                String tmp = (String)array.get(i);
                System.out.println(&quot;专业:&quot; + (i+1) + tmp);
            }

            //不支持JavaBean反解析
        }
</code></pre><p><2>GSON<br>        a.加入Maven依赖<br>            <dependency><br>                <groupid>com.google.code.gson</groupid><br>                <artifactid>gson</artifactid><br>                <version>2.4</version><br>            </dependency></2></p>
<pre><code>b.程序代码

    /*【扩展功能】注解变大写*/
    class user{
        @SerializedName(&quot;NAME&quot;) //可以将gson解析数据后的,将name这个key值变为大写
        private String name;

        //加入transient关键字,在生成json格式时,忽略该属性
        private transient String ignore;
        .....
    }

    /*(1)添加JSON*/
    public static void addJSONDate(){
        //A.JavaBean对象
        User user = new User();
                user.setName(&quot;王小二&quot;);
                user.setAge(25);
                user.setMajor(new String[]{&quot;炒菜&quot;,&quot;挖掘机&quot;});
                user.setCar(null);
                user.setGrilFriend(false);

        GSON gson = new GSON();
        System.out.println(gson.toJson(user));

        //B.个性话构建
        GsonBuilder gsonBuilder = new GsonBuilder()l
        gsonBuilder.setPrettyPrinting(); //美观换行
        //加入回调函数
        gson.setFieldNamingStrategy(new FieldNamingStrategy(){
            public String translateName(Field f){ //Field是反射对象

                if(f.getName(). equals(&quot;name&quot;)){
                    //会和@SerializedName(&quot;NAME&quot;)冲突,二选1
                    return &quot;NAME&quot;; //返回大写NAME
                }

                return f.getName(); 
            }
        });
        Gson gson = gsonBuilder.create();
        System.out.println(gson.toJson(user));
    }


    /*(2)解析JSON*/
    public static void readJSNDate(){

        //A.从文件中读取,反解析JavaBean
        File file = new File(ReadJSONSample.class.getResource(&quot;/wangxiaoer.json&quot;).getFile());
        String content = FileUtils.readFileToString(file);

        Gson gson = new Gson();
        User user = gson.fromJson(content,User.class);
        System.out.println(&quot;user&quot;);

        //B.个性化转换
        Gson gson = new GsonBuilder.setDateFormat(&quot;yyyy-MMM-dd&quot;).create();//定制日期格式


        //C.JSON中的数组可以用,JavaBean可以用Set,List各种集合对应
        System.out.println(user.getMajor());//【GSON会自动识别数组,然后转为各种集合】
        System.out.println(user.getMajor().getClass());
    }
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">---</div><div class="line">&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">20.DWR实现服务器向客户端推送</div><div class="line">--------------------------</div><div class="line">&amp;emsp;DWR是一个基于Ajax的框架,动态将Java类生成Javascript,让客户端JavaScript通过DWR异步访问Java程序</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line">运行原理</div><div class="line">1.读取dwr.xml生成XXX.js文件</div><div class="line">2.js触发XXX.js中的方法</div><div class="line">3.web容器接收请求创建实例</div><div class="line">4.调用方法处理返回</div><div class="line">&lt;br&gt;</div><div class="line"></div><div class="line"></div><div class="line">DWR的基本使用</div></pre></td></tr></table></figure>
<p><1>添加Maven依赖<br>    <dependency><br>        <groupid>org.directwebremoting</groupid><br>        <artifactid>dwr</artifactid><br>        <version>3.0.M1</version><br>    </dependency></1></p>
<p><2>web.xml配置DWR的Servlet<br>    <servlet><br>        <servlet-name>dwr</servlet-name><br>        <!-- 
         DWR2.X的版本
            <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>
        --><br>        <servlet-class>uk.ltd.getahead.dwr.DWRServlet</servlet-class><!--DWR3.0版本--><br>        <!--使用服务器推技术(反转AJAX)--><br>        <init-param><br>            <param-name>activeReverseAjaxEnabled</param-name><br>            <param-value>true</param-value><br>        </init-param><br>        <!--能够从其他域进行请求【true-开启,false-关闭】--><br>        <init-param><br>            <param-name>crossDomainSessionSecurity</param-name><br>            <param-value>false</param-value><br>        </init-param><br>        <!--运行远程js--><br>        <init-param><br>            <param-name>allowScriptTagRemoting</param-name><br>            <param-value>true</param-value><br>        </init-param><br>    </servlet><br>    <servlet-mapping><br>        <servlet-name>dwr</servlet-name><br>        <url-pattern>/js/dwr/*</url-pattern><br>    </servlet-mapping></2></p>
<p><3>dwr.xml配置<br>    &lt;?xml version=”1.0” encoding=”UTF-8”?&gt;<br>    &lt;!DOCTYPE dwr PUBLIC “-GetAhead Limited/DTD Direct Web Remoting 2.0//EN” “<a href="http://www.getahead.org/dwr/dwr30.tdt&quot;&gt;" target="_blank" rel="external">http://www.getahead.org/dwr/dwr30.tdt&quot;&gt;</a><br>    <dwr><br>        <allow><br>             <!--动态生成js文件--><br>            <create creator="new" javascript="PushMessage"><br>                <param name="class">com.my.PushMessage<!--指定java类--><br>            </create><br>        </allow><br>    </dwr></3></p>
<p><4>java代码的推送方法<br>    public class PushMessage{<br>        public void send(String msg){<br>            ScriptBuffer scriptBuffer = new ScriptBuffer();//构建js脚本<br>            WebContext webContext = WebContextFactory.get();<br>            ScriptSession mySession = webContext.getScriptSession();//获取所有ScriptSession【一个客户端发送会推送到所有客户端(各种回调函数)】</4></p>
<pre><code>        scriptBuffer.appendScript(&quot;callHello(&quot;); //调用页面回调方法
        scriptBuffer.appendData(msg);  //传入
        scriptBuffer.appendScript(&quot;)&quot;);

        Util util = new Util(mySession);
        util.addScript(scriptBuffer);//向客户端推送信息
    }
}
</code></pre><p><5>jsp页面中使用DWR【需引入util.js和engine.js】<br>    <html><br>        <head><br>            <!--引入js文件 --><br>            <script type="text/javascript" src="js/util.js"></script><br>            <script type="text/javascript" src="js/engine.js"></script><br>            <script type="text/javascript" src="dwr/interface/PushMessage.js"></script><!--java类由DWR动态生成的JS文件--><br>            <script type="text/javascript" src="js/jquery-1.7.1.min.js"></script><br>            <!--页面中调用--><br>            <script type="text/javascript"><br>                /<em>调用java方法</em>/<br>                $(document).read({<br>                    function(){<br>                        dwr.engine.setActiveReverseAjax(true); //激活反转AJAX</p>
<pre><code>                    //点击按钮,调用Java代码
                    $(&quot;#sign&quot;).click(){
                        PushMessage.Send(&quot;传入参数值&quot;);
                    }

                };
            };


            /*回调函数*/
            function callHello(data){
                alert(data); //提示信息
            }
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;button id=&quot;sign&quot;&gt;点击这里向客户端推送信息&lt;/button&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p><6>思路流程<br>    a.配置web.xml的DWR的Servlet<br>    b.配置dwr.xml文件<br>    c.【推送页面】js页面点击按钮<br>    d.调用指定java类的函数(客户端推送功能)<br>    e.【消息显示页面】推送成功,跳到js的回调函数</p>
<p>```</p>
<hr>
<p><br><br></p>
<hr>
<p><br><br><br><br><br></p>
<h1 id="三-设计模式"><a href="#三-设计模式" class="headerlink" title="三.设计模式"></a>三.设计模式</h1><h2 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1.单例模式"></a>1.单例模式</h2><p>资源</p>
<ul>
<li><a href="http://blog.csdn.net/goodlixueyong/article/details/51935526">Java单例模式——并非看起来那么简单</a><br><br></li>
</ul>
<p>使用</p>
<ul>
<li>每次增删查改数据，都要连接数据库,可获取一个实例多次应用</li>
<li>多线程爬虫，不重复创建实例，使用唯一的资源</li>
<li>已应用到Utils【个人工具包】里的UseDB.java<br><br></li>
</ul>
<p>思路整理：</p>
<ol>
<li>懒汉模式</li>
<li>饿汉模式</li>
<li>双重校验锁</li>
<li>JDK1.5之后版本增加了volatile关键字</li>
<li>静态内部类实现单例<br><br></li>
</ol>
<hr>
<p><br><br></p>
</script></head></html></5></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录:&quot;&gt;&lt;/a&gt;目录:&lt;/h1&gt;&lt;p&gt;一.语法整理&lt;br&gt;1.概述(基本语法与规范)&lt;br&gt;2.变量&lt;br&gt;3.运算符&lt;br&gt;4.循环和判断&lt;br&gt;5.数组&lt;br&gt;6.函数(
    
    </summary>
    
      <category term="Java" scheme="http://suvan-l.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suvan-l.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java_面试经历</title>
    <link href="http://suvan-l.github.io/2017/06/28/Java_%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <id>http://suvan-l.github.io/2017/06/28/Java_面试经历/</id>
    <published>2017-06-28T03:14:25.000Z</published>
    <updated>2017-09-25T02:31:42.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录"><a href="#一-目录" class="headerlink" title="一.目录"></a>一.目录</h1><ol>
<li>小草互联面试总结</li>
<li>武汉唯特讯数据科技有限公司(广州研发中心)面试总结</li>
<li>腾讯2018校招面试</li>
</ol>
<hr>
<p><br><br><br></p>
<h1 id="二-内容"><a href="#二-内容" class="headerlink" title="二.内容"></a>二.内容</h1><h2 id="1-小草互联面试总结"><a href="#1-小草互联面试总结" class="headerlink" title="1.小草互联面试总结"></a>1.小草互联面试总结</h2><ul>
<li>官网<a href="http://www.xchlwkj.com/" target="_blank" rel="external">http://www.xchlwkj.com/</a></li>
</ul>
<p>先来断自我介绍(准备不充分,语言组织不够简洁清晰,讲到一半被HR打断了)</p>
<p>技术问:</p>
<ol>
<li>java的Object类有哪些方法</li>
<li>MySQL的索引机制,如何建立索引?</li>
<li>SQLite的查询机制</li>
<li>Spring @Resource、@Autowired、@Qualifier的注解注入如何使用及区别</li>
<li>简单说一下Spring的IoC和AOP<br><br></li>
</ol>
<p>项目问:</p>
<ol>
<li>在项目(BatchCreate_file)中哪一方面使用到SQLite,SQLite的是嵌入到Android,为什么在你的项目中使用SQLite,有什么优势?</li>
<li>项目((BatchCreate_file项目))中有没遇到的难点,如何解决?</li>
<li>怎么爬取信息,具体如何实现(燕云DaaS项目)?<br><br></li>
</ol>
<p>个人情况</p>
<ol>
<li>为什么不在之前的公司继续实习?</li>
<li>公司实习是否有工资?</li>
<li>仍然在校,是否只能暑期实习?<br><br></li>
</ol>
<p>应该真多薄弱部分的学习</p>
<ul>
<li>重新系统的学习和梳理java基础知识(坚持刷面试题)</li>
<li>项目中所用框架和数据库,核心技术的理论原理和运行机制</li>
<li>介绍项目方面,如何爬取,如何实现,为什么使用,进一步梳理与归纳</li>
<li>熟练的自我介绍<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="2-武汉唯特讯数据科技有限公司-广州研发中心-面试总结"><a href="#2-武汉唯特讯数据科技有限公司-广州研发中心-面试总结" class="headerlink" title="2.武汉唯特讯数据科技有限公司(广州研发中心)面试总结"></a>2.武汉唯特讯数据科技有限公司(广州研发中心)面试总结</h2><ul>
<li>官网<a href="http://www.vehicledatas.com/" target="_blank" rel="external">http://www.vehicledatas.com/</a></li>
</ul>
<p>前期准备</p>
<ul>
<li>自我介绍 + 一句话表达对公司的了解 + java面试基础题</li>
</ul>
<p>过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">进公司，先做一套笔试</div><div class="line">	难度挺高,内容包含</div><div class="line">		1.知识点选择题(涉及java语法基础 + javaEE + javascript + 框架简单的理解)</div><div class="line">		2.简答题</div><div class="line">			&lt;1&gt;arrayList和linkedList的存储特性,有何区别?</div><div class="line">			&lt;2&gt;描述Servlet的生命周期？Servlet和CGI有什么区别?</div><div class="line">			&lt;3&gt;static全局变量和普通的全局变量有什么不同?</div><div class="line">			   static局部变量和普通的局部变量有什么不同?</div><div class="line">			   static函数和普通的函数有什么不同?</div><div class="line">	    3.逻辑题 + 算法题</div><div class="line">	    	&lt;1&gt;有7克、2克砝码各一个，天平一只，如何只用这些物品三次将140克的盐分成50、90克各一份</div><div class="line">	    	&lt;2&gt;有口井 20米深 有个蜗牛从井底往上爬 白天爬3米 晚上往下坠2米 问蜗牛几天能从井里爬出来？</div><div class="line">	    	&lt;3&gt;小明的统计调查[内容太长,自行百度,Google]</div><div class="line">	    3.编程题</div><div class="line">	    	&lt;1&gt; 模拟银行叫号系统</div><div class="line">	    			银行有3个窗口,用户排队叫号,三个窗口可以同时处理业务,银行经理能够调度用户牌号的顺序 【对线程的理解和使用不透彻】</div><div class="line">	    	&lt;2&gt;设计数据库表的流程图[画出三个表的ETL图,主外键用方向键表示]</div><div class="line">	    			指条件查询</div><div class="line">	    			指定条件更新列值</div><div class="line">	    			指定查询price的值在1000到3000之间的商品数据</div><div class="line">	    			指定查询的pname包含&quot;发表&quot;的商品数据</div><div class="line">	    	&lt;3&gt;实现javascript的登录验证</div><div class="line">	    4.附加题</div><div class="line">	    	&lt;1&gt;京东商城的商品搜索功能是整个网站架构中非常重要的一个模块。当用户在搜索栏中写入他们想要搜索的关键字时，往往会有一些热门的关键词出现在提示框中。对于这一功能的实现，你认为需要注意什么</div><div class="line">	    	&lt;2&gt;【还有一踢忘了,时间太晚,个人效率不高,没清晰理解题目,所以没做】</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">面问</div><div class="line">	你做的燕云daaS是你自己一个人做的吗?如何实现信息爬取?大概的原理?使用了什么框架?</div><div class="line">	你的自动化工具是什么,介绍一下用途?</div><div class="line">	你的个人博客项目?有二维码验证吗?邮箱验证有加密吗?</div><div class="line">	两个Servlet,用户唯一性和登录验证，它们最后一步的区别?</div><div class="line">	JavaEE偏底层的开发是否熟悉?</div><div class="line">	讲下你对Java多线程开发的了解?</div><div class="line">	是否了解Socket编程?讲下你对他的了解</div><div class="line">	详细讲述下请求进入Servlet的过程与思路?</div><div class="line">	讲述下Spring MVC的原理?</div><div class="line"></div><div class="line"></div><div class="line">你所期望的待遇</div><div class="line"></div><div class="line">HR介绍公司的制度,福利,待遇(在你说出期待值后,他能接收就继续谈),公司的职业规划,签订协议(长期,最少1年),公司对我们的期望</div></pre></td></tr></table></figure></p>
<p><br><br></p>
<h2 id="3-腾讯2018校招面试"><a href="#3-腾讯2018校招面试" class="headerlink" title="3. 腾讯2018校招面试"></a>3. 腾讯2018校招面试</h2><p>腾讯面试（一面，初试）【运营开发 】:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">简历投的是软件开发(web方向),接到面试邀请时的是&quot;运营开发&quot;</div><div class="line">面试时间：2017-09-24</div><div class="line">地点：广州市天河区东圃汇彩路菁映路1号东圃福朋喜来登酒店</div><div class="line">面试模式： 技术岗 单面 酒店房间1对1</div><div class="line"></div><div class="line"></div><div class="line"> 无法算法笔试体,无自我介绍,直接开始问</div><div class="line"></div><div class="line">1.从佛山过来?期望在哪个城市工作?</div><div class="line">2.有没考虑过考研?</div><div class="line">3.为什么选择java，java的优势在哪里?</div><div class="line">4.你有两个项目，哪个是团队的（之后主要问该项目,项目问）?</div><div class="line">5.两个项目都是关于博客，你是很喜欢做博客系统吗?</div><div class="line">6.你的项目实现了哪些功能？</div><div class="line">7.博客的相册管理，是否有权限管理，若被获取到静态资源外部链接(例如图片)，能否直接从外部访问到静态资源，该如何进行权限验证?</div><div class="line">9.有了解过Cookie吗?</div><div class="line">8.服务器以什么方式传递Cookie到客户端?</div><div class="line">10Cookie工作原理?实现原理?</div><div class="line">11.有了解过Session吗?</div><div class="line">12.Session工作原理?Cookie实现原理</div><div class="line">13.Session如果是分布式环境下，多个服务器，如何考虑储存，有考虑到这种情况吗?</div><div class="line">14.有了解过HTTPS协议?</div><div class="line">10.MySQL数据库的行级锁,列级锁,有了解过码,试着阐述一下?</div><div class="line">11.为什么选择gmail?</div><div class="line">12.腾讯使用java的地方比较少,web方向主要是php，phython，c，只有Android的方向是java，你是想选Web方向，还是android，是否需要帮忙转投别的方向?</div><div class="line">13.你有什么想问的？</div><div class="line"></div><div class="line"></div><div class="line">个人问了三个问题</div><div class="line">1.腾讯内使用java进行开发岗位的很少吗?</div><div class="line">2.面试结果最快什么时候能知道?</div><div class="line">3.在这次面试中我有什么不足的地方？</div><div class="line"></div><div class="line"></div><div class="line">个人总结：</div><div class="line">a.无问java,可能是方向不对口</div><div class="line">b.网络基础问的比较多,自己在这方面基础不够牢固</div><div class="line">c.简历的一些坑,给自己埋下了</div><div class="line">d.心态不够放松,还需要提升临场应变能力与表述嫩了个i</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br></p>
<hr>
<p><br><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录&quot;&gt;&lt;a href=&quot;#一-目录&quot; class=&quot;headerlink&quot; title=&quot;一.目录&quot;&gt;&lt;/a&gt;一.目录&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;小草互联面试总结&lt;/li&gt;
&lt;li&gt;武汉唯特讯数据科技有限公司(广州研发中心)面试总结&lt;/li&gt;
&lt;li&gt;腾讯2
    
    </summary>
    
      <category term="Java" scheme="http://suvan-l.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suvan-l.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>路由器_配置本地服务器</title>
    <link href="http://suvan-l.github.io/2017/06/26/%E8%B7%AF%E7%94%B1%E5%99%A8_%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://suvan-l.github.io/2017/06/26/路由器_配置本地服务器/</id>
    <published>2017-06-25T16:59:59.000Z</published>
    <updated>2017-07-06T08:33:34.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录"><a href="#一-目录" class="headerlink" title="一.目录"></a>一.目录</h1><p>华为路由 WS318 增强版</p>
<ol>
<li>动态域名服务DDNS</li>
<li>端口映射</li>
<li>访问本地服务器</li>
<li>腾讯云域名解析</li>
<li>frp实现内网穿透</li>
</ol>
<hr>
<p><br><br><br></p>
<h1 id="二-内容"><a href="#二-内容" class="headerlink" title="二.内容"></a>二.内容</h1><h2 id="1-动态域名服务DDNS"><a href="#1-动态域名服务DDNS" class="headerlink" title="1. 动态域名服务DDNS"></a>1. 动态域名服务DDNS</h2><ul>
<li>动态域名服务 DDNS（Dynamic Domain Name Server）是一种将动态 IP 地址映射到一个固定的域名解析服务上的系统。当启用 DDNS 后，路由器会把它的动态 WAN IP 与一个固定域名进行绑定。这样，通过因特网，您可以随时随地使用固定的域名访问路由器的服务资源，而不用亲自追踪路由器的 WAN IP<br><br></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a.判断是否是公网ip,如果是公网ip可直接做端口映射</div><div class="line">b.选择DDNS服务器(例如:花生壳www.oray.com)注册,获取域名 + 用户名 + 密码</div><div class="line">c. 填入,保存[在DDNS服务器上注册过的数据]</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="2-端口映射"><a href="#2-端口映射" class="headerlink" title="2. 端口映射"></a>2. 端口映射</h2><ul>
<li>【NAT服务】通过设置路由器的转发规则，因特网上的用户可以方便地访问您通过个人计算机提供的服务器资源（如个人网站、FTP 服务器等）</li>
<li>【端口映射】将华为路由 WS318 增强版广域网 IP 地址的一个端口映射到局域网中的一台计算机上。当因特网用户访问该 IP 的该端口时，华为路由 WS318 增强版将会自动将该请求映射到已指定的计算机上，并通过该计算机对外提供服务<br><br></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a.更多功能 -&gt; 安全设置 -&gt; NAT服务 -&gt; 端口映射</div><div class="line">b.</div><div class="line">	服务名</div><div class="line">	服务类型</div><div class="line">	设备</div><div class="line">	主机IP</div><div class="line">	协议类型</div><div class="line">	内部端口 [设置对外提供服务的计算机的服务端口号]</div><div class="line">	外部端口 [设置路由器供因特网用户访问的服务端口号]</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="3-访问本地服务器"><a href="#3-访问本地服务器" class="headerlink" title="3. 访问本地服务器"></a>3. 访问本地服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">举例：</div><div class="line">	8080端口</div><div class="line">		f174a65989.51mypc.cn:8080/blog     [访问本机的8080端口【Tomcat(Apache服务器)】的blog项目]</div><div class="line">	80端口</div><div class="line">		http://f174a65989.51mypc.cn/blog/</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="4-腾讯云域名解析"><a href="#4-腾讯云域名解析" class="headerlink" title="4. 腾讯云域名解析"></a>4. 腾讯云域名解析</h2><p>修改记录：</p>
<ul>
<li>记录类型         [A:将域名指向一个IPv4地址（例如：8.8.8.8）]</li>
<li>主机记录         [www:解析后的域名为www.qcloud.com。]</li>
<li>线路类型         [默认]</li>
<li>关联云资源     [否]</li>
<li>记录值        [填写服务器IP或者DDNS的指向域名]</li>
<li>TTL  [各地DNS服务器缓存解析记录时长，缓存失效后才会重新获取记录值。<br>建议正常情况下设定10分钟即可。]<br><br></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="5-frp实现内网穿透"><a href="#5-frp实现内网穿透" class="headerlink" title="5. frp实现内网穿透"></a>5. frp实现内网穿透</h2><p>参考资料</p>
<ul>
<li><a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="external">frp中文文档【Github】</a></li>
<li><a href="https://github.com/fatedier/frp/releases" target="_blank" rel="external">frp下载页面</a></li>
<li><a href="https://github.com/fatedier/frp/issues/176" target="_blank" rel="external">frp怎样开机启动和后台运行</a><br><br></li>
</ul>
<p>内网机器搭建web服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">环境需求</div><div class="line">	一台公网IP的机器, 一台内网环境的机器</div><div class="line"></div><div class="line"></div><div class="line">Linux环境搭建</div><div class="line">	&lt;1&gt;进入目录 cd /usr/local </div><div class="line"></div><div class="line">	&lt;2&gt;下载【注意：要看清Linux的版本是什么,我的是	Centos 6 x86   】</div><div class="line">		  wget https://github.com/fatedier/frp/releases/download/v0.12.0/frp_0.12.0_linux_386.tar.gz</div><div class="line">		 解压</div><div class="line">		 	tar -zxvf frp_0.12.0_linux_386.tar.gz</div><div class="line"></div><div class="line">	&lt;3&gt;进入cd frp_0.12.0_linux_386</div><div class="line">	   配置 vi frps.ini</div><div class="line">	&lt;4&gt;启动 ./frps -c ./frps.ini</div><div class="line"></div><div class="line">	&lt;5&gt;设置开机启动</div><div class="line">		vi /etc/rc.local</div><div class="line">		在最下面加2行</div><div class="line">			#开启自动启动frps内网穿透</div><div class="line">			sleep 10   [需先休眠10秒再启动]</div><div class="line">			/usr/local/myfrp/frps -c /usr/local/myfrp/frps.ini</div><div class="line">			【其/usr/local/myfrp/是程序放置的目录，重启ok】</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">搭建web服务使用流程</div><div class="line">1.下载frp_0.12.0_windows_amd64.zip,解压</div><div class="line">	frps和frps.ini  	-&gt;  	公网 IP 的机器上【服务端】</div><div class="line">	frpc和frpc.ini 		-&gt; 	    内网环境的机器上。【客户端】</div><div class="line"></div><div class="line">2.配置服务端frps.ini</div><div class="line">		[common]</div><div class="line">		bind_port = 7000 		 [默认,frp的执行端口]</div><div class="line">		vhost_http_port = 80     [服务器开放http访问端口(80端口的URL可以设置URL访问无需端口号)]</div><div class="line">		max_pool_count = 5       [每个代理的连接池上限]</div><div class="line"></div><div class="line">3.客户端</div><div class="line">	   [common]</div><div class="line">		server_addr = x.x.x.x    [服务器ip]</div><div class="line">		server_port = 7000		 [默认,frp的执行端口]</div><div class="line">		pool_count = 1           [预创建连接的数量]</div><div class="line"></div><div class="line">		[web]</div><div class="line">		type = http              [http协议]</div><div class="line">		local_port = 8080          [内网机器的web服务端口(Tomcat的端口)]</div><div class="line">		custom_domains = www.liushuwei.cn [自定义域名]</div><div class="line"></div><div class="line"></div><div class="line">4.启动【下面是Linux命令行版本,windons可以直接点击exe程序启动】</div><div class="line">	服务端./frps -c ./frps.ini</div><div class="line">   	客户端./frpc -c ./frpc.ini</div><div class="line"></div><div class="line">   	在linux任何位置</div><div class="line">		/usr/local/myfrp/frps -c /usr/local/myfrp/frps.ini</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">5.外网可访问</div><div class="line">	www.liushuwei.cn/blog</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br></p>
<hr>
<p><br><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录&quot;&gt;&lt;a href=&quot;#一-目录&quot; class=&quot;headerlink&quot; title=&quot;一.目录&quot;&gt;&lt;/a&gt;一.目录&lt;/h1&gt;&lt;p&gt;华为路由 WS318 增强版&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;动态域名服务DDNS&lt;/li&gt;
&lt;li&gt;端口映射&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="路由器" scheme="http://suvan-l.github.io/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    
      <category term="路由器" scheme="http://suvan-l.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Email_邮件服务器</title>
    <link href="http://suvan-l.github.io/2017/05/30/Email_%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://suvan-l.github.io/2017/05/30/Email_邮件服务器/</id>
    <published>2017-05-30T05:30:25.000Z</published>
    <updated>2017-06-01T07:15:30.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>资料：</p>
<ul>
<li><a href="https://www.hmailserver.com/" target="_blank" rel="external">hMailServer官网</a></li>
<li><a href="http://www.xtjc.com/tech/201105/10-7207.html" target="_blank" rel="external">几款优秀的免费邮件服务器软件</a></li>
<li><a href="http://www.open-open.com/36.htm" target="_blank" rel="external">Java开源网络服务器端组件</a></li>
</ul>
<p><br></p>
<p>目录：<br>1.hMailServer[windows邮件服务器]</p>
<hr>
<p><br><br><br></p>
<h1 id="一-内容"><a href="#一-内容" class="headerlink" title="一.内容"></a>一.内容</h1><h2 id="1-hMailServer-局域网内搭建邮件服务器【windows-界面版】"><a href="#1-hMailServer-局域网内搭建邮件服务器【windows-界面版】" class="headerlink" title="1.hMailServer[局域网内搭建邮件服务器【windows-界面版】]     "></a>1.hMailServer[局域网内搭建邮件服务器【windows-界面版】]     </h2><p>hMailServer资料</p>
<ul>
<li><a href="https://www.hmailserver.com/" target="_blank" rel="external">hMailServer官网</a></li>
<li><a href="https://www.hmailserver.org/index.php" target="_blank" rel="external">hMailServer中文论坛</a></li>
<li><a href="https://www.hmailserver.org/app.php/page/download" target="_blank" rel="external">hMailServer最新稳定版下载5.6（生产环境）</a></li>
<li><a href="https://www.hmailserver.org/viewtopic.php?t=6" target="_blank" rel="external">hMailServer配置图文详细教程</a></li>
<li><a href="https://www.hmailserver.org/viewtopic.php?f=5&amp;t=13" target="_blank" rel="external">hMailServer汉化文件</a><br><br></li>
</ul>
<p>安装与配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">汉化</div><div class="line">	-&gt;网上下载：chinese.ini</div><div class="line">	-&gt; 将其复制到hMailServer根目录的\Languages目录下</div><div class="line">	-&gt;根目录\BIN</div><div class="line">		--&gt;修改hMailServer.INI[ValidLanguages=english,swedish,chinese]</div><div class="line">	-&gt;重启hMailServer服务[控制面板-管理工具-服务]</div><div class="line">	-&gt;开启软件,输入软件密码[l....XXXi]-菜单栏-File-Select language</div><div class="line"></div><div class="line">设置使用本机MySQL数据库</div><div class="line">	-&gt; 需要将数据库MySQL Server 5.7\lib\libmysql.dll</div><div class="line">	-&gt;拷贝到hMailServer\Bin\目录下</div><div class="line">		【注意：如果是64位的MySQL不支持，MySQL (32bit) 取得裡面的 libmysql.dll】</div><div class="line"></div><div class="line">**********************************************************</div><div class="line"></div><div class="line">启动邮件系统</div><div class="line">	开启系统服务 -&gt; hMailServer</div><div class="line"></div><div class="line">服务端配置</div><div class="line">	1-A.域名</div><div class="line">		boss.com  [无限制]</div><div class="line">		suvan.com [最大容量500MB,最大邮件大小200KB,帐号最大容量20MB]</div><div class="line">		1-B.添加帐号【可添加外部帐号,用于外网下载邮件】</div><div class="line">			(b1)配置地址</div><div class="line">			(b2)配置密码</div><div class="line"></div><div class="line">	2.设置-协议</div><div class="line">		SMTP -&gt; 邮件递交[设置本地主机名(随意设置)]</div><div class="line"></div><div class="line">	3.设置-日志</div><div class="line">		打勾&quot;已启用&quot;[根据需求勾选记录]</div><div class="line"></div><div class="line">	3.设置-高级</div><div class="line">		(a)自动屏蔽[不启用]</div><div class="line">		(b)IP范围</div><div class="line">			My computer  -&gt; 主要设置“运行递交来自”和“SMTP需要验证”</div><div class="line">			Internet	 -&gt;	同上</div><div class="line">		(c)TCP/IP端口 [一般默认,也可能根据需求设置]</div><div class="line"></div><div class="line">	4.实用工具</div><div class="line">		备份  -&gt; 选择路径,打勾&quot;设置&quot;,&quot;域名&quot;,&quot;邮件&quot;,&quot;压缩文件&quot; -&gt; 保存</div><div class="line"></div><div class="line">	5.诊断</div><div class="line">		启用[镜像测试，全部通过(全绿色)表示服务器端配置完成]</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">客户端配置【Foxmail】</div><div class="line">	设置  -&gt;  帐号</div><div class="line">		-&gt; 新建</div><div class="line">			 -&gt;(1)手动设置</div><div class="line">			 		接收服务器类型：POP3</div><div class="line">					邮件帐号: [例：test@suvan.com,boss@boss.com]</div><div class="line">					密码：		</div><div class="line"></div><div class="line">					POP服务器(收件)： 填写邮件服务在局域网的ip地址[例：10.4.104.34]</div><div class="line">					SMTP服务器(发件)： 同上</div><div class="line">										【注：服务器在本机可填：localhost 或 127.0.0.1】</div><div class="line">		ip</div><div class="line">			外网ip: 百度输入ip</div><div class="line">			内网ip：cmd 输入ipconfig,以太网的ipv4地址</div><div class="line"></div><div class="line">			注意：</div><div class="line">				如果两个ip一样,说明正处在外网</div><div class="line">				如果不一样，说明正处在内网</div><div class="line"></div><div class="line"></div><div class="line">批量添加用户</div><div class="line">	在hMailServer中文论坛下载,批量添加用户.rar</div><div class="line">			import.vbs [运行脚本]</div><div class="line">			bulk.cvs   [存放导入数据]</div><div class="line">			</div><div class="line"></div><div class="line">		(1)修改脚本内的hMaiServer密码[hAdminpwd = &quot;XXXX&quot;]</div><div class="line">		(2)填写导入数据 [基本格式在cvs文件里有案例,脚本里有注释]</div><div class="line">     【注意：1次只能导入1种域名的用户数据】</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> 邮箱使用情况测试</div><div class="line"> 	成功选项：A.局域网收发 B.外网收发</div><div class="line"></div><div class="line"> 	云服务器邮箱</div><div class="line"> 		suvan@liushuwei.cn       [AB]</div><div class="line"> 		liushuwei@云服务器的IP   [A]</div><div class="line"> 		test@suvan.net.cn        [A]</div><div class="line"> 	局域网邮箱</div><div class="line"> 		liushuwei@suvan.com      [A]</div><div class="line"> 		boss@boss.com            [A]</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>云服务器服务端需要开启的</p>
<ol>
<li>域名</li>
<li>开启25 110端口【控制面板-防火墙-高级设置-入站规则(右键,新建,端口…)】【在腾讯云就是配置安全组】</li>
<li>添加DKIM签名</li>
<li>添加SSL证书<br><br></li>
</ol>
<p>特别注意：<br>1.任务进程强制关闭MailServer会导致邮箱无法接收服务器<br>2.域名可以同时,www指向个人网站,@指向邮箱服务器<br>3.邮箱服务器需要开启部分TCP/IP端口【防火墙的入站规则】</p>
<hr>
<p><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hmailserver.com/&quot; target=&quot;_blank
    
    </summary>
    
      <category term="Email" scheme="http://suvan-l.github.io/categories/Email/"/>
    
    
      <category term="Email" scheme="http://suvan-l.github.io/tags/Email/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap_知识体系</title>
    <link href="http://suvan-l.github.io/2017/05/10/Bootstrap_%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <id>http://suvan-l.github.io/2017/05/10/Bootstrap_知识体系/</id>
    <published>2017-05-10T06:15:08.000Z</published>
    <updated>2017-05-14T09:01:41.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h1><p><br></p>
<p>参考资料：</p>
<ul>
<li><a href="http://v3.bootcss.com/" target="_blank" rel="external">Bootstrap中文文档【官方】</a></li>
<li><a href="http://www.jianshu.com/p/4ef75b89785a" target="_blank" rel="external">bootstrap学习记录【nav属性,导航元素的使用】</a><br><br></li>
</ul>
<p>目录：</p>
<ol>
<li>导航</li>
<li>栅格系统</li>
<li>页面底部规范</li>
<li>JavaScript插件</li>
</ol>
<hr>
<p><br><br><br></p>
<h1 id="二-目录"><a href="#二-目录" class="headerlink" title="二.目录"></a>二.目录</h1><h2 id="1-导航"><a href="#1-导航" class="headerlink" title="1.导航"></a>1.导航</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">navbar-导航条,nav-导航</div><div class="line"></div><div class="line">布局容器【div】</div><div class="line">	container 		[居中]</div><div class="line">	container-fluid	[100%]</div><div class="line"></div><div class="line">导航条样式</div><div class="line">	navbar-default	[默认白]</div><div class="line">	navbar-inverse  [黑色]</div><div class="line"></div><div class="line">文本</div><div class="line">	navbar-brand    [字体大一号]【常用与到汉兰的a标签】</div><div class="line"></div><div class="line">浮动</div><div class="line">	navbar-right	[左浮动]</div><div class="line">	navbar-left		[右浮动]</div><div class="line"></div><div class="line">位置</div><div class="line">	navbar-fixed-top    [顶部固定]</div><div class="line">	navbar-fixed-bottom [底部固定]	</div><div class="line">	navbar-static-top   [顶部-可随屏幕滚动]</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">表单</div><div class="line">	navbar-form		</div><div class="line">	form-group		[表单组]</div><div class="line"></div><div class="line">ul【无序列表】</div><div class="line">	nav 			[导航样式]</div><div class="line">	navbar-nav   	[垂直]</div><div class="line"></div><div class="line">	nav-tabs		[标签样式]</div><div class="line">		nav-justified	[标签样式-两端对齐(等宽)]</div><div class="line">	nav-pills		[胶囊样式(默认是水平)]</div><div class="line">		nav-stacked		[胶囊样式-垂直堆叠排列]</div><div class="line"></div><div class="line">	dropdown-menu	[下拉菜单]【需要有&lt;a&gt;标签声明class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;】</div><div class="line"></div><div class="line">li【列表元素】</div><div class="line">	active			[活动状态]</div><div class="line">	disabled		[禁用状态]</div><div class="line">	divider			[分隔符]</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="2-栅格系统"><a href="#2-栅格系统" class="headerlink" title="2.栅格系统"></a>2.栅格系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">在&lt;div class=&quot;row&quot;&gt;&lt;/div&gt;范围内的divide样式</div><div class="line">	col-xs-*	[*(长度-范围1 ~ 12)]</div><div class="line">	col-sm-*</div><div class="line">	col-md-*</div><div class="line">	col-lg-*</div><div class="line"></div><div class="line">列偏移【重置偏移, 拉回和推后】</div><div class="line">		col-*-offset-^  [^(重置位置-范围1 ~ 12)]</div><div class="line">		col-*-pull-^ 	[^(横向拉拉回(左移)-范围1 ~ 12)]</div><div class="line">		col-*-push-^ 	[^(横向推(右移)-范围1 ~ 12)]</div><div class="line"></div><div class="line"></div><div class="line">列嵌套【范围同样是0 ~ 12】</div><div class="line">	&lt;div class=&quot;row&quot; style=&quot;background-color: yellow;&quot;&gt;</div><div class="line">                    &lt;div class=&quot;col-lg-1 col-lg-offset-2 col-lg-pull-2 &quot; style=&quot;background-color: blue;&quot;&gt;</div><div class="line">                        &lt;div class=&quot;row&quot; style=&quot;background-color: red;&quot;&gt;</div><div class="line">                            &lt;div class=&quot;col-lg-1 col-lg-offset-12&quot; style=&quot;background-color: blue;&quot;&gt;皮&lt;/div&gt;</div><div class="line">                        &lt;/div&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="3-页面底部规范"><a href="#3-页面底部规范" class="headerlink" title="3.页面底部规范"></a>3.页面底部规范</h2><ul>
<li><a href="http://paituwang.com/node/39" target="_blank" rel="external">网页底部正确的版权格式规范 </a></li>
<li><a href="http://adophper.com/tag-%25e7%25bd%2591%25e7%25ab%2599%25e7%25bd%2591%25e9%25a1%25b5%25e5%25ba%2595%25e9%2583%25a8%25e8%25ae%25be%25e8%25ae%25a1%25e7%259a%2584%25e6%25ad%25a3%25e7%25a1%25ae%25e7%2589%2588%25e6%259d%2583%25e6%25a0%25bc%25e5%25bc%258f%25e8%25a7%2584%25e8%258c%2583.html" target="_blank" rel="external">网站网页底部设计的正确版权格式规范</a></li>
</ul>
<hr>
<p><br><br></p>
<h2 id="4-JavaScript插件"><a href="#4-JavaScript插件" class="headerlink" title="4.JavaScript插件"></a>4.JavaScript插件</h2><ul>
<li><a href="http://v3.bootcss.com/javascript/" target="_blank" rel="external">Bootstrap3的JavaScript插件【官网】</a></li>
<li><a href="http://v2.bootcss.com/javascript.html" target="_blank" rel="external">Bookstrap2的JS插件</a></li>
</ul>
<hr>
<p><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-前言&quot;&gt;&lt;a href=&quot;#一-前言&quot; class=&quot;headerlink&quot; title=&quot;一.前言&quot;&gt;&lt;/a&gt;一.前言&lt;/h1&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://v3.bootcss.com/
    
    </summary>
    
      <category term="前端" scheme="http://suvan-l.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://suvan-l.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Test_Junit测试框架</title>
    <link href="http://suvan-l.github.io/2017/05/08/Test_Junit%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://suvan-l.github.io/2017/05/08/Test_Junit测试框架/</id>
    <published>2017-05-08T05:54:25.000Z</published>
    <updated>2017-05-24T04:13:15.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h1><p>参考资料</p>
<ul>
<li><a href="http://junit.org/junit4/" target="_blank" rel="external">JUnit官网</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/junit/overview.html" target="_blank" rel="external">JUnit入门教程【极客学院】</a></li>
<li><a href="http://www.jianshu.com/p/7088822e21a3" target="_blank" rel="external">JUnit4单元测试入门教程</a></li>
<li><a href="https://github.com/junit-team/junit4" target="_blank" rel="external">JUnit-Github仓库</a></li>
</ul>
<p>目录</p>
<ol>
<li>概述</li>
<li>[注解]和[主要类与函数]</li>
<li>入门代码实践</li>
<li>注意点</li>
<li>SSM框架中jUnit单元测试测试Mybatids[增删查改]</li>
</ol>
<hr>
<p><br><br><br></p>
<h1 id="二-内容"><a href="#二-内容" class="headerlink" title="二.内容"></a>二.内容</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>&emsp;JUnit是一个Java编程语言单元测试框架。例如：时间,异常,参数化测试….</p>
<p>常用目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">main  [各种源码]</div><div class="line">test  [存放测试类]</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br></p>
<h2 id="2-注解-和-主要类与函数"><a href="#2-注解-和-主要类与函数" class="headerlink" title="2.[注解]和[主要类与函数]"></a>2.[注解]和[主要类与函数]</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">注解  ---&gt; (应用于测试类)</div><div class="line">	@BeforeClass	[测试类执行前]</div><div class="line">	@AfterClass		[测试类执行后]</div><div class="line">	@Before     	[每个测试用例执行前]</div><div class="line">	@After          [每个测试用例执行后]</div><div class="line">	@Ignore			[不执行]</div><div class="line">	@Test   		[标识测试用例]</div><div class="line">		(expected = ...)  【异常检测】</div><div class="line">		(timeout = ...)	  【超时限制】</div><div class="line"></div><div class="line">	@RunWith(Parameterized.class)  		[声明测试类]</div><div class="line">	@Parameterized.Parameters      		[声明测试参数与期望值的函数]</div><div class="line"></div><div class="line">	@RunWith(Sutie.class)		   		[声明测试套件类]</div><div class="line">	@SuiteClasses(&#123;...class,...class&#125;)  [将各种测试类的运行时填入]</div><div class="line"></div><div class="line"></div><div class="line">主要类与函数 </div><div class="line">	org.junit.runner.JUnitCore;             [用于接收测试类的Class(运行时)【返回Result】]</div><div class="line">	org.junit.runner.Result;                [测试结果]</div><div class="line">	org.junit.runner.notification.Failure;  [测试结果的失败信息]</div><div class="line"></div><div class="line"></div><div class="line">	下面这种比较规范</div><div class="line">		junit.framework.Assert       			[断言方法集合]</div><div class="line">		junit.framework.TestCase                [测试类]</div><div class="line">		junit.framework.TestResult 				[测试结果]</div><div class="line">		junit.framework.TestSuite               [测试套件]</div><div class="line"> </div><div class="line">	也可以使用</div><div class="line">			import static org.junit.Assert.*;   [导入各种assert]</div></pre></td></tr></table></figure>
<p><br><br></p>
<h2 id="3-入门代码实践"><a href="#3-入门代码实践" class="headerlink" title="3.入门代码实践"></a>3.入门代码实践</h2><ol>
<li>创建Java项目,导入hamcrest-core-1.3.jar 和 junit-4.12.jar包</li>
<li>在src目录下创建main包【存放源码】和test包【存放测试类】</li>
<li>代码<br><br></li>
</ol>
<p>main包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">*************************Math.java*************************************</div><div class="line">package main;</div><div class="line"></div><div class="line">public class Math &#123;</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 *  判断是否为0</div><div class="line">	 *  @param n     [传入需要判断的数]</div><div class="line">	 *  @return  String      [返回布尔值]</div><div class="line">	 */</div><div class="line">	public String judgment(int n) throws Exception&#123;</div><div class="line">		</div><div class="line">		if(n == 0)&#123;</div><div class="line">			return &quot;为0&quot;;</div><div class="line">		&#125;else&#123;</div><div class="line">			return &quot;不为0&quot;;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 *  判断大于小于0</div><div class="line">	 *  @param n         [传入需要判断的数]</div><div class="line">	 *  @return  int      [返回整型]</div><div class="line">	 */</div><div class="line">	public int size(int n) throws Exception&#123;</div><div class="line">		</div><div class="line">		if(n &lt; 0)&#123;</div><div class="line">//			return -1;		   //小于0</div><div class="line">			throw new Exception(&quot;n小于0,所以抛出异常&quot;);</div><div class="line">		&#125;</div><div class="line">		if(n &gt; 0)&#123;</div><div class="line">			return 1;		  //大于0</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		return 0;             //等于0</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 *  排序</div><div class="line">	 *   @parram arr      [传入数组]</div><div class="line">	 */</div><div class="line">	public void sort(int [] nums)&#123;</div><div class="line">		</div><div class="line">		int len = nums.length; //数组长度</div><div class="line">		</div><div class="line">		//冒泡排序</div><div class="line">		for(int i = 0; i &lt; len - 1; i++)&#123;</div><div class="line">			for(int j = 0; j &lt; len - 1 - i; j++)&#123;</div><div class="line">				if(nums[j] &gt; nums[j +1])&#123;</div><div class="line">					int temp = nums[j] ^ nums[j + 1];</div><div class="line">					nums[j] ^= temp;</div><div class="line">					nums[j+1] ^= temp;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">**************************Person.java************************************</div><div class="line"></div><div class="line">package main;</div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line">	public String name;</div><div class="line">	public int age;</div><div class="line">	</div><div class="line">	public Person(String name, int age)&#123;</div><div class="line">		this.name = name;</div><div class="line">		this.age = age;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">**************************Parameter.java************************************</div><div class="line"></div><div class="line">package main;</div><div class="line"></div><div class="line"></div><div class="line">public class Parameter &#123;</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * 	 判断是n % 2 是否wield0</div><div class="line">	 * </div><div class="line">	 *   @param n  [需要判断的数]</div><div class="line">	 *   @return     [返回布尔类型]</div><div class="line">	 */</div><div class="line">	public boolean remainder(int n)&#123;</div><div class="line">		if(n % 2 == 0)&#123;</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		return false;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p><br></p>
<p>test包5个类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div></pre></td><td class="code"><pre><div class="line">**************************MathTest.java************************************</div><div class="line">package test;</div><div class="line"></div><div class="line"></div><div class="line">import static org.junit.Assert.assertEquals;</div><div class="line">import static org.junit.Assert.fail;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line"></div><div class="line">import org.junit.After;</div><div class="line">import org.junit.AfterClass;</div><div class="line">import org.junit.Before;</div><div class="line">import org.junit.BeforeClass;</div><div class="line">import org.junit.Ignore;</div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">import main.Math;</div><div class="line"></div><div class="line"></div><div class="line">/* </div><div class="line"> *  测试类</div><div class="line"> */</div><div class="line">public class MathTest &#123;</div><div class="line">	</div><div class="line">	//所有测试方法&quot;执行前&quot;调用【测试类没有实例化就已经被加载，用static修饰】</div><div class="line">	@BeforeClass    </div><div class="line">	public static void setUpBeforeClass()&#123;</div><div class="line">		System.out.println(&quot;===============》BeforeClass&quot;);</div><div class="line">	&#125;</div><div class="line">	//所有测试方法&quot;执行后&quot;调用【测试类没有实例化就已经被加载，用static修饰】</div><div class="line">	@AfterClass</div><div class="line">	public static void tearDownAfterClass()&#123;</div><div class="line">		System.out.println(&quot;===============》AfterClass&quot; + &quot;\n&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//每个测试用例&quot;执行前&quot;调用 </div><div class="line">	@Before</div><div class="line">	public void setUp()&#123;</div><div class="line">		System.out.println(&quot;--------Before--------&quot;);</div><div class="line">	&#125;</div><div class="line">	//每个测试用例&quot;执行后&quot;调用 </div><div class="line">	@After</div><div class="line">	public void tearDown()&#123;</div><div class="line">		System.out.println(&quot;--------Afte--------&quot;+ &quot;\n&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	</div><div class="line">	@Ignore 													 //Ignore表示不执行该测试用例</div><div class="line">	public void testJudgment()&#123;</div><div class="line">		System.out.println(&quot;执行测试用例1&quot;);</div><div class="line">		</div><div class="line">		try&#123;</div><div class="line">			assertEquals(&quot;用例1-----&gt;&quot;,&quot;为0&quot;,new Math().judgment(12));</div><div class="line">		&#125;catch (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Test(expected = Exception.class) 		//ecxceted参数检测是否抛出Exception异常 </div><div class="line">	public void testJudgmentException() throws Exception&#123;</div><div class="line">		System.out.println(&quot;测试用例2&quot;);</div><div class="line">		</div><div class="line">		new Math().size(-1);</div><div class="line">		fail(&quot;judgment函数的参数不为负数,没有抛出异常&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">	</div><div class="line">	@Test(timeout = 2000)  						//timeout参数超时设置【不超过2000毫秒[即是2s]】</div><div class="line">	public void testSort()&#123;</div><div class="line">		System.out.println(&quot;测试用例4&quot;);</div><div class="line">		</div><div class="line">		//生成5000个随机数</div><div class="line">		int [] nums = new int[5000];</div><div class="line">		for(int i = 0; i &lt; nums.length; i++)&#123;</div><div class="line">			nums[i] = (int)(java.lang.Math.random() * 1000);  //0-1000的随机数 </div><div class="line">		&#125;</div><div class="line"></div><div class="line">		new Math().sort(nums);											  //执行排序</div><div class="line">		</div><div class="line">		System.out.println(Arrays.toString(nums));				 //输出排序后数组</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div><div class="line">	</div><div class="line"></div><div class="line">**************************PersonTest.java************************************</div><div class="line">package test;</div><div class="line"></div><div class="line">import static org.junit.Assert.assertSame;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">import main.Person;</div><div class="line"></div><div class="line">/* </div><div class="line"> *  测试类</div><div class="line"> */</div><div class="line">public class PersonTest &#123;</div><div class="line"></div><div class="line">	@Test</div><div class="line">	public void testPerson()&#123;</div><div class="line">		System.out.println(&quot;PersonTest测试类-测试用例1&quot;);</div><div class="line">		Person person1 = new Person(&quot;小明&quot;,29);</div><div class="line">		Person person2 = new Person(&quot;小明&quot;,29);</div><div class="line">		Person person3 =person1;</div><div class="line">		</div><div class="line">		assertSame(person1,person3);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">**************************ParameterTest.java************************************</div><div class="line">package test;</div><div class="line"></div><div class="line">import static org.junit.Assert.assertEquals;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.Collection;</div><div class="line"></div><div class="line">import org.junit.Before;</div><div class="line">import org.junit.Test;</div><div class="line">import org.junit.runner.RunWith;</div><div class="line">import org.junit.runners.Parameterized;</div><div class="line"></div><div class="line">import main.Parameter;</div><div class="line">/*</div><div class="line"> *   参数化测试</div><div class="line"> *   	流程：</div><div class="line"> *   			1.使用@RunWith(Parameterized.class)声明测试类</div><div class="line"> *   			2.创建测试数据的方法(公共,静态)(返回一个对象的集合(数组)来作为测试数据集合)【使用@Parameterized.Parameters声明方法】</div><div class="line"> *				3.创建构造方法【接收测试数据(和2中测试数据的类型相同)】</div><div class="line"> *				4.全局变量        【接收构造方法的传值】</div><div class="line"> *				5.创建测试用例  【用@Test声明，并以4的全局变量进行测试】</div><div class="line"> *				6.在Test.java运行该测试类</div><div class="line"> */</div><div class="line">@RunWith(Parameterized.class)</div><div class="line">public class ParameterTest &#123;</div><div class="line"></div><div class="line">	private Parameter parameter;       //被测试的类</div><div class="line">	</div><div class="line">	private int inputNumber;				//输入参数</div><div class="line">	private boolean expectedResult;   //期望结果</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	//构造方法</div><div class="line">	public ParameterTest(int inputNumberm, boolean exectedResult) &#123;</div><div class="line">		this.inputNumber = inputNumberm;</div><div class="line">		this.expectedResult = exectedResult;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Before</div><div class="line">	public void init()&#123;</div><div class="line">		parameter = new Parameter();  //每一个测试用例都new一个对象</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	@Parameterized.Parameters        </div><div class="line">	public static Collection testDateCollection()&#123; </div><div class="line">		return Arrays.asList(new Object[][]&#123;</div><div class="line">			&#123;2,true&#125;,              //测试数据与期望值</div><div class="line">			&#123; 6, false &#125;,</div><div class="line">		    &#123; 20, true &#125;,</div><div class="line">		    &#123; 21, true &#125;,</div><div class="line">		    &#123; 23, false &#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	public void testRemainder()&#123;</div><div class="line">			System.out.println(&quot;输入参数&quot; + inputNumber);</div><div class="line">			assertEquals(expectedResult,</div><div class="line">					parameter.remainder(inputNumber));</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">**************************TestSuite.java************************************</div><div class="line">package test;</div><div class="line"></div><div class="line">import org.junit.runner.RunWith;</div><div class="line">import org.junit.runners.Suite.SuiteClasses;</div><div class="line">import org.junit.runners.Suite;</div><div class="line"></div><div class="line">/* </div><div class="line"> *  测试套件类</div><div class="line"> */</div><div class="line">@RunWith(Suite.class)</div><div class="line">@SuiteClasses(&#123;</div><div class="line">	MathTest.class,</div><div class="line">	PersonTest.class</div><div class="line">&#125;)</div><div class="line">public class TestSuite &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">**************************Test.java************************************</div><div class="line">package test;</div><div class="line"></div><div class="line">import org.junit.runner.JUnitCore;</div><div class="line">import org.junit.runner.Result;</div><div class="line">import org.junit.runner.notification.Failure;</div><div class="line"></div><div class="line"></div><div class="line">/* </div><div class="line"> *   运行主类</div><div class="line"> */</div><div class="line">public class Test &#123;</div><div class="line">	public static void main(String [] args)&#123;</div><div class="line">		</div><div class="line">//		//执行测试类1</div><div class="line">//		Result result = JUnitCore.runClasses(MathTest.class);</div><div class="line">//			System.out.println(&quot;~~~~~~~~错误信息~~~~~~~~：&quot;);</div><div class="line">//		for(Failure failure: result.getFailures())&#123;</div><div class="line">//			System.out.println(failure.getMessage());</div><div class="line">//</div><div class="line">//		&#125;</div><div class="line">//		System.out.println(&quot;************************************************&quot;);</div><div class="line">//		System.out.println(&quot;MathTest测试类的结果【运行结果(true or false)(有一个测试用例不成功即为false)】： &quot;+result.wasSuccessful());</div><div class="line">//			</div><div class="line">//		//执行测试类2</div><div class="line">//		Result result2 = JUnitCore.runClasses(PersonTest.class);</div><div class="line">//		System.out.println(&quot;PersonTest测试类的结果：&quot;+result2.wasSuccessful());</div><div class="line">//		</div><div class="line">//		//执行测试套件TestSuite【包含测试类1 和2】</div><div class="line">//		Result result3 = JUnitCore.runClasses(TestSuite.class);</div><div class="line">//			System.out.println(&quot;~~~~~~~~错误信息~~~~~~~~：&quot;);</div><div class="line">//		for(Failure failure: result3.getFailures())&#123;</div><div class="line">//			System.out.println(failure.getMessage());</div><div class="line">//</div><div class="line">//		&#125;</div><div class="line">//		System.out.println(&quot;************************************************&quot;);</div><div class="line">//		System.out.println(&quot;TestSuite测试套件类的结果： &quot;+result3.wasSuccessful());</div><div class="line">	</div><div class="line">	</div><div class="line">		//执行测试类4</div><div class="line">		Result result4 = JUnitCore.runClasses(ParameterTest.class);</div><div class="line">		System.out.println(&quot;~~~~~~~~错误信息~~~~~~~~：&quot;);</div><div class="line">		for(Failure failure: result4.getFailures())&#123;</div><div class="line">			System.out.println(failure.getMessage());</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		System.out.println(&quot;************************************************&quot;);</div><div class="line">		System.out.println(&quot;ParameterTest测试类的结果【参数化测试,一个false即为false】： &quot;+result4.wasSuccessful());</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><br></p>
<p>控制台输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">****************************执行测试类1******************************************</div><div class="line">===============》BeforeClass</div><div class="line">--------Before--------</div><div class="line">测试用例4</div><div class="line">--------Afte--------</div><div class="line"></div><div class="line">--------Before--------</div><div class="line">测试用例2</div><div class="line">--------Afte--------</div><div class="line"></div><div class="line">===============》AfterClass</div><div class="line"></div><div class="line">~~~~~~~~错误信息~~~~~~~~：</div><div class="line">************************************************</div><div class="line">MathTest测试类的结果【运行结果(true or false)(有一个测试用例不成功即为false)】： true</div><div class="line"></div><div class="line">****************************执行测试类1******************************************</div><div class="line"></div><div class="line">PersonTest测试类的结果：false</div><div class="line"></div><div class="line"></div><div class="line">****************************执行测试套件类3**************************************</div><div class="line"></div><div class="line">===============》BeforeClass</div><div class="line">--------Before--------</div><div class="line">测试用例4</div><div class="line">--------Afte--------</div><div class="line"></div><div class="line">--------Before--------</div><div class="line">测试用例2</div><div class="line">--------Afte--------</div><div class="line"></div><div class="line">===============》AfterClass</div><div class="line"></div><div class="line">PersonTest测试类-测试用例1</div><div class="line">~~~~~~~~错误信息~~~~~~~~：</div><div class="line">************************************************</div><div class="line">TestSuite测试套件类的结果： true</div><div class="line"></div><div class="line"></div><div class="line">****************************执行测试类4【参数化测试】*****************************</div><div class="line">输入参数2</div><div class="line">输入参数6</div><div class="line">输入参数20</div><div class="line">输入参数21</div><div class="line">输入参数23</div><div class="line">~~~~~~~~错误信息~~~~~~~~：</div><div class="line">expected:&lt;false&gt; but was:&lt;true&gt;</div><div class="line">expected:&lt;true&gt; but was:&lt;false&gt;</div><div class="line">************************************************</div><div class="line">ParameterTest测试类的结果【参数化测试,一个false即为false】： false</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="4-注意点"><a href="#4-注意点" class="headerlink" title="4.注意点"></a>4.注意点</h2><ul>
<li>静态导入org.junit.Assert.*;【加static】</li>
<li>测试用用例命名【test + 被测试的方法名】</li>
<li>测试类命名【被测试类 + Test】</li>
<li>assertEquals(预期结果,测试数)</li>
</ul>
<hr>
<p><br><br></p>
<h2 id="5-SSM框架中jUnit单元测试测试Mybatids-增删查改"><a href="#5-SSM框架中jUnit单元测试测试Mybatids-增删查改" class="headerlink" title="5. SSM框架中jUnit单元测试测试Mybatids[增删查改]"></a>5. SSM框架中jUnit单元测试测试Mybatids[增删查改]</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">package test.com.blog;</div><div class="line"></div><div class="line">import com.alibaba.fastjson.JSON;</div><div class="line">import com.blog.pojo.Article;</div><div class="line">import com.blog.service.IArticleService;</div><div class="line">import org.apache.log4j.Logger;</div><div class="line">import org.junit.Test;</div><div class="line">import org.junit.runner.RunWith;</div><div class="line">import org.springframework.test.context.ContextConfiguration;</div><div class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"></div><div class="line">import javax.annotation.Resource;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  测试Article表</div><div class="line"> *</div><div class="line"> * @Author Suvan</div><div class="line"> * @Date 2017-05-21-11:12</div><div class="line"> */</div><div class="line">@RunWith(SpringJUnit4ClassRunner.class)		//表示继承了SpringJUnit4ClassRunner类</div><div class="line">@ContextConfiguration(locations = &#123;&quot;classpath:spring-mybatis.xml&quot;&#125;)</div><div class="line">public class TestArticle &#123;</div><div class="line"></div><div class="line">    private static Logger logger = Logger.getLogger(TestArticle.class); //将此类加入日志</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    IArticleService articleService;</div><div class="line"></div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testInsertArticle()&#123;</div><div class="line">        Article article = new Article();</div><div class="line">        article.setTitle(&quot;第6666篇文章&quot;);</div><div class="line">        article.setContent(&quot;内容很多....&quot;);</div><div class="line">        article.setRead(&quot;42&quot;);</div><div class="line">        article.setComment(&quot;1&quot;);</div><div class="line">        article.setLike(&quot;23&quot;);</div><div class="line">        article.setUserId(1);</div><div class="line"></div><div class="line">        articleService.insertArticle(article);</div><div class="line">        logger.info(&quot;插入成功 -&gt; &quot; + JSON.toJSONString(article));  //打印语句</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testDeleteArticle()&#123;</div><div class="line">        articleService.deleteArticle(1);</div><div class="line"></div><div class="line">        logger.info(&quot;成功删除文章！&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testSelectArticle()&#123;</div><div class="line">        Article article = articleService.selectArticle(1);</div><div class="line">        logger.info(&quot;查询文章 -&gt; &quot;+JSON.toJSONString(article) +&quot;~~~~文章发布时间：(&quot;+article.getPublictime() + &quot;)&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testUpdateArticle()&#123;</div><div class="line">        Article newArticle = new Article();</div><div class="line">            newArticle.setId(2);                //指定id的文章进行更新</div><div class="line">            newArticle.setTitle(&quot;我是第二篇&quot;);</div><div class="line">            newArticle.setContent(&quot;哈哈哈&quot;);</div><div class="line"></div><div class="line"></div><div class="line">        String info = articleService.updateArticle(newArticle);</div><div class="line">        logger.info(info + &quot;----&quot; + JSON.toJSONString(newArticle));</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-前言&quot;&gt;&lt;a href=&quot;#一-前言&quot; class=&quot;headerlink&quot; title=&quot;一.前言&quot;&gt;&lt;/a&gt;一.前言&lt;/h1&gt;&lt;p&gt;参考资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://junit.org/junit4/&quot; target=&quot;_
    
    </summary>
    
      <category term="Test" scheme="http://suvan-l.github.io/categories/Test/"/>
    
    
      <category term="Test" scheme="http://suvan-l.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>MyProject_个人博客</title>
    <link href="http://suvan-l.github.io/2017/05/02/MyProject_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://suvan-l.github.io/2017/05/02/MyProject_个人博客/</id>
    <published>2017-05-02T00:07:43.000Z</published>
    <updated>2017-09-26T15:00:02.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-前言："><a href="#一-前言：" class="headerlink" title="一.前言："></a>一.前言：</h1><p>&emsp;完整搭建个人博客<br><br></p>
<p>开发环境</p>
<ul>
<li>IDE: IntelliJ IDEA 2016.3.5</li>
<li>Java: jdk1.8.0_65</li>
<li>服务器：Tomcat-8.0.41</li>
<li>项目管理(本地仓库管理依赖)：maven-3.3.9</li>
<li>版本控制：Github Git2.7.2.0</li>
<li>数据库：MySQL57<br><br></li>
</ul>
<p>所用的技术</p>
<ul>
<li>HTML+CSS+JavaScript</li>
<li>jsp + Servlet + ajax<br><br></li>
</ul>
<p>集成的框架<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">前端：</div><div class="line">		BookStrap</div><div class="line">		Query,Layui</div><div class="line">后端：</div><div class="line">	IoC容器：Spring</div><div class="line">	MVC的Controller: SpringMVC</div><div class="line">	ORM持久层框架: MyBatis</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>期望功能：</p>
<ol>
<li>博客【登录,注册(验证),文件上传与下载,】</li>
<li>文章增删查改,阅读数统计,评论,点赞</li>
</ol>
<p><br></p>
<p>项目结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">My_Blog</div><div class="line">	logs 	[存放日志文件(.log后缀)]</div><div class="line">		ssm.log</div><div class="line">	out 	[编译后文件]</div><div class="line">	src</div><div class="line">		main</div><div class="line">			java</div><div class="line">				com.blog</div><div class="line">					controller		[控制器]</div><div class="line">						interceptor 	[拦截器]</div><div class="line">					dao				[dao接口]</div><div class="line">					entity			[存放实体类-POJO(普通的java对象)]</div><div class="line">					extend			[第三方库的组件]</div><div class="line">						javamail    	[发送邮件]</div><div class="line">					myunits			[工具类]</div><div class="line">					service			[Server接口]</div><div class="line">						impl			[Server接口的实现实现类]</div><div class="line">			resources</div><div class="line">				mapping 			[存放dao接口对应的映射xml]</div><div class="line">				jdbc.properties 	[JDBC属性文件(文件编码为utf-8)]</div><div class="line">				log4j.properties 	[日志文件]</div><div class="line">				spring-mvc.xml      [spring MVC配置文件(自动扫描控制器,视图模式,注解启动)]</div><div class="line">				spring-mybatis.xml  [spring和mybatis整合配置文件]</div><div class="line">			webapp</div><div class="line">				css</div><div class="line">				extend 				[扩展]</div><div class="line">					icon				[Iconfont-阿里巴巴矢量图标库]</div><div class="line">				file 				[存放文件]</div><div class="line">					download			[下载文件]</div><div class="line">				frame  				[前端框架]</div><div class="line">					bootstrap-3.3.7-dist</div><div class="line">					jQuery</div><div class="line">					layui</div><div class="line">				html</div><div class="line">				img    				[项目用图]</div><div class="line">				js</div><div class="line">				WEB-INF</div><div class="line">					jsp</div><div class="line">					lib</div><div class="line">					web.xml</div><div class="line">				index.jsp  			[博客首页]</div><div class="line">		test</div><div class="line">			java</div><div class="line">				test.com.blog [存放jUnit的测试类]</div><div class="line"></div><div class="line">	target	[Tomcat服务器编译临时文件]</div><div class="line">	.gitignore[Github屏蔽不上传的目录]</div><div class="line">	MyProject_个人博客.md </div><div class="line">	My_Blog.iml</div><div class="line">	pom.xml</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>设计数据库表【.sql脚本】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/*</div><div class="line"> * 一.自己新建数据库【在数据库里执行下列SQL脚本】</div><div class="line"> *      数据库名：myblog</div><div class="line"> *      字符集：  utf8--UTF-8 Unicode</div><div class="line"> *      排序规则: utf8_general_ci</div><div class="line"> *  </div><div class="line"> *  SQL语句：</div><div class="line"> *     CREATE DATABASE myblog;   </div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line">/*</div><div class="line"> * 二.建表</div><div class="line"> */</div><div class="line">-- 1.用户表</div><div class="line">    CREATE TABLE user(</div><div class="line">        u_id INT  AUTO_INCREMENT primary key,</div><div class="line">        u_name VARCHAR(15) UNIQUE KEY,</div><div class="line">        u_password VARCHAR(15) NOT NULL,</div><div class="line">        u_sex  VARCHAR(2),</div><div class="line">        u_birthday VARCHAR(20),</div><div class="line">        u_address VARCHAR(15),</div><div class="line">        u_phone VARCHAR(15),</div><div class="line">        u_email  VARCHAR(50)  NOT NULL,</div><div class="line">        u_registertime DATETIME DEFAULT NOW()</div><div class="line">     )ENGINE = innoDB;</div><div class="line"></div><div class="line"></div><div class="line">-- 2.文章表</div><div class="line">CREATE TABLE article(             </div><div class="line">    a_id INT  AUTO_INCREMENT primary key,       /*[文章id(自增)]*/</div><div class="line">    a_title VARCHAR(50) NOT NULL,               /*[标题]*/</div><div class="line">    a_content LongText  NOT NULL,         			/*[内容]*/</div><div class="line">    a_categories VARCHAR(20) NOT NULL,			/*文章类型*/</div><div class="line">    a_read VARCHAR(10) default &apos;0&apos;,             /*[阅读数]*/</div><div class="line">    a_comment VARCHAR(10) default &apos;0&apos;,          /*[评论数]*/</div><div class="line">    a_like  VARCHAR(10) default &apos;0&apos;,            /*[点赞数]*/</div><div class="line">    u_id INT NOT NULL,                          /*[用户id]*/</div><div class="line">    a_publictime  DATETIME DEFAULT NOW()        /*[发布时间]*/</div><div class="line">)ENGINE = innoDB;</div><div class="line"></div><div class="line"></div><div class="line">-- 3.评论表</div><div class="line">CREATE TABLE comment( </div><div class="line">    c_id INT  AUTO_INCREMENT primary key,       /*[评论id[自增]]*/</div><div class="line">    c_content VARCHAR(300)  NOT NULL,           /*[内容]*/</div><div class="line">    c_agree VARCHAR(10) default &apos;0&apos;,            /*[同意数]*/</div><div class="line">    c_oppose VARCHAR(10) default &apos;1&apos;,           /*[反对数]*/</div><div class="line">    a_id INT,                                   /*[文章id]*/</div><div class="line">    u_id INT,                                   /*[用户id]*/</div><div class="line">    c_publictime DATETIME DEFAULT NOW()     /*[发布时间]*/</div><div class="line">)ENGINE = innoDB;</div><div class="line"></div><div class="line"></div><div class="line">/*</div><div class="line"> * 三.插入测试数据</div><div class="line"> */</div><div class="line">#user表</div><div class="line">insert into user(u_name,u_password,u_sex,u_birthday,u_address,u_phone,u_email) values(&apos;suvan&apos;,&apos;12345&apos;,&apos;男&apos;,&apos;2001-05-18&apos;,&apos;广东省佛山市南海区&apos;,&apos;13289966310&apos;,&apos;suvan@gmail.com&apos;);</div><div class="line">insert into user(u_name,u_password,u_sex,u_birthday,u_address,u_phone,u_email) values(&apos;TOM&apos;,&apos;12345&apos;,&apos;女&apos;,&apos;1983-05-18&apos;,&apos;广东省深圳市罗湖区&apos;,&apos;1389128573&apos;,&apos;1389128573@163.com&apos;);</div><div class="line">insert into user(u_name,u_password,u_sex,u_birthday,u_address,u_phone,u_email) values(&apos;瓜皮&apos;,&apos;12345&apos;,&apos;男&apos;,&apos;2001-05-18&apos;,&apos;广东省河源市龙川&apos;,&apos;18154876543&apos;,&apos;723583341@qq.com&apos;);</div><div class="line"></div><div class="line">#article表</div><div class="line">insert into article(a_title,a_content,a_read,a_comment,a_like,u_id) values(&apos;学习使我快乐&apos;,&apos;皮皮皮皮123&apos;,&apos;523&apos;,&apos;64&apos;,&apos;83&apos;,&apos;1&apos;);</div><div class="line">insert into article(a_title,a_content,a_read,a_comment,a_like,u_id) values(&apos;看书吗&apos;,&apos;死亡开端还不错啦&apos;,&apos;56&apos;,&apos;2&apos;,&apos;23&apos;,&apos;2&apos;);</div><div class="line">insert into article(a_title,a_content,a_read,a_comment,a_like,u_id) values(&apos;看书吗&apos;,&apos;死亡开端还不错啦&apos;,&apos;182&apos;,&apos;5&apos;,&apos;62&apos;,&apos;3&apos;);</div><div class="line">insert into article(a_title,a_content,a_read,a_comment,a_like,u_id) values(&apos;第五部&apos;,&apos;皮皮皮皮123&apos;,&apos;523&apos;,&apos;64&apos;,&apos;83&apos;,&apos;1&apos;);</div><div class="line">insert into article(a_title,a_content,a_read,a_comment,a_like,u_id) values(&apos;书5&apos;,&apos;死亡开端还不错啦&apos;,&apos;56&apos;,&apos;2&apos;,&apos;23&apos;,&apos;2&apos;);</div><div class="line">insert into article(a_title,a_content,a_read,a_comment,a_like,u_id) values(&apos;今天还好吗&apos;,&apos;死亡开端还不错啦&apos;,&apos;56&apos;,&apos;2&apos;,&apos;23&apos;,&apos;2&apos;);</div><div class="line">insert into article(a_title,a_content,a_read,a_comment,a_like,u_id) values(&apos;我就一脚吹过去&apos;,&apos;死亡开端还不错啦&apos;,&apos;56&apos;,&apos;2&apos;,&apos;23&apos;,&apos;2&apos;);</div><div class="line"></div><div class="line">#comment表</div><div class="line">insert into comment(c_content,c_agree,c_oppose,a_id,u_id) values(&apos;不错&apos;,&apos;52&apos;,&apos;23&apos;,&apos;1&apos;,&apos;2&apos;);</div><div class="line">insert into comment(c_content,c_agree,c_oppose,a_id,u_id) values(&apos;挺好的&apos;,&apos;892&apos;,&apos;673&apos;,&apos;1&apos;,&apos;1&apos;);</div><div class="line">insert into comment(c_content,c_agree,c_oppose,a_id,u_id) values(&apos;很棒哦&apos;,&apos;5431&apos;,&apos;889&apos;,&apos;1&apos;,&apos;2&apos;);</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br><br></p>
<h1 id="二-目录-开发日志"><a href="#二-目录-开发日志" class="headerlink" title="二.目录[开发日志]"></a>二.目录[开发日志]</h1><p><br></p>
<p>2017年</p>
<ul>
<li>【5.2】构思项目体系,复习HTML,学习<a href="https://www.layui.com/" target="_blank" rel="external">Layui</a>,</li>
<li>【5.3】复习CSS，学习<a href="http://v3.bootcss.com/" target="_blank" rel="external">BookStrap</a></li>
<li>【5.4】在<a href="http://www.w3school.com.cn/复习HTML" target="_blank" rel="external">W3C</a>,熟悉BookStrap的CSS样式</li>
<li>【5.9】熟悉BookStrap的栅格系统,导航栏样式,开发index.html(首页)导航栏</li>
<li>【5.10】 响应式导航栏</li>
<li>【5.11】 首页背景图</li>
<li>【5.13】 首页登录框,复习JavaScript</li>
<li>【5.14】 复习jQuery,注册页面的HTML+CSS</li>
<li>【5.15】 注册页面优化 + JavaScript验证[jQuery进行事件绑定]</li>
<li>【5.16】 后台管理页面[基本HTML+CSS]</li>
<li>【5.17】 后台管理页面[用layui+jQueryJS切换布局]</li>
<li>【5.18】 设计数据库表 + 学习——搭建SSM(Spring4 + Spring MVC +MyBatis)</li>
<li>【5.19】 搭建SSM后台环境,使用jUnit进行的简单元测试(MyBatis数据库查询)</li>
<li>【5.20】根据myblog的数据表编写POJO,SQL脚本插入测试数据</li>
<li>【5.21】数据表[user,article,comment],使用MyBatis编写增删查改,并用jUnit进行测试</li>
<li>【5.22】idea安装JRebel插件[激活破解,实现java代码热更新],规划spring-mvc.xml文件,学习编写的controller[控制器]和interceptor[拦截器],尝试RESTFul风格的URL访问请求</li>
<li>【5.23】SpringMVC的注解,文件上传与下载,拦截器</li>
<li>【5.24】web.xml,spring和mybatis配置文件整理</li>
<li>【5.27】html/index.html,页面优化，文章展示</li>
<li>【5.28】前后端JSON数据进行交互【jQuery的ajax接收JSON数据与生成DOM元素 + SpringMVC的@Response传递JSON数据(单篇or多篇文章[查询单条 or 多条记录])】</li>
<li>【5.29】优化register.html[注册页面]的jQuery代码的JS验证,使用JavaMail完成发送邮件验证码功能【可利用163,qq,gmail邮箱发送】</li>
<li>【5.30】尝试使用开源的hMailServer,搭建邮箱服务器【失败,偶尔能发邮件,无法接收】</li>
<li>【5.31】局域网和腾讯云服务器搭建hMailserver,购买域名liushuwei.cn,配置DNS，指向云服务器,设置个人邮箱suvan@liushuwei.cn,注册页面的发送邮箱验证码使用改邮箱进行发送</li>
<li>【6.1】半个咸鱼,更新域名,博客www.liushuwei.cn,邮箱suvan@liushuwei.cn,邮件客户端使用foxmail,可实现局域网内互传(他人连我Wifi)【校园局域网无法连接到我的服务器IP,未解决】</li>
<li>【6.6】设计博客首页,规划与重写html/index.html的html和CSS</li>
<li>【6.7】博客首页(html/index.html)的动画效果</li>
<li>【6.8】博客文章页面的基本HTML+CSS+jQuery(标题,返回按钮,小球动画,内容区,评论区,小球动画),异步请求获取文章评论信息</li>
<li>【6.9】文章页面的点赞反对(带有动画)阅读计数,评论功能,markdonw解析器[js的marked(未自己定义css样式)]</li>
<li>【6.10】归档页面,index.html转为index.jsp,学习Filte过滤器拦截请求</li>
<li>【6.11】学习JSP,熟悉EL表达式,JSTL标签,article.html转为article.jsp[重点改JS文件]研究Spring代理过滤器【失败】</li>
<li>【6.13】归档页设计archiving.jsp,CSS布局,浮动,块元素理解</li>
<li>【6.15】Bootstrap栅格系统重写归档页,jsp分页</li>
<li>【6.20】 分类页年份列表</li>
<li>【6.23】研究爬虫webMagic,爬取金蝶行动流(<a href="https://www.xingdongliu.com/)的数据,页面JS动态生成,数据经过woff加密,使用selenium浏览器渲染爬取,仍然失败,设计ClassMastesUser[同学会统计功能],在云服务器配置JDK+MySQL+Tomcat+sftp" target="_blank" rel="external">https://www.xingdongliu.com/)的数据,页面JS动态生成,数据经过woff加密,使用selenium浏览器渲染爬取,仍然失败,设计ClassMastesUser[同学会统计功能],在云服务器配置JDK+MySQL+Tomcat+sftp</a></li>
<li>【6.24】尝试发布到腾讯云服务器,数据表单,js验证,数据库持久化操作,邮件发送,页面无法手机浏览器兼容,不是响应式页面</li>
<li>【6.25】尝试在本地进行路由器配置,动态域名服务 DDNS【花生壳】,端口映射</li>
<li>【6.26】尝试frp进行内网穿透(依旧很卡)</li>
<li>【6.27】同学会统计表单页面完成【自动播放音频,js控制暂停】,功能实现,明日尝试发布到服务器,初步了解Linux,</li>
<li>【6.28】加入stock[股票页面],学习jsoup访问新浪提供的股票接口[应用在项目里报错,未解决]</li>
<li>【7.6】同学会统计功能,本地服务器,frp内网穿透[公网Linux服务器],createExcel,自动生成excel表工具</li>
<li>【7.7】createExcel生成工具,实现Excel表去重(倒叙最新),总结慕课网Socket通信知识</li>
<li>【9.8】2017.09.08 第15次提交 参考nexT主题,重新设计index页面,重写HTML与CSS,加入jQuery动画【未解决:查询数据库最新生成的5篇文章失败】</li>
<li>【9.9】解决9.8问题(mapping中的SQL语句改为以publictime排序),重写登录界面,未实现功能<br>+【9.11】SpringMVC的Cookie+Interceptor实现自动登录<br>+【9.12】代码优化,细节整理<br>+【9.15~9.16】重写注册页面HTML+CSS+js(jQuery),实现JS验证,用户唯一性ajax验证,发送邮箱验证码验证,注册用户功能<br>+【9.16晚】归档页面优化与整理</li>
<li>【9.17~9.18】Article的Mapper,DAO,Service,重新设计,IDEA加入ideavim和emacsIDEAS插件,尝试键盘流,分类页面重新设计</li>
<li>【9.21】重新设计文章页面HTML+CSS</li>
<li>【9.22】文章评论模块的样式调整</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-前言：&quot;&gt;&lt;a href=&quot;#一-前言：&quot; class=&quot;headerlink&quot; title=&quot;一.前言：&quot;&gt;&lt;/a&gt;一.前言：&lt;/h1&gt;&lt;p&gt;&amp;emsp;完整搭建个人博客&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;开发环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IDE: Intel
    
    </summary>
    
      <category term="MyProject" scheme="http://suvan-l.github.io/categories/MyProject/"/>
    
    
      <category term="MyProject" scheme="http://suvan-l.github.io/tags/MyProject/"/>
    
  </entry>
  
  <entry>
    <title>Maven_错误记录</title>
    <link href="http://suvan-l.github.io/2017/04/29/Maven_%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    <id>http://suvan-l.github.io/2017/04/29/Maven_错误记录/</id>
    <published>2017-04-29T02:43:40.000Z</published>
    <updated>2017-09-21T08:11:21.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>目录：</p>
<ol>
<li>本地安装Maven</li>
<li>我的settings配置文件</li>
<li>创建maven项目【无模版-基本环境搭建】</li>
<li>idea的java项目添加Maven支持</li>
</ol>
<hr>
<p><br><br><br></p>
<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><h2 id="1-本地安装Maven"><a href="#1-本地安装Maven" class="headerlink" title="1.本地安装Maven"></a>1.本地安装Maven</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;网：http://maven.apache.org/download.cgi</div><div class="line">    下载apache-maven-3.3.9-bin.zip</div><div class="line"></div><div class="line">&lt;2&gt;配置环境变量:</div><div class="line">    MAVEN_HOME:E:\Java\Maven\apache-maven-3.3.9\bin</div><div class="line">    Path: ......%MAVEN_HOME%;e</div><div class="line"></div><div class="line">&lt;3&gt;验证</div><div class="line">    打开cmd 输入 mvn -v 【验证是否配置成功】</div><div class="line"></div><div class="line"></div><div class="line">&lt;4&gt;更换中央仓库：【修改maven根目录下的conf文件中的setting.xml文件】</div><div class="line">  &lt;mirrors&gt;</div><div class="line">    &lt;mirror&gt;</div><div class="line">      &lt;id&gt;alimaven&lt;/id&gt;</div><div class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</div><div class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</div><div class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </div><div class="line">    &lt;/mirror&gt;</div><div class="line">  &lt;/mirrors&gt;</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="2-我的settings配置文件"><a href="#2-我的settings配置文件" class="headerlink" title="2. 我的settings配置文件"></a>2. 我的settings配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</div><div class="line">          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">          xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;</div><div class="line"> </div><div class="line">  &lt;!--</div><div class="line">    1.全局配置：$&#123;M2_HOME&#125;/conf/settings.xml 【对操作系统的所有使用者生效】</div><div class="line">    2.用户配置：$&#123;user.home&#125;/.m2/settings.xml</div><div class="line">    【对当前操作用户的使用者生效】</div><div class="line">            两者都存在，内容合并，用户的settings会覆盖全局的settings</div><div class="line"></div><div class="line">  --&gt;</div><div class="line">  &lt;!-- 本地仓库位置 --&gt;</div><div class="line">  &lt;localRepository&gt;E:\Java\Maven\repository&lt;/localRepository&gt;</div><div class="line"></div><div class="line">  &lt;!--搜索插件组织ID的列表 --&gt;</div><div class="line">   &lt;pluginGroups&gt;</div><div class="line">  &lt;/pluginGroups&gt;</div><div class="line"></div><div class="line">  &lt;!-- 用于来配置不同的代理[简单的设置profile id可以很容易的更换整个代理配置] --&gt;</div><div class="line">  &lt;proxies&gt;</div><div class="line">  &lt;/proxies&gt;</div><div class="line"></div><div class="line"> 　&lt;!-- 配置服务端的设置 --&gt;</div><div class="line">  &lt;servers&gt;</div><div class="line">  &lt;/servers&gt;</div><div class="line"></div><div class="line">  &lt;!-- 为仓库列表配置下载的镜像列表【只要本地仓库没有，就到指定公共仓库下载】--&gt;</div><div class="line">  &lt;mirrors&gt;</div><div class="line">    &lt;!-- 阿里云仓库 --&gt;</div><div class="line">    &lt;mirror&gt;</div><div class="line">      &lt;id&gt;alimaven&lt;/id&gt;</div><div class="line">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</div><div class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</div><div class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</div><div class="line">    &lt;/mirror&gt;</div><div class="line">    &lt;!--Maven仓库1--&gt;</div><div class="line">    &lt;mirror&gt;</div><div class="line">        &lt;id&gt;UK&lt;/id&gt;</div><div class="line">        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</div><div class="line">        &lt;url&gt;http://uk.maven.org/maven2&lt;/url&gt;</div><div class="line">    &lt;/mirror&gt;  </div><div class="line">  &lt;/mirrors&gt;</div><div class="line"></div><div class="line">  &lt;!-- 根据环境参数来调整构造配置的列表 --&gt;</div><div class="line">  &lt;profiles&gt;</div><div class="line">  &lt;/profiles&gt;</div><div class="line"></div><div class="line">  &lt;!-- activeProfiles</div><div class="line">   | List of profiles that are active for all builds.</div><div class="line">   |</div><div class="line">  &lt;activeProfiles&gt;</div><div class="line">    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;</div><div class="line">    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;</div><div class="line">  &lt;/activeProfiles&gt;</div><div class="line">  --&gt;</div><div class="line">&lt;/settings&gt;</div></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="3-创建maven项目【无模版-基本环境搭建】"><a href="#3-创建maven项目【无模版-基本环境搭建】" class="headerlink" title="3. 创建maven项目【无模版-基本环境搭建】"></a>3. 创建maven项目【无模版-基本环境搭建】</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">1. 创建Maven项目【不使用模版】,自定义GroupId和Arifactld</div><div class="line">2. 部署项目[Porject Structure]</div><div class="line">	A.添加Modules【选web模版】</div><div class="line">		(a1)修改资源目录[Web Resource Directories]</div><div class="line">			E:\Java\Intellij IDEA\项目\My_Blog\src\main\webapp</div><div class="line">			 ~~~【这里指定src\main文件，并输入webapp】</div><div class="line">		(a2)修改描述文件[Deployment Descriptor]</div><div class="line">			E:\Java\Intellij IDEA\项目\My_Blog\src\main\webapp\WEB-INF\web.xml</div><div class="line">			~~~【这里同样将目录指定到webapp】</div><div class="line">	B.添加Artifacts【描述了当前项目的发布信息】</div><div class="line">		&apos;+&apos; 号 </div><div class="line">			-&gt; Web Application Exploded</div><div class="line">			-&gt; From Modules...</div><div class="line">			-&gt; 选择当前项目</div><div class="line">			【左列表出现已有的发布项目，右列表的output root目录描述了当前项目的编译目录及适配服务】</div><div class="line">3.在webapp\WEB-INF\目录下 -&gt; 新建lib目录</div><div class="line">4.部署服务器</div><div class="line">	菜单栏Run</div><div class="line">		(A)</div><div class="line">		-&gt;Edit Configurations</div><div class="line">		-&gt; &apos;+&apos; 号</div><div class="line">		-&gt; Tomcat Server ==&gt; Local</div><div class="line">		-&gt;右界面Deployment【第二列菜单栏】</div><div class="line">		-&gt;&apos;+&apos; 号 ==&gt;  Artifact...</div><div class="line"></div><div class="line">		(B)</div><div class="line">		-&gt;回到Server【第二列菜单栏】</div><div class="line">			在[On &apos;Update&apos; action]</div><div class="line">			  [On frame deactivation]</div><div class="line">			  		==&gt; 都选择Update classes and resources</div><div class="line"></div><div class="line">		(C)</div><div class="line">		-&gt;回到Server【第二列菜单栏】</div><div class="line">			选择默认浏览器</div><div class="line"></div><div class="line">5.添加Tomcat依赖</div><div class="line">	部署项目[Project Structure] </div><div class="line">		-&gt; Modules </div><div class="line">		-&gt; 右界面选择项目 ==&gt; Dependencies[依赖]</div><div class="line">	    -&gt; &apos;+&apos;号  ==&gt;  Library...</div><div class="line">	    -&gt; Application Server Libraries ==&gt; 选择相应Tomcat版本</div><div class="line"></div><div class="line"></div><div class="line">6.项目结构</div><div class="line">	My_Blog</div><div class="line">		out  【编译文件目录】</div><div class="line">		src  </div><div class="line">			main  【主要源码目录】</div><div class="line">			 	java</div><div class="line">			 	resources</div><div class="line">			 	webapp</div><div class="line">			 		_lib         【存放扩展jar包】</div><div class="line">			 		_WEB-INF</div><div class="line">			 			web.xml  【web项目配置文件】</div><div class="line">			test   【测试目录】</div><div class="line">				java</div><div class="line">		target</div><div class="line">		My_Blog.iml</div><div class="line">		pom.xml    【Maven配置文件】</div><div class="line">	External Libraries  【库】</div><div class="line"></div><div class="line"></div><div class="line">**********************************************</div><div class="line">	若需要用模版创建则在New Project时</div><div class="line">		[打勾][Create from archetype]</div><div class="line">		然后选择</div><div class="line">			org.appache.maven.archetypes:maven-archetype-webapp</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="4-idea的java项目添加Maven支持"><a href="#4-idea的java项目添加Maven支持" class="headerlink" title="4. idea的java项目添加Maven支持"></a>4. idea的java项目添加Maven支持</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">先新建项目</div><div class="line">	-&gt;在左侧边栏右键项目 -&gt; Add Framwork Support... </div><div class="line">	-&gt; 找到Maven</div></pre></td></tr></table></figure>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><br></h2><p><br><br></p>
<hr>
<p><br><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;p&gt;目录：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地安装Maven&lt;/li&gt;
&lt;li&gt;我的settings配置文件&lt;/li&gt;
&lt;li&gt;创建maven项目【
    
    </summary>
    
      <category term="Maven" scheme="http://suvan-l.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://suvan-l.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>intellijIDEA_错误记录</title>
    <link href="http://suvan-l.github.io/2017/04/27/intellijIDEA_%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    <id>http://suvan-l.github.io/2017/04/27/intellijIDEA_错误记录/</id>
    <published>2017-04-27T00:50:41.000Z</published>
    <updated>2017-09-26T10:18:40.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录"><a href="#一-目录" class="headerlink" title="一.目录"></a>一.目录</h1><p>参考资料：</p>
<ul>
<li><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a></li>
</ul>
<p>目录：</p>
<ol>
<li>将项目远程提交到Github</li>
<li>设置Tomcat热更新[静态动态网页文件]</li>
<li>安装JRebel插件,实现热部署[java文件]</li>
<li>idea的代码生成器[Live Templates]</li>
<li>自动提示方法参数[鼠标移动到方法名]</li>
<li>配置SFTP[远程服务器用于上传文件]</li>
<li>idea每次运行Java文件,提示Warning(:java:)资源值1.5已过时</li>
<li>idea常用快捷键</li>
<li>ideaVim插件</li>
<li>emacsIDEAs插件</li>
<li>IDEA创建Maven项目</li>
<li>IDEA从Github上面Clone项目,本地配置Maven</li>
<li>将clone的项目更改后,pull到Github</li>
<li>安装waketime【记录coding时间】</li>
</ol>
<hr>
<p><br><br><br></p>
<h1 id="二-错误"><a href="#二-错误" class="headerlink" title="二.错误"></a>二.错误</h1><h2 id="1-将项目远程提交到Github"><a href="#1-将项目远程提交到Github" class="headerlink" title="1.将项目远程提交到Github"></a>1.将项目远程提交到Github</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1.菜单栏VCS</div><div class="line">	-&gt; Import into Version Control</div><div class="line">		 -&gt;	Share project on GitHub</div><div class="line"></div><div class="line">2.Settings</div><div class="line">	-&gt;	Version Control</div><div class="line">		-&gt;	Github 填入帐号密码</div><div class="line">		-&gt;  Git 安装Git，并指定git.exe路径，Test测试</div><div class="line"></div><div class="line">3.提交</div><div class="line">	VSC -&gt; Update Project...[更新项目]</div><div class="line">		-&gt; Commit Changes...[提交修改]</div><div class="line"></div><div class="line">	 -&gt;右键项目</div><div class="line">	 	-&gt;Git </div><div class="line">	 		-&gt; Repository -&gt; Pull..【下载】</div><div class="line">	 						 Push..【提交】</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="2-设置Tomcat热更新-静态动态网页文件"><a href="#2-设置Tomcat热更新-静态动态网页文件" class="headerlink" title="2.设置Tomcat热更新[静态动态网页文件]"></a>2.设置Tomcat热更新[静态动态网页文件]</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">顶部菜单</div><div class="line">Run</div><div class="line">	-&gt;Edit Comfigurations</div><div class="line">		-&gt;配置Tomcat Server</div><div class="line">			(1)-&gt;点击Deployment,添加Deploy at the server startup【相当于部署】</div><div class="line">				-&gt;&apos;+&apos;号,点击Artifact..</div><div class="line">				-&gt;选择项目名:war exploded【exploded是部署到Tomcat的webapps目录下,效率个人能更高】</div><div class="line"></div><div class="line">				【可选：可删除底部的Build(提高效率)】</div><div class="line"></div><div class="line">			(2)-&gt;回到Server</div><div class="line">				On &apos;Update&apos; action 和On frame deactivation </div><div class="line">				这两项目一定要选择 Update classes and resources</div><div class="line"></div><div class="line"></div><div class="line">		-&gt;Apple  -&gt;OK  【配置成功】</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="3-安装JRebel插件-实现热部署-java文件"><a href="#3-安装JRebel插件-实现热部署-java文件" class="headerlink" title="3. 安装JRebel插件,实现热部署[java文件]"></a>3. 安装JRebel插件,实现热部署[java文件]</h2><p>参考资料</p>
<ul>
<li><a href="https://pan.baidu.com/s/1bpsMm3l" target="_blank" rel="external">IDEA 破解激活Jrebel6.4使用教程.zip【百度云】</a></li>
<li><a href="http://www.jianshu.com/p/008bd27bbd77" target="_blank" rel="external">IntelliJ IDEA - JRebel安装使用教程</a><br><br></li>
</ul>
<p>安装+破解步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;安装</div><div class="line">        a.【直接搜索插件下载】</div><div class="line">                IDEA --- File ---Settings --- Plugins --- Browse reponsitories 在搜索框输入 Jrebel 即可安装下载</div><div class="line">        b.【压缩包安装】</div><div class="line">                IDEA --- File ---Settings --- Plugins---Install plugin from disk...  --&gt;jr-ide-idea-6.4.0-idea-13-15.zip</div><div class="line"></div><div class="line">&lt;2&gt;破解</div><div class="line">            a.解压&quot;jrebel-6.4.0-Enterprise.Cracked-ZCT.zip&quot;</div><div class="line">            b.将解压出来的</div><div class="line">                    jrebel </div><div class="line">                    jrebel6</div><div class="line">                    jrebel.lic(许可证)</div><div class="line">                 直接拉到C:\Users\sun\.IntelliJIdea15\config\plugins\jr-ide-idea\lib目录,覆盖</div><div class="line"></div><div class="line">            c.File--settings ---Jrebel --- 右上角 Open Activation Dialog,弹框 --》</div><div class="line">                中间那行License file from the hard drive,选择Browse,选择上述的jrebe.lic文件</div><div class="line"></div><div class="line"></div><div class="line">            d.窗口内容改变,变成JRebel activated，激活陈功</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="4-idea的代码生成器-Live-Templates"><a href="#4-idea的代码生成器-Live-Templates" class="headerlink" title="4.idea的代码生成器[Live Templates]"></a>4.idea的代码生成器[Live Templates]</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">顶部菜单 -&gt; File -&gt; Settings【快捷键打开：ctrl + ald + s】</div><div class="line">						-&gt; Editor</div><div class="line">							-&gt; Live Templates  </div><div class="line"></div><div class="line"></div><div class="line">java</div><div class="line">	sout	-&gt; 	(System.out.printl)</div><div class="line">	psvm	-&gt;  (main()-主函数)</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="5-自动提示方法参数-鼠标移动到方法名"><a href="#5-自动提示方法参数-鼠标移动到方法名" class="headerlink" title="5. 自动提示方法参数[鼠标移动到方法名]"></a>5. 自动提示方法参数[鼠标移动到方法名]</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ctrl + alt + s  </div><div class="line">	-&gt;Editor -&gt; General </div><div class="line"></div><div class="line">		-&gt; 右边窗:Show quick documentation on mouse move Delay</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="6-配置SFTP-远程服务器用于上传文件"><a href="#6-配置SFTP-远程服务器用于上传文件" class="headerlink" title="6. 配置SFTP[远程服务器用于上传文件]"></a>6. 配置SFTP[远程服务器用于上传文件]</h2><p>流程：</p>
<ol>
<li>在远程服务器(windows Server)上安装FreeSSHhd软件<a href="http://www.freesshd.com/" target="_blank" rel="external">FreeHd官网</a></li>
<li>在idea配置sftp服务器</li>
<li>上传文件<br><br></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">1. </div><div class="line"> 	a.根据提示一步步安装-&gt;安装完成后会弹框2个[中译:是否安装密钥 + 是否安装成系统服务]</div><div class="line">    b.安装后 Servert status -&gt; 开启SSH server is running[如果报错则吧系统服务关闭后，关闭软件,以系统管理员身份启动]</div><div class="line">    c.Authentication </div><div class="line">    		-&gt;Password authentication设置成Allow(或者 Required)</div><div class="line">    		-&gt;Public key authentication 设置成 Disbled</div><div class="line">    d.SSH</div><div class="line">    	-&gt;Listen address设置成 &lt;服务器ip&gt;</div><div class="line">    e.SFTP</div><div class="line">    	-&gt;SFTP home path(上传根目录)</div><div class="line">    f.Users</div><div class="line">    	-&gt;Add(添加用户)</div><div class="line">    		-&gt;Login [登录名]</div><div class="line"> 			-&gt;Authroization [验证方式]</div><div class="line"> 			-&gt;User can use [权限，打勾SFTP]</div><div class="line"></div><div class="line"></div><div class="line">****************************************************</div><div class="line"></div><div class="line">2.idea操作</div><div class="line">	Settings[快捷键:ctrl + alt + s]</div><div class="line">		-&gt; Build,Execution,Deployment</div><div class="line">			-&gt;Deployment</div><div class="line">				-&gt;&apos;+&apos;号</div><div class="line">					Name [昵称(随意填写)]</div><div class="line">					Connection</div><div class="line">						&lt;1&gt;Type		[sftp类型]</div><div class="line">						&lt;2&gt;SFTP host	[服务器ip]【Test SFTP..测试是否能连接服务器】</div><div class="line">						&lt;3&gt;Port			[SSH端口]</div><div class="line">						&lt;4&gt;Root path	[根据FreeSSHhd的设置路径后的继续路径]</div><div class="line">					Mappings</div><div class="line">						&lt;1&gt;Deployment path on server[根路径后的部署路径]</div></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><p><br><br></p>
<h2 id="7-idea每次运行Java文件-提示Warning-java-资源值1-5已过时"><a href="#7-idea每次运行Java文件-提示Warning-java-资源值1-5已过时" class="headerlink" title="7. idea每次运行Java文件,提示Warning:java:资源值1.5已过时"></a>7. idea每次运行Java文件,提示Warning:java:资源值1.5已过时</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">提示报错</div><div class="line">	Warning:java:源值1.5已过时,将在未来所有发行版中删除</div><div class="line">	Warning:java:目标值1.5已过时,将在未来所有发行版中删除</div><div class="line">	Warning:java:要隐藏有关已过时选项的警告,请使用-Xlint:-options</div><div class="line"></div><div class="line"></div><div class="line">解决办法</div><div class="line">	快捷键”Ctrl+Alt+S”打开设置，</div><div class="line">	   -&gt;搜索”Java Compiler”</div><div class="line">	   -&gt;将默认jdk和当前modual的jdk版本切换为1.8即可</div></pre></td></tr></table></figure>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="8-idea常用快捷键"><a href="#8-idea常用快捷键" class="headerlink" title="8.idea常用快捷键"></a>8.idea常用快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ESC  关闭弹窗</div><div class="line"></div><div class="line">Alt + INS  新疆类or方法</div><div class="line">Alt + NUM (数字键)  切换窗口</div><div class="line"></div><div class="line">shrit + F6  文件重命名</div><div class="line">shift + shift 搜索框(任意文件)</div><div class="line">shift + ESC 关闭窗体模块</div><div class="line"></div><div class="line">ctrl + D 复制行</div><div class="line">Ctrl + E 打开最近编辑过的文件</div><div class="line">Ctrl + F 文本搜索框(当前页)</div><div class="line">Ctrl + H 查看类的层次</div><div class="line">Ctrl + j  查看模版</div><div class="line">Ctrl + N 搜索类</div><div class="line">Ctrl + W 层级选中</div><div class="line">Ctrl + Y 删除行</div><div class="line"></div><div class="line"></div><div class="line">Ctrl + K 本地提交【添加版本控制后】</div><div class="line">Ctrl + shfit + K  远程提交(Github)</div><div class="line">Ctrl + Tab 切换标签</div><div class="line"></div><div class="line">Ctrl + F4 关闭当前页面</div><div class="line">ctrl + F12 查看类的所有方法</div><div class="line"></div><div class="line">Ctrl + shift + A 查找所有命令 or 快捷键</div><div class="line">Ctrl + shift + 空格  智能补全</div><div class="line">Ctrl + shift + F10  运行类</div><div class="line"></div><div class="line"></div><div class="line">方法上一行输入/** 然后直接回车,会自动生成javadoc</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="9-ideaVim插件"><a href="#9-ideaVim插件" class="headerlink" title="9. ideaVim插件"></a>9. ideaVim插件</h2><p>参考资料</p>
<ul>
<li><a href="https://plugins.jetbrains.com/plugin/164-ideavim" target="_blank" rel="external">IdeaVim:JetBrains Plugin Respository</a></li>
<li><a href="https://www.zhihu.com/question/20783392" target="_blank" rel="external">如何成为 IntelliJ IDEA 键盘流 – 知乎</a><br><br></li>
</ul>
<p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a.Ctrl + Alt + s 打开Seetings</div><div class="line">b.Plugins</div><div class="line">c.Install plugin from dis....</div><div class="line">d.选择下载好的压缩包IdeaVim-0.48.zip</div><div class="line">e.确认,插件前方打勾,Applet或者ok</div><div class="line">f.重启IntelliJ IDEA</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p>常用操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">Alt + v开启工具(原默认是ctrl + alt +v)</div><div class="line"></div><div class="line">Alt + a 左右视图光标跳转(keymap ~ select next windows)</div><div class="line">Alt + i 关闭插入模式</div><div class="line"></div><div class="line"></div><div class="line">i 插入模式【自定alt + i 退出插入模式】</div><div class="line">v 选中模式</div><div class="line">R 进入 覆盖模式</div><div class="line">c 上下移动模式</div><div class="line">Esc(或者Ctrl + [) 退回默认模式,光标移动</div><div class="line"></div><div class="line"></div><div class="line">插入模式</div><div class="line">     i 当前词左边光标插入</div><div class="line">     a当前词右边光标插入</div><div class="line">     A 行首光标插入</div><div class="line">     I 行尾光标插入</div><div class="line">     o 下行光标</div><div class="line">     O 上行光标</div><div class="line"></div><div class="line">    c0 删除到行首,插入光标</div><div class="line">    c$ 删除到行尾,插入光标</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/  搜索(可输入,输入完回车)</div><div class="line">n  下一个</div><div class="line">N 上一个</div><div class="line"></div><div class="line">h j k l   左,下,上,右</div><div class="line">H J K  L 页面顶部,合并两行,帮助,页面尾部</div><div class="line"></div><div class="line">10j 向下移动10行</div><div class="line">5k 向上移动5行</div><div class="line"></div><div class="line">: 12  移动到12行</div><div class="line"></div><div class="line">&lt; &gt;前缩进 ,后缩进</div><div class="line"></div><div class="line">0 $  跳到行首,跳到行尾</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">w(W)词组&quot;正向&quot;跳转</div><div class="line">b(B)词组&quot;反向&quot;跳转</div><div class="line"></div><div class="line">x  删除自己+后面</div><div class="line">X 不删除自己+删前面</div><div class="line"></div><div class="line">d 删除“选中行”</div><div class="line">dd 删除当前行</div><div class="line">y 复制&quot;选中行&quot;</div><div class="line">yy 复制当前行</div><div class="line"></div><div class="line">p  粘贴</div><div class="line">5p 粘贴5次</div><div class="line"></div><div class="line">u 撤销</div><div class="line"></div><div class="line">r 更改当前词</div><div class="line"></div><div class="line">. 重复命令</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br></p>
<h2 id="10-emacsIDEAs插件"><a href="#10-emacsIDEAs插件" class="headerlink" title="10. emacsIDEAs插件"></a>10. emacsIDEAs插件</h2><p>参考资料：</p>
<ul>
<li><a href="https://plugins.jetbrains.com/plugin/7163-emacsideas" target="_blank" rel="external">emacsIDEAs::JeBrains Plugin Response</a></li>
<li><ul>
<li>下载安装emacsIDEAs.jar插件,重启IntellijIDEA<br><br></li>
</ul>
</li>
</ul>
<p>常用操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在Setings ——Keymap —— AcejumpChar【查找字符功能】,修改快键为alt + e</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="11-IDEA创建Maven项目"><a href="#11-IDEA创建Maven项目" class="headerlink" title="11. IDEA创建Maven项目"></a>11. IDEA创建Maven项目</h2><p>参考资料</p>
<ul>
<li><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">构建工具-Maven-相关知识-整理专题</a></li>
<li><a href="http://www.cnblogs.com/wql025/p/5215570.html#autoid-0-0-0" target="_blank" rel="external">IntelliJ IDEA 15 创建maven项目【图文教程】</a></li>
<li><a href="https://my.oschina.net/boltwu/blog/713523" target="_blank" rel="external">解决intellij idea新建maven项目，加载archetype模型很慢 </a><br><br></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;打开IDEA，关闭当前项目Close project</div><div class="line">            a.创建 Create New Project   </div><div class="line">            b.左侧 Maven,右侧 打勾Create from archetype</div><div class="line">            c. 选择org.apache.maven.archetypes:maven-archetype-webapp模版,Next </div><div class="line">            d.输入Groupld(项目分组id,建议org + 组织名字)     org.neusoft  (org非盈利,com商业)</div><div class="line">                    Artifactld (项目id,输入项目名)                         neubbs</div><div class="line"></div><div class="line">            e. Maven home Directory(选择Maven版本)</div><div class="line">                User settings file (指定本地Maven根目录,conf目录下的settings.xml)</div><div class="line">                Local respository(指定本地repository的目录】</div><div class="line">                添加：</div><div class="line">                    archetypeCatalog: internal (标识仅使用内部元数据)</div><div class="line"></div><div class="line">&lt;2&gt;创建完毕</div><div class="line">         a.进入Project Structure【快捷键ctrl+shift+alt+s】</div><div class="line">         b.左侧 </div><div class="line">                Project     设置JDK</div><div class="line">               Models      指定源代码目录(蓝色),测试代码目录(test)</div><div class="line">                                    在scr下新建test目录,</div><div class="line">                                        src-&gt;main下新建java目录</div><div class="line"></div><div class="line">                                    找到Dependencies,点击 + 添加Library</div><div class="line">                                            Applciation Server Server Libraries </div><div class="line">                                            添加Tomcat 8.0.41的库</div><div class="line"></div><div class="line">                Libries      根据需求添加jar包</div><div class="line">                Artifacts 设置war包【用模版的则默认已经添加好】</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;设置Tomcat</div><div class="line">        a.找到导航栏,&apos;向下三角形&apos; ，点击Edit configurations...</div><div class="line">        b.左边找到Tomcat Server, 点击local</div><div class="line">        c.右边界面</div><div class="line">                Server </div><div class="line">                        Name  显示昵称(任意命名)</div><div class="line">                        Applciation server   选择服务器</div><div class="line">                        Open..的URL地址栏</div><div class="line">                                据爱如项目名,变成http://localhost:8080/neubbs</div><div class="line"></div><div class="line">                 Deplyment</div><div class="line">                        右边 &apos;+&apos;,选择Artifact</div><div class="line">                            选择neubbs: war exploded【将WEB工程以当前文件夹的位置上传到服务器】</div><div class="line">                                    【另外的neubbs: war 将web工程以包的形式上传到服务器】</div><div class="line"></div><div class="line">                    回到Server</div><div class="line">                        On Update action (更新按钮)</div><div class="line">                      On frame deactivation (失去焦点时自动编译)</div><div class="line">                                 都修改成Update classes and resoureces 【热更新】</div></pre></td></tr></table></figure>
<p><br></p>
<hr>
<p><br><br></p>
<h2 id="12-IDEA从Github上面Clone项目-本地配置Maven"><a href="#12-IDEA从Github上面Clone项目-本地配置Maven" class="headerlink" title="12. IDEA从Github上面Clone项目,本地配置Maven"></a>12. IDEA从Github上面Clone项目,本地配置Maven</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;1&gt;解压Maven包,打开conf -&gt; settings.xml</div><div class="line">        定位到localRepository，取消注释,并指定本地仓库</div><div class="line">          &lt;localRepository&gt;本地repository的目录&lt;/localRepository&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;2&gt;进入到Welcome to IntelliJ IDEA界面(若之前打开了项目,则File -&gt; Close Project)</div><div class="line">                a.右下角下拉列表Configure,点击Settings,进入到Default Settings界面</div><div class="line">                b.搜索Git,目录选择Git目录下的cmd的git.exe,点击Test测试</div><div class="line">                c.搜索Maven</div><div class="line">                            Maven home directory：  选择Bundled(Maven 3)</div><div class="line">                            User settings file: 选择Maven根目录的conf目录里的settgins.xml文件</div><div class="line">                            Local repositoyr: 选择本地respository仓库</div><div class="line">                d.搜索Github</div><div class="line">                            Host: github.com                           Auth Type:Password</div><div class="line">                            Login: Github账户</div><div class="line">                            Password: Githu密码</div><div class="line">                                点击,Test进行测试</div><div class="line"></div><div class="line"></div><div class="line">&lt;3&gt;回到Welcome界面</div><div class="line">                a.点击Check out from Version Control下拉列表</div><div class="line">                b.  选择Github</div><div class="line">                                需要登录</div><div class="line">                                        Git Repository URL:  填写项目的URL(比如:https://github.com/nuitcoder/neubbs.git)</div><div class="line">                                        Parent Diertory:  填写父目录(项目目录放在哪个目录下)</div><div class="line">                                        Directory Name: 项目目录名(不用改变) </div><div class="line">                        选择Githut</div><div class="line">                               不用登录</div><div class="line">                                        同上填写三个(URL可以进行Test)测试</div><div class="line">                c.clone,然后打开项目</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="13-将clone的项目更改后-pull到Github"><a href="#13-将clone的项目更改后-pull到Github" class="headerlink" title="13. 将clone的项目更改后,pull到Github"></a>13. 将clone的项目更改后,pull到Github</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 修改代码</div><div class="line">2.本地提交(Ctrl + k) ,需要输入commit message</div><div class="line">3.远程提交(Ctrl + shift + k),需要选定分支</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="14-安装waketime【记录coding时间】"><a href="#14-安装waketime【记录coding时间】" class="headerlink" title="14. 安装waketime【记录coding时间】"></a>14. 安装waketime【记录coding时间】</h2><p>&emsp;记录代码时间</p>
<ul>
<li><a href="https://plugins.jetbrains.com/plugin/7425-wakatime" target="_blank" rel="external">WakaTime :: JetBrains Plugin Repository</a></li>
<li><a href="https://github.com/wakatime/jetbrains-wakatime" target="_blank" rel="external">wakatime/jetbrains-wakatime</a></li>
<li><a href="https://wakatime.com/dashboard" target="_blank" rel="external">官网(注册,然后获取API key)</a><br><br></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录&quot;&gt;&lt;a href=&quot;#一-目录&quot; class=&quot;headerlink&quot; title=&quot;一.目录&quot;&gt;&lt;/a&gt;一.目录&lt;/h1&gt;&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/judasn/IntelliJ
    
    </summary>
    
      <category term="Eclipse" scheme="http://suvan-l.github.io/categories/Eclipse/"/>
    
    
      <category term="Eclipse" scheme="http://suvan-l.github.io/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>Java_算法</title>
    <link href="http://suvan-l.github.io/2017/03/23/Java_%E7%AE%97%E6%B3%95/"/>
    <id>http://suvan-l.github.io/2017/03/23/Java_算法/</id>
    <published>2017-03-23T03:51:25.000Z</published>
    <updated>2017-03-27T06:54:02.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录"><a href="#一-目录" class="headerlink" title="一.目录"></a>一.目录</h1><ol>
<li>算法复杂度</li>
<li>遇到的算法</li>
</ol>
<hr>
<p><br><br><br></p>
<h1 id="二-知识点"><a href="#二-知识点" class="headerlink" title="二.知识点"></a>二.知识点</h1><h2 id="1-算法复杂度"><a href="#1-算法复杂度" class="headerlink" title="1.算法复杂度"></a>1.算法复杂度</h2><ul>
<li>T(n)  [输入规模为n时的最长运行时间]</li>
<li>渐近分析</li>
</ul>
<hr>
<p><br><br></p>
<h2 id="2-遇到的算法"><a href="#2-遇到的算法" class="headerlink" title="2.遇到的算法"></a>2.遇到的算法</h2><ol>
<li>银行家舍入法</li>
<li>复制算法【两个区域的A和B,初始对象在A，继续存活的对象被转移到B.[此为新生代最常用的算法]】</li>
<li>标记清理 【一块区域,标记要回收的对象,然后回收,一定会出现碎片,那么引出标记-整理算法,多了碎片整理,整理出更大的内存放更大的对象[老生代常用算法]】<br><br><br></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录&quot;&gt;&lt;a href=&quot;#一-目录&quot; class=&quot;headerlink&quot; title=&quot;一.目录&quot;&gt;&lt;/a&gt;一.目录&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;算法复杂度&lt;/li&gt;
&lt;li&gt;遇到的算法&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://suvan-l.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suvan-l.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Netbeans_错误记录</title>
    <link href="http://suvan-l.github.io/2017/03/17/Netbeans_%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    <id>http://suvan-l.github.io/2017/03/17/Netbeans_错误记录/</id>
    <published>2017-03-17T04:01:43.000Z</published>
    <updated>2017-03-18T05:25:41.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录"><a href="#一-目录" class="headerlink" title="一.目录"></a>一.目录</h1><ol>
<li>下载地址</li>
<li>build.xml 1045  尚未部署问题【已解决】</li>
<li>创建web项目后，运行项目,报错Tomcat启动失败</li>
</ol>
<hr>
<p><br><br><br></p>
<h1 id="二-错误"><a href="#二-错误" class="headerlink" title="二.错误"></a>二.错误</h1><h2 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1.下载地址</h2><p><br><br>&emsp;<a href="https://netbeans.org/" target="_blank" rel="external">官网</a></p>
<hr>
<h2 id="2-build-xml-1045-尚未部署问题【已解决】"><a href="#2-build-xml-1045-尚未部署问题【已解决】" class="headerlink" title="2.build.xml 1045  尚未部署问题【已解决】"></a>2.build.xml 1045  尚未部署问题【已解决】</h2><p><code>就地在E:\Java\NetBeans\PM\WebApplication1\build\web中部署
deploy?config=file%3A%2FD%3A%2Ftemp%2Fcontext5620394177451846722.xml&amp;path=/WebApplication1
http://localhost:8095/manager/text/deploy?config=file%3A%2FD%3A%2Ftemp%2Fcontext5620394177451846722.xml&amp;path=/WebApplication1
E:\Java\NetBeans\PM\WebApplication1\nbproject\build-impl.xml:1045: 尚未部署该模块。
有关详细信息, 请查看服务器日志。s</code></p>
<p>怀疑原因:</p>
<ul>
<li>JDK版本(1.6,1.7,1.8的不同)</li>
<li>代码问题</li>
<li>Tomcat问题(7,8,9)</li>
<li>Netbeans版本(8.1和8.2)</li>
</ul>
<p><br><br></p>
<p>解决问题：</p>
<ol>
<li>JDK1.7和1.8都试过，同样报错<br>2 .代码没错误，因为之前项目是可以跑的<br>3 .Tomcat用7和9的话会有一些启动报错(未解决),Tomcat可以启动但是仍然报错未部署该模块,tomcat8是安装Netbeans时候携带安装的，也报错</li>
<li>上述都是使用8.2的Netbeans,后来去官网下载了8.1的，用的是1.8的JDK，Tomcat8，成功运行</li>
</ol>
<p>终极解决套路：<br>将Tomcat下的servlet.api.jar替代jdk/lib/ext/目录下的servlet包<br>【即解决浏览器页面空白，又解决尚未部署问题】</p>
<hr>
<h2 id="3-创建web项目后，运行项目-报错Tomcat启动失败"><a href="#3-创建web项目后，运行项目-报错Tomcat启动失败" class="headerlink" title="3.创建web项目后，运行项目,报错Tomcat启动失败"></a>3.创建web项目后，运行项目,报错Tomcat启动失败</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">正在启动 Tomcat 进程...</div><div class="line">正在等待 Tomcat...</div><div class="line">启动 Tomcat 失败。</div><div class="line">C:\Users\Liu-shuwei\Documents\NetBeansProjects\WebApplication1\nbproject\build-impl.xml:1066: 部署错误: 启动 Tomcat 失败。</div><div class="line">有关详细信息, 请查看服务器日志。</div><div class="line">构建失败 (总时间: 3 秒)</div></pre></td></tr></table></figure>
<p>可能原因：</p>
<ol>
<li>端口占用:<br>Tomcat/conf/目录下的server有里需要配置3个端口<br>Sutdown,HTTP/1.1,AJP/1.3  三个端口重叠</li>
</ol>
<blockquote>
<p>注意这三个端口不要重复，可设置为，8084，8085，8086</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录&quot;&gt;&lt;a href=&quot;#一-目录&quot; class=&quot;headerlink&quot; title=&quot;一.目录&quot;&gt;&lt;/a&gt;一.目录&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;下载地址&lt;/li&gt;
&lt;li&gt;build.xml 1045  尚未部署问题【已解决】&lt;/li&gt;
&lt;li&gt;创建web
    
    </summary>
    
      <category term="Netbeans" scheme="http://suvan-l.github.io/categories/Netbeans/"/>
    
    
      <category term="Netbeans" scheme="http://suvan-l.github.io/tags/Netbeans/"/>
    
  </entry>
  
  <entry>
    <title>Windows_快捷键操作</title>
    <link href="http://suvan-l.github.io/2017/03/14/Windows_%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%93%8D%E4%BD%9C/"/>
    <id>http://suvan-l.github.io/2017/03/14/Windows_快捷键操作/</id>
    <published>2017-03-14T15:49:44.000Z</published>
    <updated>2017-09-19T03:11:52.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-目录"><a href="#一-目录" class="headerlink" title="一.目录"></a>一.目录</h1><ol>
<li>系统工具</li>
<li>DOS常用命令</li>
<li>windows全局快捷键</li>
<li>系统”运行”，快速启动程序(文件 or 目录)</li>
<li>window常用软件汇总</li>
</ol>
<hr>
<p><br><br><br></p>
<h1 id="二-内容"><a href="#二-内容" class="headerlink" title="二.内容"></a>二.内容</h1><h2 id="1-系统工具"><a href="#1-系统工具" class="headerlink" title="1. 系统工具"></a>1. 系统工具</h2><p>资料</p>
<ul>
<li><a href="http://msdn.itellyou.cn/?jdfwkey=0mnyt2" target="_blank" rel="external">I tell you[可下各种操作系统镜像]</a><br><br></li>
</ul>
<ol>
<li>WinSAT【系统自带评估工具】</li>
<li>diskpart【硬盘信息查询】</li>
<li>ftp【文本传输】</li>
<li>netsh 【网络配置】</li>
<li>netstat 【查看网络状态】</li>
<li>net 【计算机信息配置】</li>
<li>nslookup 【域名查询】</li>
<li>slmgr 【软件许可证管理】</li>
<li>ping    【网络诊断工具】</li>
</ol>
<hr>
<p><br><br></p>
<h1 id="2-DOS常用命令"><a href="#2-DOS常用命令" class="headerlink" title="2. DOS常用命令"></a>2. DOS常用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">appwiz.cpl 【程序和功能(控制面板-卸载)】</div><div class="line"></div><div class="line">calc 		【计算器】</div><div class="line">cd XXX           【进入目录】</div><div class="line">cd.. 	            【后退】</div><div class="line">cls 		【清空屏幕】</div><div class="line">color 		【界面调色】</div><div class="line">control 	【控制面本】</div><div class="line"></div><div class="line">dir 	             【查看目录文件】</div><div class="line">dxdiag              【DirectX诊断工具】</div><div class="line">dfrgui              【磁盘碎片整理】</div><div class="line">devmgmt        【设备管理器】</div><div class="line"></div><div class="line">explorer	【资源管理器(我的电脑)】</div><div class="line"></div><div class="line">getmac 	【查看网卡信息(物理IP)】</div><div class="line"></div><div class="line">ipconfig/flushdns 【情况本地DNS缓存】</div><div class="line">ipconfig/all 	         【查看网络连接信息】</div><div class="line"></div><div class="line">jar xf [jar包]  【解压jar包文件】</div><div class="line"></div><div class="line">mstsc 		【远程桌面】</div><div class="line">msinfo32 	【系统信息-电脑配置】</div><div class="line">mspaint 	【画图板】</div><div class="line"></div><div class="line">ncpa.cpl 		【网络连接】</div><div class="line">notepad 		【记事本】</div><div class="line">net user		【显示计算机用户】</div><div class="line">net U xxx	            【修改系统U用户的密码为xxx】</div><div class="line">net user zhangbq 123456 /add    【强制修改zhangbq用户密码为 123456】</div><div class="line"></div><div class="line">osk 	【屏幕键盘】</div><div class="line"></div><div class="line">path    【查看本地环境变量】</div><div class="line">psr      【windows自带的步骤记录器】</div><div class="line"></div><div class="line">regedit     【注册表】</div><div class="line"></div><div class="line">stikyNot 	            【便笺(jian)】</div><div class="line">shutdown -s -t 30 	【自动关机-30秒后】</div><div class="line">shutdown -a  		【取消计划关机】</div><div class="line">sc delete 服务名称    【卸载windows服务】</div><div class="line"></div><div class="line"></div><div class="line">tree/F 	【显示当前目录所有文件】</div><div class="line"></div><div class="line">winver 	【windows版本】</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="3-windows全局快捷键"><a href="#3-windows全局快捷键" class="headerlink" title="3. windows全局快捷键"></a>3. windows全局快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">win + B 【定位到任务栏】</div><div class="line">win + D 【返回桌面】</div><div class="line">win + E 【我的电脑 or 我的电脑】</div><div class="line">win + F【windows搜索】</div><div class="line">win + L 【快速锁屏】</div><div class="line">win + P 【投影仪扩展】</div><div class="line">win + Q 【小娜】</div><div class="line">win + R 【运行】</div><div class="line">win + W【Windows link工作区】</div><div class="line">win + Tab【切换程序】</div><div class="line">win + (+/-) 【放大镜】</div><div class="line">win + 上下左右【上下左右放大缩小软件窗体】</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">win + ctrl + D【新建虚拟桌面】</div><div class="line">win + ctrl + F4【关闭虚拟做梦】</div><div class="line"></div><div class="line"></div><div class="line">点击(光标)　+　shift +　点击【劝你选中】</div><div class="line"></div><div class="line">ctrl + W 【关闭标签】</div><div class="line">ctrl + c 【(+ insert)复制】</div><div class="line">ctrl + v【粘贴(shift + insert)】</div><div class="line"></div><div class="line"></div><div class="line">alt + R 【快速运行窗体】</div><div class="line">alt + F4【快速关闭】</div><div class="line">alt + Space 【程序快捷窗口】</div><div class="line">alt + 双击左键【打开指定文件/目录的属性】</div><div class="line"></div><div class="line">Ctrl + shift + N 【新建文件夹】</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="4-系统”运行”，快速启动程序-文件-or-目录"><a href="#4-系统”运行”，快速启动程序-文件-or-目录" class="headerlink" title="4. 系统”运行”，快速启动程序(文件 or 目录)"></a>4. 系统”运行”，快速启动程序(文件 or 目录)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 创建路径</div><div class="line">2. 配置环境变量【系统】</div><div class="line">3，将环境变量添加到Path【例如：%环境变量名%;】</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<h2 id="5-window常用软件汇总"><a href="#5-window常用软件汇总" class="headerlink" title="5. window常用软件汇总"></a>5. window常用软件汇总</h2><p>生活软件</p>
<ul>
<li>Listary【文件搜索】</li>
<li>SAOUtils【目录文件快速启动(刀剑神域里的SAO系统风格)】</li>
<li>Foxmail【管理邮箱】</li>
<li>Shadowsocks【翻墙软件】</li>
<li>TranslucentTB【win10菜单栏透明软件】</li>
<li>MacType【将window字体调整为苹果字体】</li>
<li>Sublime Text【查看文档】</li>
<li>Potplayer【视频播放器】</li>
<li>Foxit Reader【(福晰)PDF阅读器】</li>
<li>TeamViewerQS【远程控制电脑】</li>
<li>2013 Office【办公软件】</li>
<li>cmder【命令行工具】</li>
<li>VMware Workstation【虚拟机】</li>
<li>hMailServer【邮件服务器】</li>
<li>Github + Git +Node.js + Hexo【搭建个人博客】</li>
<li>番茄土豆【番茄时间管理法】</li>
<li>软媒魔方【电脑安全,优化,清理】</li>
<li>网易云音乐</li>
<li>迅雷</li>
<li>金山打字通</li>
<li>2345好压【压缩,解压软件】<br><br></li>
</ul>
<p>Chrome插件</p>
<ul>
<li>vimium【模拟vim,快速操作浏览器，脱离鼠标】<br><br></li>
</ul>
<p>编程开发</p>
<ul>
<li>Intellij IDEA【加入Jrebel,ideavim,EmacsIDEAs插件】</li>
<li>Eclipse</li>
<li>NetBeans</li>
<li>SVN or Git or Github【版本控制】</li>
<li>Maven</li>
<li>PowerDesigner【用例图】</li>
<li>Tomcat【应用服务器】<br>&lt;br》</li>
</ul>
<hr>
<p><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-目录&quot;&gt;&lt;a href=&quot;#一-目录&quot; class=&quot;headerlink&quot; title=&quot;一.目录&quot;&gt;&lt;/a&gt;一.目录&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;系统工具&lt;/li&gt;
&lt;li&gt;DOS常用命令&lt;/li&gt;
&lt;li&gt;windows全局快捷键&lt;/li&gt;
&lt;li&gt;系统”
    
    </summary>
    
      <category term="Windows" scheme="http://suvan-l.github.io/categories/Windows/"/>
    
    
      <category term="Windows" scheme="http://suvan-l.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>VPS_使用VPS + Shadowsocks科学上网【翻墙】</title>
    <link href="http://suvan-l.github.io/2017/01/10/VPS_%E4%BD%BF%E7%94%A8VPS%20+%20Shadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E3%80%90%E7%BF%BB%E5%A2%99%E3%80%91/"/>
    <id>http://suvan-l.github.io/2017/01/10/VPS_使用VPS + Shadowsocks科学上网【翻墙】/</id>
    <published>2017-01-10T06:03:00.000Z</published>
    <updated>2017-03-18T08:42:11.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><br><br>&emsp;直前一直是用大牛的修改host的方法来翻墙，但是不稳定，而且不定时要更新，现在是在搬瓦工上购买VPS【虚拟服务器】，搭建Shadowsocks来翻墙,要花一点钱【每个月约11RMB】</p>
<hr>
<p><br><br><br><br></p>
<hr>
<h1 id="一-资源-and-教程"><a href="#一-资源-and-教程" class="headerlink" title="一.资源 and 教程"></a>一.资源 and 教程</h1><p><br></p>
<ul>
<li><a href="http://banwagong.cn/" target="_blank" rel="external">搬瓦工中文网</a></li>
<li><a href="https://bwh1.net/" target="_blank" rel="external">BandwagonHOST-国外官网</a></li>
<li><a href="https://blog.phpgao.com/shadowsocks_on_linux.html" target="_blank" rel="external">使用shadowsocks轻松搭建翻墙环境教程</a></li>
<li><a href="https://blog.kuoruan.com/82.html" target="_blank" rel="external">黑科技，效果逆天！使用FinalSpeed给搬瓦工(Bandwagonhost)加速！</a></li>
</ul>
<hr>
<p><br><br><br><br></p>
<h1 id="二-构建思路"><a href="#二-构建思路" class="headerlink" title="二.构建思路"></a>二.构建思路</h1><p><br></p>
<ol>
<li>根据搬瓦工中文网教程，去BandwagonHost购买VPS,注意认准配置，然后选好机房【不同地区的网速是不一样的】,我买的年付19.9USD的洛杉矶【内存255,硬盘10G-SSD,流量1000GB/月】，支持支付宝付款【首次需注册帐号】</li>
<li>登录个人用户，进入MyServies模块，选择KiwiVM Control Panel</li>
<li>在KiwiVM的左边栏，KiwiVM Extras里的Shadowsocks Server【一键安装SS，安装完后有教程】，根据windows版本下载相应客户端即可</li>
<li>启动客户端，填入相应资料,右键任务栏小图标，勾选Enable System Proxy，开启代理</li>
<li>修改浏览器代理，【使用系统代理或者手动配置123.0.0.1 端口1080】</li>
<li>开心的浏览<a href="https://www.google.com/" target="_blank" rel="external">https://www.google.com/</a></li>
</ol>
<hr>
<p><br><br><br><br></p>
<h1 id="三-遇到问题"><a href="#三-遇到问题" class="headerlink" title="三.遇到问题"></a>三.遇到问题</h1><p><br></p>
<p>注意：</p>
<ul>
<li>可在Shadowsocks服务端开启多端口，设置多用户，给不同的人使用</li>
<li>浏览器需要设置使用系统代理或者手动配置代理</li>
<li>Shadowsocks客户端会自动判断访问改网址的时候是否被墙,如果被强，则使用代理访问，没有被强就使用本地IP【浏览器代理配置~~~设置使用系统代理】【百度搜索栏打IP，进行测试】</li>
<li>如果以前使用修改host的方式，那么需把文件改回最初默认【否则你的所有访问，都会使用国外服务器进行访问】</li>
<li>360浏览器的免费翻墙就是通过修改host实现的【流氓软件】</li>
<li>可以使用FieldSpeed【FS加速器进行加速，需配置服务端和客户端,java编写，还需要安装JAVA运行环境】【1.2版本不稳定，经常报错提示fs服务器连接失败】【我的win8直接就没成功】</li>
<li>Shadowsocks简称SS【注意不是SSH】,有很多版本，什么ShadowsocksR之类的，没试过需要的话自己去试试</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&amp;emsp;直前一直是用大牛的修改host的方法来翻墙，但是不稳定，而且不定时要更新，现在是在搬瓦工上购买VPS【虚拟服务器
    
    </summary>
    
      <category term="VPS" scheme="http://suvan-l.github.io/categories/VPS/"/>
    
    
      <category term="VPS" scheme="http://suvan-l.github.io/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>BatchCreate_file【自动生成】</title>
    <link href="http://suvan-l.github.io/2017/01/09/MyProject_BatchCreate_file%E3%80%90%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E3%80%91/"/>
    <id>http://suvan-l.github.io/2017/01/09/MyProject_BatchCreate_file【自动生成】/</id>
    <published>2017-01-09T10:21:23.000Z</published>
    <updated>2017-06-15T11:02:45.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本1-0【2016-8-27】"><a href="#版本1-0【2016-8-27】" class="headerlink" title="版本1.0【2016.8.27】"></a>版本1.0【2016.8.27】</h1><p><br><br></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用时2天半左右，写了一个批量生成目录文件的demo<br>不算太简洁，目的是为了重点巩固基础，还有很大进步的空间</p>
<p>自己写了一些基础,常用的method，封装进不同的类里</p>
<p>一.用于测试的主方法: <em>testMain.java</em><br>二.任务流程: <em>TaskFlow.java</em><br>三.连接，操作数据库：<em>UseDB</em><br>四.操作文件,目录：<em>IOFile.java</em><br>五.创建文件，改变文件内容: <em>ChangeFile.java</em><br>六.两套相关模版:<br>七.设计数据库:</p>
<p>如果有错误或者逻辑比较混乱的地方，欢迎探讨指出^_^</p>
<hr>
<h2 id="1-testMain-java"><a href="#1-testMain-java" class="headerlink" title="1.testMain.java"></a>1.testMain.java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package review;</div><div class="line"></div><div class="line">public class testMain &#123;</div><div class="line">  </div><div class="line"></div><div class="line">  //main()方法，测试</div><div class="line">  public static void main(String [] args)&#123;</div><div class="line">  </div><div class="line">    //创建任务流程对象</div><div class="line">    TaskFlow tf= new TaskFlow();</div><div class="line">    </div><div class="line">    //执行流程(参数:路径,目录名)</div><div class="line">    tf.GO(&quot;C:/Users/Liu-shuwei/Desktop\\&quot;,&quot;刘淑玮-第二批(03069-03127)&quot;,&quot;SX&quot;);</div><div class="line"></div><div class="line">      </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="2-TaskFlow-java"><a href="#2-TaskFlow-java" class="headerlink" title="2.TaskFlow.java"></a>2.TaskFlow.java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">package review;</div><div class="line"></div><div class="line">public class TaskFlow &#123;</div><div class="line">  </div><div class="line">  public static long  useTime()&#123;</div><div class="line">    return System.currentTimeMillis();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  //无参构造方法</div><div class="line">  public TaskFlow()&#123;</div><div class="line">    </div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  //任务流程</div><div class="line">  public void GO(String path,String name,String province) &#123;</div><div class="line">    //开始时间</div><div class="line">    long beginTime=useTime();</div><div class="line">    </div><div class="line">    //执行任务流程</div><div class="line">    try&#123;</div><div class="line">      UseDB udb = new UseDB();</div><div class="line">      IOFile iof=new IOFile();</div><div class="line">      </div><div class="line">      udb.connDatabase();//连接数据库</div><div class="line">      </div><div class="line">      //一.往数据库插入模版数据</div><div class="line">      String content=null;                                      //注意，路径的话用/或者\\都可以</div><div class="line">      content=iof.readFileContent(&quot;C:/Users/Liu-shuwei/Desktop/模版文档(修改过)/BackupTask.java&quot;,&quot;UTF-8&quot;); //数据库的默认编码是GBK,如果是UTF-8\</div><div class="line">      udb.insertTXT(&quot;article&quot;,&quot;model,detail&quot;,&quot;BackupTask&amp;&amp;&amp;&amp;&amp;&quot;+content,&quot;?,?&quot;);</div><div class="line">      content=iof.readFileContent(&quot;C:/Users/Liu-shuwei/Desktop/模版文档(修改过)/ZhaobGgServiceModel.java&quot;,&quot;UTF-8&quot;); </div><div class="line">      udb.insertTXT(&quot;article&quot;,&quot;model,detail&quot;,&quot;ZhaobGgServiceModel&amp;&amp;&amp;&amp;&amp;&quot;+content,&quot;?,?&quot;);</div><div class="line"></div><div class="line">      </div><div class="line">      //二.创建整体目录</div><div class="line">      iof.cList(path,name,province);</div><div class="line">      </div><div class="line">      //关闭资源</div><div class="line">      udb.closeAll();</div><div class="line">      </div><div class="line">    &#125;catch(Exception e)&#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //结束时间</div><div class="line">    long endTime=useTime();</div><div class="line">    System.out.println(&quot;总共用时:&quot;+(endTime-beginTime)+&quot;毫秒！&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="3-UseDB-java"><a href="#3-UseDB-java" class="headerlink" title="3.UseDB.java"></a>3.UseDB.java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div></pre></td><td class="code"><pre><div class="line">package review;</div><div class="line"></div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.DriverManager;</div><div class="line">import java.sql.PreparedStatement;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.ResultSetMetaData;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.sql.Statement;</div><div class="line"></div><div class="line">public class UseDB &#123;</div><div class="line">  </div><div class="line">  </div><div class="line">  private String drive=&quot;com.mysql.jdbc.Driver&quot;;           //数据库驱动</div><div class="line">  private String link=&quot;jdbc:mysql://127.0.0.1:3306/&quot;;     //mysql—JDBC链接+IP地址+端口</div><div class="line">  private String database=&quot;my_blog&quot;;                      //数据库</div><div class="line">  </div><div class="line">  private String username=&quot;root&quot;;                         //用户名</div><div class="line">  private String password=&quot;123&quot;;            //密码</div><div class="line">  </div><div class="line">  private Connection conn;</div><div class="line">  private Statement st;</div><div class="line">  private PreparedStatement pst;</div><div class="line">  private ResultSet rs;</div><div class="line">  private ResultSetMetaData rsmd;//获取列的信息</div><div class="line">  </div><div class="line">  private String sql; //sql语句</div><div class="line">  </div><div class="line"></div><div class="line">  //无参构造方法，创建UseDB对象时候，直接连接数据库</div><div class="line">  public UseDB()&#123; </div><div class="line"></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  //调用该方法时候连接数据库</div><div class="line">  public void connDatabase()  throws Exception&#123;</div><div class="line">     Class.forName(drive);</div><div class="line">     conn=DriverManager.getConnection(link+database,username,password); </div><div class="line">     st=conn.createStatement();</div><div class="line">     System.out.println(&quot;数据库连接成功......&quot;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    //功能1: 使用database数据库                                </div><div class="line">    public void useDatabase(String database)&#123;//参数: 数据库名称</div><div class="line">      sql=&quot;USE &quot;+database+&quot;;&quot;;</div><div class="line">      try&#123;</div><div class="line">        rs=st.executeQuery(sql);</div><div class="line">      &#125;catch(Exception e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      System.out.println(sql+&quot; 执行完毕！-------------------------------------&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //功能2:查询table表中record字段满足condition条件的值</div><div class="line">    public String select(String table,String record,String condition)&#123;//参数: 表名,字段名,WHERE条件</div><div class="line">      </div><div class="line">      StringBuilder sb= new StringBuilder();</div><div class="line">      sql=&quot;SELECT &quot;+record+&quot; FROM &quot; +table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">      </div><div class="line">      try&#123;</div><div class="line">        rs=st.executeQuery(sql);</div><div class="line">           ResultSetMetaData rsm =rs.getMetaData(); //获得列集</div><div class="line">        while(rs.next())&#123;</div><div class="line">          sb.append(rs.getString(record));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      &#125;catch(Exception e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      System.out.println(sql+&quot; 执行完毕！-------------------------------------&quot;);</div><div class="line">      return sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //功能3:查询table所有数据的数据,打印到控制台</div><div class="line">    public String selectAll(String table)&#123;//参数: 表名</div><div class="line">      </div><div class="line">      StringBuilder sb= new StringBuilder();</div><div class="line">      sql=&quot;SELECT * FROM &quot; +table+&quot;;&quot;;</div><div class="line">      </div><div class="line">      try&#123;</div><div class="line">        rs=st.executeQuery(sql);</div><div class="line">        rsmd =rs.getMetaData(); //获得列集</div><div class="line">        while(rs.next())&#123;</div><div class="line">          for(int i=1;i&lt;rsmd.getColumnCount();i++)&#123;</div><div class="line">            System.out.print(rs.getString(i)+&quot;\t&quot;);</div><div class="line">          &#125;</div><div class="line">          System.out.println();//换行</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      &#125;catch(Exception e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      System.out.println(sql+&quot; 执行完毕！-------------------------------------&quot;);</div><div class="line">      return sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    //功能4:查询webapi表,判断招标预告到控制价字段的记录值是否存在URL  ,返回有URL记录的字段名(例如:zbgg)</div><div class="line">    public String checktable(String num)&#123;//参数: 编号</div><div class="line">      StringBuilder sb= new StringBuilder();</div><div class="line">      sql=&quot;SELECT * FROM webapi WHERE num=&apos;&quot;+num+&quot;&apos;;&quot;;</div><div class="line">      String content=null;</div><div class="line">      try&#123;</div><div class="line">        rs=st.executeQuery(sql);</div><div class="line">        rsmd=rs.getMetaData();</div><div class="line">        while(rs.next())&#123;</div><div class="line">          for(int i=10;i&lt;18;i++)&#123;</div><div class="line">            content=rs.getString(i);</div><div class="line">            if(content.length()&lt;5) continue;</div><div class="line">              </div><div class="line">              sb.append(rsmd.getColumnName(i)+&quot;&amp;&quot;); </div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      </div><div class="line">      &#125;catch(SQLException e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      System.out.println(sql+&quot; 执行完毕！-------------------------------------&quot;);</div><div class="line">      return sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    //功能5:查询table表,record字段的所有记录值(所有行)</div><div class="line">    public String selectNum(String table,String record) throws SQLException&#123;</div><div class="line">      StringBuilder sb= new StringBuilder();</div><div class="line">      </div><div class="line">       sql=&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot;;&quot;;</div><div class="line">       rs=st.executeQuery(sql);</div><div class="line">       while(rs.next())&#123;</div><div class="line">         sb.append(rs.getString(1)+&quot;&amp;&quot;);</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">      System.out.println(sql+&quot; 执行完毕！-------------------------------------&quot;);</div><div class="line">      return sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    //功能6: 插入数据--少量数据(标题，日期等)</div><div class="line">    public void insert(String table,String record,String content)&#123;//参数: 表名,字段(多的话用,分割),内容(多的话用,号分割)</div><div class="line">        String sql=&quot;INSERT INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+content+&quot;);&quot;;</div><div class="line">          int i=0;</div><div class="line">          try&#123;</div><div class="line">            i=st.executeUpdate(sql);</div><div class="line">            </div><div class="line">          &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          if(i!=-1)&#123;</div><div class="line">            System.out.println(&quot;插入成功&quot;);</div><div class="line">          &#125;</div><div class="line">        System.out.println(sql+&quot;执行完毕！&quot;);</div><div class="line">      &#125;</div><div class="line">    </div><div class="line">    //功能7:插入数据--大量数据(文章，文本内容)</div><div class="line">    public void insertTXT(String table,String record,String content,String mark)&#123;//参数值: 表名,字段,内容(多个内容用&amp;号分割),?号(多个?用,分割)</div><div class="line">      </div><div class="line">      sql=&quot;INSERT INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+mark+&quot;);&quot;;</div><div class="line">      </div><div class="line">      String [] strA=content.split(&quot;&amp;&amp;&amp;&amp;&amp;&quot;);</div><div class="line">      //判断是否存在相同记录，如果存在则不执行插入</div><div class="line">      String ifwhere=record.substring(0,record.indexOf(&quot;,&quot;));</div><div class="line">      String ifexist=&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot; WHERE &quot;+ifwhere+&quot;=&apos;&quot;+strA[0]+&quot;&apos;;&quot;;</div><div class="line">        </div><div class="line">      try&#123;</div><div class="line">        rs=st.executeQuery(ifexist);</div><div class="line">        System.out.println(ifexist+&quot; 执行完毕！================================&quot;);</div><div class="line">        </div><div class="line">        if(rs.next())&#123;//存在相同记录</div><div class="line">          System.out.println(&quot;数据库中已经存在相同&quot;+strA[0]+&quot;模版,不进行重复插入!&quot;);</div><div class="line">        &#125;else&#123;</div><div class="line">          //不存在相同记录</div><div class="line">          System.out.println(&quot;数据库不存在&quot;+strA[0]+&quot;模版,正在进行插入......&quot;);</div><div class="line">          pst=conn.prepareStatement(sql);</div><div class="line">          </div><div class="line">          for(int i=1;i&lt;=strA.length;i++)&#123;//循环次数: ?号个数      </div><div class="line">            pst.setString(i,strA[i-1]);</div><div class="line">          &#125;</div><div class="line">          </div><div class="line">          pst.executeUpdate();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">      &#125;catch(Exception e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      System.out.println(sql+&quot; 执行完毕！================================&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">  </div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    //功能8: 查询数据库weiabi表中对应num编号整行记录的需求字段的信息(区域，省份，城市，区县，网站名称，信息来源)</div><div class="line">    public String selectNeedInformation_num(String num)&#123;</div><div class="line">        StringBuilder sb= new StringBuilder();</div><div class="line">      </div><div class="line">      sql=&quot;SELECT * FROM webapi WHERE num=&apos;&quot;+num+&quot;&apos;;&quot;;</div><div class="line">      try&#123;</div><div class="line">        rs=st.executeQuery(sql);</div><div class="line">        while(rs.next())&#123;</div><div class="line">          for(int i=2;i&lt;=8;i++)&#123; //区域-信息来源</div><div class="line">            if(i==7) continue; //网站网址</div><div class="line">            sb.append(rs.getString(i)+&quot;&amp;&quot;);</div><div class="line">          &#125;   </div><div class="line">        &#125;</div><div class="line">      &#125;catch(Exception e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      System.out.println(sql+&quot; 执行完毕！-------------------------------------&quot;);</div><div class="line">      return sb.toString(); </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //关闭数据库连接</div><div class="line">    public void closeAll()&#123;</div><div class="line">      </div><div class="line">      //关闭Result</div><div class="line">       try&#123;</div><div class="line">                if(rs!=null)</div><div class="line">                     rs.close();</div><div class="line">             &#125;catch(Exception e)&#123;</div><div class="line">                 e.printStackTrace(System.err);</div><div class="line">             &#125;</div><div class="line">       </div><div class="line">       </div><div class="line">      //关闭PreparedStatement</div><div class="line">      try&#123;</div><div class="line">      if(pst!=null)</div><div class="line">                  pst.close();</div><div class="line">            &#125;catch(Exception e)&#123;</div><div class="line">               e.printStackTrace(System.err);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">      </div><div class="line">      //关闭Statement</div><div class="line">       try&#123;</div><div class="line">                 if(st!=null)</div><div class="line">                     st.close();</div><div class="line">             &#125;catch(Exception e)&#123;</div><div class="line">                 e.printStackTrace(System.err);</div><div class="line">             &#125;</div><div class="line">      </div><div class="line">       </div><div class="line">       //关闭Connection</div><div class="line">           try&#123;</div><div class="line">               if(conn!=null)</div><div class="line">                   conn.close();</div><div class="line">           &#125;catch(Exception e)&#123;</div><div class="line">               e.printStackTrace(System.err);</div><div class="line">           &#125;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="4-IOFile-java"><a href="#4-IOFile-java" class="headerlink" title="4.IOFile.java"></a>4.IOFile.java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line">package review;</div><div class="line"></div><div class="line">import java.io.File;</div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.io.OutputStreamWriter;</div><div class="line"></div><div class="line">public class IOFile &#123;</div><div class="line">  </div><div class="line">    //功能1:(字节流)读取文件内容--只适用与读取英文，数字，无法设置编码格式</div><div class="line">    public String readFileContent2(String path) throws IOException&#123; //参数:路径</div><div class="line">      String content=&quot;&quot;;</div><div class="line">      </div><div class="line">      InputStream inf=new FileInputStream(path);</div><div class="line">      int size=inf.available();</div><div class="line">      for(int i=0;i&lt;size;i++)&#123;</div><div class="line">        content+=(char)inf.read();</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      return &quot;\&apos;&quot;+content+&quot;\&apos;&quot;; </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //功能2:(字符流)读取文件内容--可以设置编码，读取中文，英文，数字</div><div class="line">      public String readFileContent(String path,String encoding) throws IOException&#123; //参数: 路径,编码格式</div><div class="line">        StringBuilder sb =new StringBuilder();</div><div class="line">          </div><div class="line">          //定位文件</div><div class="line">          File f=new File(path);</div><div class="line">          FileInputStream fip=new FileInputStream(f);</div><div class="line">          InputStreamReader reader=new InputStreamReader(fip,encoding);</div><div class="line">          </div><div class="line">          while(reader.ready())&#123;</div><div class="line">            sb.append((char)reader.read());</div><div class="line">          &#125;</div><div class="line">          </div><div class="line">        return sb.toString(); </div><div class="line">       &#125;    </div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    //功能3: 获得路径，创建目录</div><div class="line">    public void createFile(String path)&#123;</div><div class="line">      File d=new File(path);</div><div class="line">          d.mkdir();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //功能4: 创建文件,写入内容</div><div class="line">    public void cFile(String path,String fileName,String encoding,String content) throws IOException&#123; //参数：路径,文件名.格式,编码格式,文件内容</div><div class="line">      File f=new File(path+&quot;/&quot;+fileName);</div><div class="line">      FileOutputStream fop= new FileOutputStream(f);</div><div class="line">      OutputStreamWriter writer=new OutputStreamWriter(fop,&quot;UTF-8&quot;);</div><div class="line">      </div><div class="line">      writer.append(content);</div><div class="line">      </div><div class="line">      writer.close();</div><div class="line">      fop.close();</div><div class="line">      System.out.println(&quot;文件创建完毕&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //功能5: 自定义创建目录(标准格式提交,例如:刘淑玮-第二批(02307-02370))</div><div class="line">    public void cList(String path,String fileName,String province) throws Exception&#123; //参数：路径 ,文件名</div><div class="line">      </div><div class="line">        //一.创建对象  1.连接数据库  2.改变文件</div><div class="line">        UseDB u =new UseDB();</div><div class="line">        u.connDatabase();</div><div class="line">        ChangeFile cf=new ChangeFile(u);</div><div class="line">      </div><div class="line">        //二.创建父目录</div><div class="line">        String dir=path+&quot;/&quot;+fileName;</div><div class="line">        createFile(dir);</div><div class="line">            </div><div class="line">        //三.获得编号,储存起始编号，终止编号</div><div class="line">            String number=fileName.substring(fileName.indexOf(&quot;(&quot;)+1,fileName.lastIndexOf(&quot;)&quot;));</div><div class="line">            String [] num=number.split(&quot;-&quot;);</div><div class="line">            int first=Integer.parseInt(num[0]);</div><div class="line">            int last=Integer.parseInt(num[1]);</div><div class="line">            </div><div class="line">            //获取使用者名字</div><div class="line">            String username=fileName.substring(0,fileName.indexOf(&quot;-&quot;));</div><div class="line">              </div><div class="line">            </div><div class="line">            //四.查询webapi表里num字段所有记录，将其保存在数组里</div><div class="line">            u.useDatabase(&quot;my_blog&quot;);//使用my_blog数据库</div><div class="line">            String allNum=u.selectNum(&quot;webapi&quot;,&quot;num&quot;);</div><div class="line">          String [] allNumA=allNum.split(&quot;&amp;&quot;);</div><div class="line">           </div><div class="line">          //五.计算webapi中num个数(包括带-的)</div><div class="line">          int sum=0;</div><div class="line">          String allNumber=u.selectNum(&quot;webapi&quot;,&quot;num&quot;);</div><div class="line">          String [] allNumber_Arrays=allNumber.split(&quot;&amp;&quot;);</div><div class="line">          for(int i=0;i&lt;allNumber_Arrays.length;i++)&#123;</div><div class="line">            if(i&gt;1)&#123;</div><div class="line">              if(!allNumber_Arrays[i].substring(0,5).equals(allNumber_Arrays[i-1].substring(0,5)))</div><div class="line">                sum++;</div><div class="line">              else</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">            </div><div class="line">            //六.生成1级子目录      规格:&quot;接口(n个)&amp;入库(n个)&amp;入库-增量(n个)&quot;</div><div class="line">                </div><div class="line">                String [] str=&#123;&quot;接口&quot;,&quot;入库&quot;,&quot;入库-增量&quot;&#125;;</div><div class="line">                String sonFile=null;//1级子目录</div><div class="line">                String sonFile2=null;//2级子目录</div><div class="line">                String ifNum=null;//2级目录判定编号</div><div class="line">                </div><div class="line">                for(int i=0;i&lt;str.length;i++)&#123;   </div><div class="line">                  sonFile=dir+&quot;/&quot;+str[i]+&quot;(&quot;+sum+&quot;)&quot;;//路径</div><div class="line">                  this.createFile(sonFile);  //循环创建1级子目录</div><div class="line">                  </div><div class="line">                  //进入含有&quot;入库&quot;字样的二级字目录</div><div class="line">                  if(str[i].indexOf(&quot;入库&quot;)!=-1)&#123;</div><div class="line">                    //生成入库编号</div><div class="line">                    for(int j=first;j&lt;=last;j++)&#123; //循环次数：终止编号-起始编号</div><div class="line">                      for(int k=0;k&lt;allNumA.length;k++)&#123; //循环次数：数据库webapi表里num记录的数量</div><div class="line">                        </div><div class="line">                        ifNum=allNumA[k].substring(1,5);</div><div class="line">                        if(ifNum.equals(j+&quot;&quot;))&#123;   //对比输入编号和Excel表里的编号</div><div class="line">                          </div><div class="line">                          sonFile2=sonFile+&quot;/入库-0&quot;+j; </div><div class="line">                          createFile(sonFile2); //创建2级子目录</div><div class="line">                          </div><div class="line">                          if(k==0)</div><div class="line">                            cf.createBackupTask(sonFile2+&quot;/&quot;,province,allNumA[k],allNumA[0]);//创建BackupTask.java</div><div class="line">                          else</div><div class="line">                            cf.createBackupTask(sonFile2+&quot;/&quot;,province,allNumA[k],allNumA[k-1]);//创建BackupTask.java</div><div class="line">                          </div><div class="line">                          sonFile2=sonFile2+&quot;/imp&quot;;</div><div class="line">                          createFile(sonFile2);//创建3级子目录</div><div class="line">                          if(str[i].indexOf(&quot;入库-增量&quot;)!=-1) continue;  //增量不生成入库代码</div><div class="line">                          cf.combineCreateRukuCoding(sonFile2+&quot;/&quot;,province,allNumA[k],username);</div><div class="line">                        &#125;</div><div class="line">                      &#125;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                  &#125;</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">           System.out.println(fileName+&quot;目录生成完毕!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;);</div><div class="line">           u.closeAll();//关闭资源</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="5-ChangeFile-java"><a href="#5-ChangeFile-java" class="headerlink" title="5.ChangeFile.java"></a>5.ChangeFile.java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div></pre></td><td class="code"><pre><div class="line">package review;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line"></div><div class="line">public class ChangeFile &#123;</div><div class="line">  </div><div class="line">  private String zhaobYgService=&quot;zhaobYgService&quot;;     //招标预告</div><div class="line">  private String zhaobGgService=&quot;zhaobGgService&quot;;   //招标公告</div><div class="line">  private String zisJgService=&quot;zisJgService&quot;;     //咨审结果</div><div class="line">  private String zhaobWjService=&quot;zhaobWjService&quot;;   //招标文件</div><div class="line">  private String gonggBgService=&quot;gonggBgService&quot;;   //公告变更</div><div class="line">  private String zhaobDyService=&quot;zhaobDyService&quot;;     //招标答疑</div><div class="line">  private String zhongbXxService=&quot;zhongbXxService&quot;; //中标信息</div><div class="line">  private String kongZjService=&quot;kongZjService&quot;;   //控制价</div><div class="line">  </div><div class="line">  private String model; //BackupTask模版语句</div><div class="line"></div><div class="line">  </div><div class="line">  private UseDB udb;</div><div class="line">  private IOFile iof;</div><div class="line">  </div><div class="line">  //getter和Setter方法</div><div class="line">  public String getModel()&#123;</div><div class="line">    return model;</div><div class="line">  &#125;</div><div class="line">  public void setModel(String model)&#123;</div><div class="line">    this.model=model;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  </div><div class="line">  //无参构造方法</div><div class="line">  public ChangeFile(UseDB u) throws Exception&#123;</div><div class="line">    String model=&quot;NameA=(NameB) ac.getBean(\&quot;fileName\&quot;);&quot;;</div><div class="line">    String model2=&quot;NameA.initNameB();&quot;;</div><div class="line">    this.setModel(&quot;\n\t\t&quot;+model+&quot;\n\t\t&quot;+model2+&quot;\n\t\t&quot;);//换行和空格Tab</div><div class="line">    </div><div class="line">    udb=u;</div><div class="line">    iof=new IOFile();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  </div><div class="line">  //工具1:将首字母变为大写</div><div class="line">  public String UpFirstString(String content)&#123; //参数: 内容</div><div class="line">    String firstLetter=content.substring(0,1);</div><div class="line">    //替换首字母</div><div class="line">    content=content.replaceFirst(firstLetter,firstLetter.toUpperCase());</div><div class="line">    return content;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  //工具1-2:将首字母变为小写</div><div class="line">  public String LowFirstString(String content)&#123; //参数: 内容</div><div class="line">    String firstLetter=content.substring(0,1);</div><div class="line">    //替换首字母</div><div class="line">    content=content.replaceFirst(firstLetter,firstLetter.toLowerCase());</div><div class="line">    return content;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  //工具2:自动生成文件名    </div><div class="line">  public String cFileName(String province,String num,String attributeName)&#123;//参数:省份拼音缩写(大写),编号,相应的属性名</div><div class="line">    StringBuilder sb= new StringBuilder();</div><div class="line">    </div><div class="line">    num=num.replace(&quot;-&quot;,&quot;_&quot;);</div><div class="line">    attributeName=UpFirstString(attributeName);</div><div class="line">    sb.append(LowFirstString(province)+&quot;_&quot;+num+&quot;_&quot;+attributeName);</div><div class="line">    </div><div class="line">    return sb.toString();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  //工具3:根据BackupTask模版语句,生成相应字符串</div><div class="line">  public String cModelString(String province,String num,String attributeName)&#123;//参数: 省份,编号,相应的属性名</div><div class="line">    StringBuilder sb=new StringBuilder();</div><div class="line">    </div><div class="line">    </div><div class="line">    String fileName=cFileName(province,num,attributeName);</div><div class="line">    String cStr=getModel();</div><div class="line">    cStr=cStr.replace(&quot;NameA&quot;,attributeName).replace(&quot;NameB&quot;,UpFirstString(attributeName)).replace(&quot;fileName&quot;,fileName);</div><div class="line">    </div><div class="line">    sb.append(cStr);</div><div class="line">    return sb.toString();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  //工具4:生成内容注解</div><div class="line">  public String cContentNode(String infSource,String modelName,String num)&#123;</div><div class="line">    StringBuilder sb= new StringBuilder();</div><div class="line">    </div><div class="line">    //根据模版名字判断类型</div><div class="line">    String type=&quot;&quot;;</div><div class="line">    </div><div class="line">    if(modelName.equals(&quot;zbyg&quot;))&#123;</div><div class="line">      type=&quot;招标预告&quot;;</div><div class="line">    &#125;else if(modelName.equals(&quot;zbgg&quot;))&#123;</div><div class="line">      type=&quot;招标公告&quot;;</div><div class="line">    &#125;else if(modelName.equals(&quot;zsjg&quot;))&#123;</div><div class="line">      type=&quot;咨审结果&quot;;</div><div class="line">    &#125;else if(modelName.equals(&quot;ggbg&quot;))&#123;</div><div class="line">      type=&quot;公告变更&quot;;</div><div class="line">    &#125;else if(modelName.equals(&quot;zbwj&quot;))&#123;</div><div class="line">      type=&quot;招标文件&quot;;</div><div class="line">    &#125;else if(modelName.equals(&quot;zbdy&quot;))&#123;</div><div class="line">      type=&quot;招标答疑&quot;;</div><div class="line">    &#125;else if(modelName.equals(&quot;zbxx&quot;))&#123;</div><div class="line">      type=&quot;中标信息&quot;;</div><div class="line">    &#125;else if(modelName.equals(&quot;kzj&quot;))&#123;</div><div class="line">      type=&quot;招标控制价&quot;;</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    sb.append(&quot;东软一期-&quot;+infSource+&quot;-&quot;+type+&quot;-&quot;+num);</div><div class="line">    </div><div class="line">    return sb.toString();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  </div><div class="line">  //工具5: 判断一个编号有需要创建哪些入库代码，循环调用createRukuCoding方法进行</div><div class="line">  public void combineCreateRukuCoding(String path,String province,String num,String username)&#123;//路径,省份拼音首字母(大写),编号，程旭猿</div><div class="line">    </div><div class="line">    </div><div class="line">    //查询数据库，确认类型</div><div class="line">    String type=&quot;&quot;;</div><div class="line">    </div><div class="line">    String ifURL=udb.checktable(num);</div><div class="line">    String [] ifURL_Arrays=ifURL.split(&quot;&amp;&quot;);</div><div class="line">    for(int i=0;i&lt;ifURL_Arrays.length;i++)&#123;</div><div class="line">      createRukuCoding(path,province,num,ifURL_Arrays[i],username);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  </div><div class="line">  //功能1:创建BackupTask.java                                                        (上一个编号，用来处理-)</div><div class="line">  public void createBackupTask (String path,String province,String num,String ageNum)&#123;//参数: 路径,省份拼音缩写,编号,上一个编号</div><div class="line"></div><div class="line">    //一.检查数据库webapi表,对应num(编号)的整条记录，招标预告-招标公告哪个字段有URL</div><div class="line">    String ifURL=udb.checktable(num);</div><div class="line">    String [] ownURLArrays=ifURL.split(&quot;&amp;&quot;);</div><div class="line">    </div><div class="line">    //二.生成相应内容</div><div class="line">    String content=&quot;&quot;; //储存总体字符串</div><div class="line">    String str=&quot;&quot;;     //中转字符串</div><div class="line">    if(ownURLArrays.length==0)&#123;</div><div class="line">      System.out.println(&quot;这个编号为空，不存在url，跳过&quot;);</div><div class="line">    &#125;else&#123;</div><div class="line">      for(int i=0;i&lt;ownURLArrays.length;i++)  //webapi表格里有url的字段</div><div class="line">      &#123;</div><div class="line">        </div><div class="line">        if(ownURLArrays[i].equals(&quot;zbyg&quot;))&#123;</div><div class="line">          str=cModelString(province,num,zhaobYgService);</div><div class="line">        &#125;else if(ownURLArrays[i].equals(&quot;zbgg&quot;))&#123;</div><div class="line">          str=cModelString(province,num,zhaobGgService);</div><div class="line">        &#125;else if(ownURLArrays[i].equals(&quot;zsjg&quot;))&#123;</div><div class="line">          str=cModelString(province,num,zisJgService);</div><div class="line">        &#125;else if(ownURLArrays[i].equals(&quot;ggbg&quot;))&#123;</div><div class="line">          str=cModelString(province,num,gonggBgService);</div><div class="line">        &#125;else if(ownURLArrays[i].equals(&quot;zbwj&quot;))&#123;</div><div class="line">          str=cModelString(province,num,zhaobWjService);</div><div class="line">        &#125;else if(ownURLArrays[i].equals(&quot;zbdy&quot;))&#123;</div><div class="line">          str=cModelString(province,num,zhaobDyService);</div><div class="line">        &#125;else if(ownURLArrays[i].equals(&quot;zbxx&quot;))&#123;</div><div class="line">          str=cModelString(province,num,zhongbXxService);</div><div class="line">        &#125;else if(ownURLArrays[i].equals(&quot;kzj&quot;))&#123;</div><div class="line">          str=cModelString(province,num,kongZjService);</div><div class="line">        &#125;</div><div class="line">                </div><div class="line">        content+=str;</div><div class="line">      &#125;</div><div class="line">      content+=&quot;//ok;&quot;;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">    //三.判断当前编号是否和上一个编号相同</div><div class="line">    boolean sign=false;//设立标示</div><div class="line">    if(num.equals(ageNum) || !num.substring(0,5).equals(ageNum.substring(0,5)))&#123;</div><div class="line">      sign=true;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //四.根据数据库表article表中模版，生成相应编号的文件</div><div class="line">    try&#123;</div><div class="line">      String dbModelBackupTask=udb.select(&quot;article&quot;,&quot;detail&quot;,&quot;model=&apos;BackupTask&apos;&quot;); //储存数据库article表中,BackupTask模版</div><div class="line">    </div><div class="line">      if(sign)&#123;</div><div class="line">        //与上一个编号完全不同(号码不同,且不带-)</div><div class="line">        dbModelBackupTask=dbModelBackupTask.replace(&quot;//changeModel;&quot;,content);</div><div class="line">        iof.cFile(path,&quot;BackupTask.java&quot;,&quot;UTF-8&quot;,dbModelBackupTask);//路径,文件名,编码格式,内容</div><div class="line">      </div><div class="line">      &#125;else&#123;</div><div class="line">        //带-的编号,在上一个文件基础上进行叠加</div><div class="line">        String ageContent=iof.readFileContent(path+&quot;/BackupTask.java&quot;,&quot;UTF-8&quot;);//前一个编号的内容   </div><div class="line">        String changeContent=ageContent.replace(&quot;//ok;&quot;,content);</div><div class="line">        iof.cFile(path,&quot;BackupTask.java&quot;,&quot;UTF-8&quot;,changeContent);</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">    &#125;catch(Exception e)&#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  //功能1:创建相应编号,类型的入库代码</div><div class="line">  public void createRukuCoding(String path,String province,String num,String type,String username)&#123;//参数: 路径,省份拼音首字母缩写,编号,类型,程序猿</div><div class="line">    </div><div class="line">        //一.生成文件名</div><div class="line">        String fileName=&quot;&quot;; //注解名</div><div class="line">        String typeSpell=&quot;&quot;;</div><div class="line">        String typeService=&quot;&quot;;</div><div class="line">        </div><div class="line">          for(int i=0;i&lt;8;i++)  //共8种类型</div><div class="line">          &#123;       </div><div class="line">            if(type.equals(&quot;zbyg&quot;))&#123;</div><div class="line">              fileName=cFileName(province,num,zhaobYgService);</div><div class="line">              typeSpell=&quot;zhaoBiaoYuGao&quot;;</div><div class="line">              typeService=&quot;zhaobYgService&quot;;</div><div class="line">            &#125;else if(type.equals(&quot;zbgg&quot;))&#123;</div><div class="line">              fileName=cFileName(province,num,zhaobGgService);</div><div class="line">              typeSpell=&quot;zhaoBiaoGongGao&quot;;</div><div class="line">              typeService=&quot;zhaobGgService&quot;;</div><div class="line">            &#125;else if(type.equals(&quot;zsjg&quot;))&#123;</div><div class="line">              fileName=cFileName(province,num,zisJgService);</div><div class="line">              typeSpell=&quot;ziShenJieGuo&quot;;</div><div class="line">              typeService=&quot;zisJgService&quot;;</div><div class="line">            &#125;else if(type.equals(&quot;ggbg&quot;))&#123;</div><div class="line">              fileName=cFileName(province,num,gonggBgService);</div><div class="line">              typeSpell=&quot;gongGaoBianGeng&quot;;</div><div class="line">              typeService=&quot;gonggBgService&quot;;</div><div class="line">            &#125;else if(type.equals(&quot;zbwj&quot;))&#123;</div><div class="line">              fileName=cFileName(province,num,zhaobWjService);</div><div class="line">              typeSpell=&quot;&quot;;</div><div class="line">              typeService=&quot;zhaobWjService&quot;;</div><div class="line">            &#125;else if(type.equals(&quot;zbdy&quot;))&#123;</div><div class="line">              fileName=cFileName(province,num,zhaobDyService);</div><div class="line">              typeSpell=&quot;zhaoBiaoWenJian&quot;;</div><div class="line">              typeService=&quot;zhaobDyService&quot;;</div><div class="line">            &#125;else if(type.equals(&quot;zbxx&quot;))&#123;</div><div class="line">              fileName=cFileName(province,num,zhongbXxService);</div><div class="line">              typeSpell=&quot;zhongBiaoXinXi&quot;;</div><div class="line">              typeService=&quot;zhongbXxService&quot;;</div><div class="line">            &#125;else if(type.equals(&quot;kzj&quot;))&#123;</div><div class="line">              fileName=cFileName(province,num,kongZjService);</div><div class="line">              typeSpell=&quot;kongZhiJia&quot;;</div><div class="line">              typeService=&quot;kongZjService&quot;;</div><div class="line">            &#125;       </div><div class="line">         &#125;</div><div class="line">          </div><div class="line">        //首字母变为小写</div><div class="line">        String fileNameL=LowFirstString(fileName);</div><div class="line">        </div><div class="line">        //首字母变为大写</div><div class="line">        String typeSpellUp=UpFirstString(typeSpell);</div><div class="line">        String typeServiceUp=UpFirstString(typeService);</div><div class="line">          </div><div class="line">        //二.查询数据库模版</div><div class="line">        String modelName=fileName.substring(fileName.lastIndexOf(&quot;_&quot;)+1);</div><div class="line">        String modelContent=udb.select(&quot;article&quot;,&quot;detail&quot;,&quot;model=&apos;ZhaobGgServiceModel&apos;&quot;);</div><div class="line">        </div><div class="line">        //三.查询数据库num编号的整行记录,所需要要的信息</div><div class="line">        String information_num=udb.selectNeedInformation_num(num);</div><div class="line">        String [] information_Arrays=information_num.split(&quot;&amp;&quot;);</div><div class="line">        </div><div class="line">        String area=information_Arrays[0];                      //区域</div><div class="line">        String provinceDB=information_Arrays[1].replace(&quot;省&quot;,&quot;&quot;);          //省份(不要省字)</div><div class="line">        String city=information_Arrays[2].replace(&quot;市&quot;,&quot;&quot;);              //城市(不要市字)</div><div class="line">        String county=information_Arrays[3].replace(&quot;区&quot;,&quot;&quot;).replace(&quot;县&quot;,&quot;&quot;);    //区县(不要区,县字)</div><div class="line">        String webname=information_Arrays[4];                   //网站名称</div><div class="line">        String infsource=information_Arrays[5];                   //信息来源</div><div class="line">        </div><div class="line">        //三.生成顶部内容注解</div><div class="line">        String contentNode=cContentNode(infsource,type,num);</div><div class="line">        </div><div class="line">        //四.修改模版</div><div class="line">        String rukuContent=modelContent.replace(&quot;zhaoBiaoGongGao&quot;,typeSpell).replace(&quot;ZhaoBiaoGongGao&quot;,typeSpellUp).replace(&quot;ZhaobGgService&quot;,typeServiceUp).replace(&quot;zhaobGgService&quot;,typeService).replace(&quot;zbgg&quot;,type);</div><div class="line">        //程序猿;</div><div class="line">        rukuContent=rukuContent.replaceFirst(&quot;//程序猿;&quot;,username).replaceFirst(&quot;//注解内容;&quot;,contentNode);</div><div class="line">        rukuContent=rukuContent.replaceFirst(&quot;//注解;&quot;,fileNameL).replaceFirst(&quot;//类名;&quot;,fileName);</div><div class="line">        </div><div class="line">        rukuContent=rukuContent.replaceFirst(&quot;//编号;&quot;,num);</div><div class="line">        </div><div class="line">        rukuContent=rukuContent.replaceFirst(&quot;//area;&quot;,area);</div><div class="line">        rukuContent=rukuContent.replaceFirst(&quot;//provinceDB;&quot;,provinceDB);</div><div class="line">        rukuContent=rukuContent.replaceFirst(&quot;//city;&quot;,city);</div><div class="line">        rukuContent=rukuContent.replaceFirst(&quot;//county;&quot;,county);</div><div class="line">        rukuContent=rukuContent.replaceFirst(&quot;//webname;&quot;,webname);</div><div class="line">        rukuContent=rukuContent.replaceFirst(&quot;//infsource;&quot;,infsource);</div><div class="line">        </div><div class="line">        try&#123;</div><div class="line">          //创建文件</div><div class="line">          iof.cFile(path,fileName+&quot;.java&quot;,&quot;UTF-8&quot;,rukuContent);//路径,文件名,编码格式,内容</div><div class="line">        &#125;catch(IOException e)&#123;</div><div class="line">          e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="6-两套java文件模版"><a href="#6-两套java文件模版" class="headerlink" title="6.两套java文件模版"></a>6.两套java文件模版</h2><p>1.BackupTaskt.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">package com.bonait.dataextract.scheduler;</div><div class="line"></div><div class="line">import org.quartz.JobExecutionContext;</div><div class="line">import org.quartz.JobExecutionException;</div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line">import org.springframework.scheduling.quartz.QuartzJobBean;</div><div class="line"></div><div class="line">import com.bonait.dataextract.service.GonggBgService;</div><div class="line">import com.bonait.dataextract.service.KongZjService;</div><div class="line">import com.bonait.dataextract.service.ZhaobDyService;</div><div class="line">import com.bonait.dataextract.service.ZhaobGgService;</div><div class="line">import com.bonait.dataextract.service.ZhaobWjService;</div><div class="line">import com.bonait.dataextract.service.ZhaobYgService;</div><div class="line">import com.bonait.dataextract.service.ZhongbXxService;</div><div class="line">import com.bonait.dataextract.service.ZisJgService;</div><div class="line"></div><div class="line">public class BackupTask extends QuartzJobBean &#123;</div><div class="line"></div><div class="line">  private static ZhaobGgService zhaobGgService;</div><div class="line">  private static ZhongbXxService zhongbXxService;</div><div class="line">  private static ZhaobWjService zhaobWjService;</div><div class="line">  private static ZhaobDyService zhaobDyService;</div><div class="line">  private static ZisJgService zisJgService;</div><div class="line">  private static GonggBgService gonggBgService;</div><div class="line">  private static KongZjService kongZjService;</div><div class="line">  private static ZhaobYgService zhaobYgService;</div><div class="line">  </div><div class="line"></div><div class="line">  @Override</div><div class="line">  protected void executeInternal(JobExecutionContext arg0)</div><div class="line">      throws JobExecutionException &#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public static void main(String[] args) &#123;</div><div class="line">    ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</div><div class="line">    </div><div class="line">    //changeModel;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>2.ZhaobGgServiceModel.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line">package com.bonait.dataextract.service.impl;</div><div class="line">import javax.annotation.Resource;</div><div class="line"></div><div class="line">import java.text.SimpleDateFormat;</div><div class="line">import java.util.Date;</div><div class="line">import java.util.Iterator;</div><div class="line">import java.util.List;</div><div class="line">import java.util.UUID;</div><div class="line"></div><div class="line"></div><div class="line">import net.sf.json.JSONArray;</div><div class="line">import net.sf.json.JSONObject;</div><div class="line"></div><div class="line">import org.hibernate.Query;</div><div class="line">import org.hibernate.Session;</div><div class="line">import org.hibernate.SessionFactory;</div><div class="line">import org.hibernate.Transaction;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line"></div><div class="line">import com.bonait.dataextract.dao.BaseDao;</div><div class="line">import com.bonait.dataextract.domain.*;</div><div class="line">import com.bonait.dataextract.service.*;</div><div class="line">import com.bonait.dataextract.util.Util;</div><div class="line">import com.bonait.dataextract.vo.*;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * @程序猿：//程序猿;</div><div class="line"> * </div><div class="line"> * @内容：//注解内容;</div><div class="line"> */</div><div class="line">@Service(&quot;//注解;&quot;)</div><div class="line">public class //类名; implements ZhaobGgService&#123;</div><div class="line"></div><div class="line">  @Resource</div><div class="line">  private SessionFactory sf ;</div><div class="line">  private Query query;</div><div class="line">  private ZhaoBiaoGongGao zbgg;</div><div class="line">  //列表页接口地址</div><div class="line">  private String listUrl=&quot;&quot;;</div><div class="line">  //内容页接口地址</div><div class="line">  private String detailUrl=&quot;&quot;;</div><div class="line">  //入库编码</div><div class="line">  private String sourceNo=&quot;//编号;&quot;;</div><div class="line">  @Override</div><div class="line">  public void initZhaobGgService() &#123;</div><div class="line">    try&#123;</div><div class="line">            //获取总页数</div><div class="line">          String s=Util.sendGet(listUrl,&quot;1&quot;);</div><div class="line">          JSONObject obj =JSONObject.fromObject(s);</div><div class="line">          while (null == obj.get(&quot;pageCount&quot;))&#123;</div><div class="line">           s = Util.sendGet(listUrl, &quot;1&quot;);</div><div class="line">           obj = JSONObject.fromObject(s);</div><div class="line">          &#125;</div><div class="line">    int maxPage=Integer.parseInt(obj.get(&quot;pageCount&quot;).toString());</div><div class="line"></div><div class="line"></div><div class="line">    Session session=sf.openSession();</div><div class="line">    session.beginTransaction();</div><div class="line"></div><div class="line">    //清空数据库里</div><div class="line">//    query=session.createSQLQuery(&quot;DELETE FROM t_zhao_biao_gong_gao t where t.WEB_SOURCE_NO=&apos;&quot;+sourceNo+&quot;&apos;&quot;);</div><div class="line">//    query.executeUpdate();</div><div class="line">//    session.getTransaction().commit();</div><div class="line">//    session.beginTransaction();</div><div class="line"></div><div class="line"></div><div class="line">    int KK=0;</div><div class="line">      flag:</div><div class="line">      for(int i=1;i&lt;=maxPage;i++)&#123;//maxPage</div><div class="line">        String jsonList=Util.sendGet(listUrl,i+&quot;&quot;);</div><div class="line">        JSONObject objList =JSONObject.fromObject(jsonList);</div><div class="line"></div><div class="line">        while(null == objList.get(&quot;list&quot;))&#123;</div><div class="line">          jsonList = Util.sendGet(listUrl, i + &quot;&quot;);</div><div class="line">          objList = JSONObject.fromObject(jsonList);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        JSONArray temp=(JSONArray) objList.get(&quot;list&quot;);</div><div class="line">        List list = (List)JSONArray.toList(temp,ListVO.class);</div><div class="line">        Iterator it = list.iterator();</div><div class="line"></div><div class="line">        int rows = 1;</div><div class="line">        for(int row =1;row &lt; rows;row++)&#123;</div><div class="line">          it.next();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        while(it.hasNext())&#123;</div><div class="line">          ListVO listvo =(ListVO) it.next();</div><div class="line">          query=session.createSQLQuery(&quot;SELECT ID FROM t_zhao_biao_gong_gao t where t.WEB_SOURCE_NO=&apos;&quot;+sourceNo+&quot;&apos; and t.RECORD_ID=&apos;&quot;+listvo.getId()+&quot;&apos;&quot;);</div><div class="line">          String getDate=listvo.getDate();</div><div class="line">          //获取页数，便于插入数据异常时，先跳过该页</div><div class="line">          System.out.println(i+&quot;:&quot;+getDate+&quot;:&quot;+maxPage);</div><div class="line">          </div><div class="line">              int date = Integer.parseInt(getDate.substring(0, 4));</div><div class="line">              //只取2014年至今的不重复数据 </div><div class="line">            if(query.executeUpdate()&lt;=0&amp;&amp;date&gt;=2014)&#123;</div><div class="line">              KK+=1;</div><div class="line">              String detail = null;</div><div class="line">            JSONObject o = null;</div><div class="line">            String content = null;</div><div class="line">            while (content == null || content.length() &lt; 10) &#123;</div><div class="line">              detail = Util.sendGet(detailUrl, listvo.getId());</div><div class="line">              if (null != detail)</div><div class="line">                o = JSONObject.fromObject(detail);</div><div class="line">              else</div><div class="line">                continue;</div><div class="line">              if (null != o&amp;&amp;null != o.get(&quot;content&quot;))</div><div class="line">                content = o.get(&quot;content&quot;).toString();</div><div class="line">              else</div><div class="line">                continue;</div><div class="line">              System.out.println(&quot;runing..&quot;);</div><div class="line">            &#125;</div><div class="line">              //过滤掉无效数据</div><div class="line">              if(content==null||content.length()&lt;10||content.contains(&quot;出错&quot;)||content.contains(&quot;找不到文件&quot;))&#123;continue;&#125;</div><div class="line">              zbgg=new ZhaoBiaoGongGao();</div><div class="line">              zbgg.setWebSourceNo(sourceNo);</div><div class="line">              zbgg.setArea(&quot;//area;&quot;);//区域</div><div class="line">              zbgg.setProvince(&quot;//provinceDB;&quot;);//省份</div><div class="line">              zbgg.setCity(&quot;//city;&quot;);//城市，没有可不填</div><div class="line">              zbgg.setDistrict(&quot;//county;&quot;);// 区县 不要“区”字符</div><div class="line">//              zbgg.setCity(listvo.getCiy());</div><div class="line">              zbgg.setWebSourceName(&quot;//webname;&quot;);//网站名称，写完整的名称</div><div class="line">              zbgg.setInfoSource(&quot;//infsource;&quot;);//信息来源</div><div class="line">              //未匹配到工程或服务的，都标识为货物</div><div class="line">                String infoType=Util.getInfoType(content);</div><div class="line">                if(infoType!=null&amp;&amp;infoType.length()&gt;0)</div><div class="line">                zbgg.setInfoType(Util.getInfoType(content));</div><div class="line">                else &#123;zbgg.setInfoType(&quot;货物&quot;);&#125;</div><div class="line">//              zbgg.setInfoType(&quot;服务&quot;);//信息类型</div><div class="line">//              zbgg.setIndustry(&quot;建筑建材&quot;); //行业分类</div><div class="line">//              zbgg.setIndustry(Util.getIndustry(content));//行业分类</div><div class="line">              zbgg.setRecordId(listvo.getId());</div><div class="line">              zbgg.setId(UUID.randomUUID().toString());</div><div class="line">              zbgg.setPageTitle(listvo.getTitle());</div><div class="line">              zbgg.setPageTime(getDate);</div><div class="line">              zbgg.setPageContent(content);</div><div class="line">              zbgg.setPageAttachments(&quot;&quot;);//附件url，暂不需要</div><div class="line">              zbgg.setCreateTime(new Date());</div><div class="line">            session.save(zbgg);</div><div class="line">             &#125;else if(date&lt;=2013)&#123;break flag;&#125;//到2013年的页码时，断掉循环</div><div class="line">            if(KK%1==0)&#123;</div><div class="line">              session.flush();  </div><div class="line">              session.clear();</div><div class="line">              session.getTransaction().commit();</div><div class="line">              session.beginTransaction();</div><div class="line">            &#125;</div><div class="line">        &#125;  </div><div class="line">      &#125; </div><div class="line"></div><div class="line">      </div><div class="line">    session.getTransaction().commit();</div><div class="line">    session.close();</div><div class="line">    System.out.println(&quot;000000000&quot;);</div><div class="line">    </div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">      System.out.println(sourceNo+&quot;接口出错，请检查&quot;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="7-设计数据库"><a href="#7-设计数据库" class="headerlink" title="7.设计数据库"></a>7.设计数据库</h2><p>数据库:Mysql 5.7<br>数据库工具:Navicat for MySQL10.7<br>JDBC-Mysql驱动包版本:mysql-connector-java-5.1.38-bin.jar</p>
<p>1,创建速据库<br><code>create database my_blog</code></p>
<hr>
<p>2.创建表article(用于保存模版)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> CREATE TABLE article(             </div><div class="line">    id INT  AUTO_INCREMENT primary key,</div><div class="line">    model VARCHAR(30) NOT NULL,</div><div class="line">    detail VARCHAR(20000) NOT NULL,</div><div class="line">    date DATETIME DEFAULT NOW()</div><div class="line">)ENGINE = innoDB DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure></p>
<hr>
<p>3.创建webapi(导入excel表格数据,保存进该表)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE webapi(             </div><div class="line">    num VARCHAR(20) primary key,</div><div class="line">    area VARCHAR(255) NOT NULL,</div><div class="line">    province VARCHAR(255) NOT NULL,</div><div class="line">    city VARCHAR(255) NOT NULL,</div><div class="line">    county VARCHAR(255) NOT NULL,</div><div class="line">    webname VARCHAR(255)  NOT NULL,</div><div class="line">    weburl  VARCHAR(255)  NOT NULL,</div><div class="line">    infsource VARCHAR(255) NOT NULL,</div><div class="line">    inftype   VARCHAR(255),</div><div class="line">    worktype VARCHAR(255),</div><div class="line">    zbyg  VARCHAR(255),</div><div class="line">    zbgg    VARCHAR(255),</div><div class="line">    zsjg  VARCHAR(255),</div><div class="line">    ggbg VARCHAR(255),</div><div class="line">    zbwj VARCHAR(255),</div><div class="line">    zbdy VARCHAR(255),</div><div class="line">    zbxx VARCHAR(255),</div><div class="line">    kzj VARCHAR(255),</div><div class="line">)ENGINE = innoDB DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure></p>
<hr>
<p>3-2使用 navicat for MySQL工具导入Excel表格到数据库自动生成</p>
<blockquote>
<p>操作步骤：</p>
<blockquote>
<p>打开工具—&gt;连接数据库—&gt;左键双击选择数据库—&gt;右键子菜单的表—-&gt;导入向导—-&gt;<br>——–&gt;选择Excel文件(2007或者以上版本)(*.xlsx)，下一步,之后根据提示操作即可</p>
</blockquote>
</blockquote>
<p>查看webapi表结构的命令：<br><code>show create table webapi;</code></p>
<hr>
<p><br><br></p>
<h1 id="版本2-0【2016-11-15】"><a href="#版本2-0【2016-11-15】" class="headerlink" title="版本2.0【2016.11.15】"></a>版本2.0【2016.11.15】</h1><p><br><br></p>
<ul>
<li>2.0升级版,只生成入库目录,webapi表增加三列字段,创建新的数据库batchcreate_file</li>
<li>分成了review包和Utils包，主要修改了ChnageFile.java,IOFile和UseDB.java</li>
<li>可自动获取区域名的拼音首字母缩写【GetFirstLetter】，入库模版发生了变化，代码大幅度修改，整体思路不变</li>
<li>Macicat for MySQL导入2013的Excel表格会出错，所以需要将excel表另存为【Excel 97-2003工作蒲(*.xls)】</li>
<li>耗时6个小时左右，脑子还是不够灵活，最近犹如咸鱼一般，加油吧，骚年</li>
</ul>
<p><br><br><br></p>
<h2 id="一-testMain-java和TaskFlow-java"><a href="#一-testMain-java和TaskFlow-java" class="headerlink" title="一.testMain.java和TaskFlow.java"></a>一.testMain.java和TaskFlow.java</h2><p>1.testMain<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package review;</div><div class="line"></div><div class="line"></div><div class="line">public class testMain &#123;</div><div class="line">    </div><div class="line"></div><div class="line">    //main()方法，测试</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">    </div><div class="line">        //创建任务流程对象</div><div class="line">        TaskFlow tf= new TaskFlow();</div><div class="line">        </div><div class="line">        //执行流程(参数:路径,目录名)</div><div class="line">        tf.GO(&quot;C:/Users/Liu-shuwei/Desktop\\&quot;,&quot;02053-02873&quot;,&quot;某男子&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>2.TaskFlow<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">package review;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseDB;</div><div class="line"></div><div class="line">public class TaskFlow &#123;</div><div class="line">    </div><div class="line">    public static long  useTime()&#123;</div><div class="line">        return System.currentTimeMillis();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //无参构造方法</div><div class="line">    public TaskFlow()&#123;</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //任务流程</div><div class="line">    public void GO(String path,String numberArea,String username) &#123;</div><div class="line">        //开始时间</div><div class="line">        long beginTime=useTime();</div><div class="line">        </div><div class="line">        //执行任务流程</div><div class="line">        try&#123;</div><div class="line">            UseDB udb = new UseDB();</div><div class="line">            IOFile iof=new IOFile();</div><div class="line">            </div><div class="line">            udb.connDatabase();//连接数据库</div><div class="line">            </div><div class="line">            //一.往数据库插入模版数据</div><div class="line">            String content=null;                                                                            //注意，路径的话用/或者\\都可以</div><div class="line">            content=iof.readFileContent(&quot;model_file/BackupTask.java&quot;,&quot;GBK&quot;); //数据库的默认编码是GBK,如果是UTF-8\</div><div class="line">            udb.insertTXT(&quot;article&quot;,&quot;model,detail&quot;,&quot;BackupTask&amp;&amp;&amp;&amp;&amp;&quot;+content,&quot;?,?&quot;);</div><div class="line">            content=iof.readFileContent(&quot;model_file/ZhaobGgServiceModel.java&quot;,&quot;GBK&quot;); </div><div class="line">            udb.insertTXT(&quot;article&quot;,&quot;model,detail&quot;,&quot;ZhaobGgServiceModel&amp;&amp;&amp;&amp;&amp;&quot;+content,&quot;?,?&quot;);</div><div class="line"></div><div class="line">            </div><div class="line">            //二.创建整体目录</div><div class="line">            iof.cList(path,numberArea,username);</div><div class="line">            </div><div class="line">            //关闭资源</div><div class="line">            udb.closeAll();</div><div class="line">            </div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //结束时间</div><div class="line">        long endTime=useTime();</div><div class="line">        System.out.println(&quot;总共用时:&quot;+(endTime-beginTime)+&quot;毫秒！&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<hr>
<h2 id="二-UseDB-java-IOFile-java和ChangeFile-java"><a href="#二-UseDB-java-IOFile-java和ChangeFile-java" class="headerlink" title="二.UseDB.java,IOFile.java和ChangeFile.java"></a>二.UseDB.java,IOFile.java和ChangeFile.java</h2><p>1.UseDb<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div></pre></td><td class="code"><pre><div class="line">package Utils;</div><div class="line"></div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.DriverManager;</div><div class="line">import java.sql.PreparedStatement;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.ResultSetMetaData;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.sql.Statement;</div><div class="line"></div><div class="line">public class UseDB &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    private String drive=&quot;com.mysql.jdbc.Driver&quot;;           //数据库驱动</div><div class="line">    private String link=&quot;jdbc:mysql://127.0.0.1:3306/&quot;;     //mysql—JDBC链接+IP地址+端口</div><div class="line">    private String database=&quot;batchcreate_file&quot;;                      //数据库</div><div class="line">    </div><div class="line">    private String username=&quot;root&quot;;                         //用户名</div><div class="line">    private String password=&quot;liushuwei&quot;;                    //密码</div><div class="line">    </div><div class="line">    private Connection conn;</div><div class="line">    private Statement st;</div><div class="line">    private PreparedStatement pst;</div><div class="line">    private ResultSet rs;</div><div class="line">    private ResultSetMetaData rsmd;//获取列的信息</div><div class="line">    </div><div class="line">    private String sql; //sql语句</div><div class="line">    </div><div class="line"></div><div class="line">    //无参构造方法，创建UseDB对象时候，直接连接数据库</div><div class="line">    public UseDB()&#123; </div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //调用该方法时候连接数据库</div><div class="line">    public void connDatabase()  throws Exception&#123;</div><div class="line">         Class.forName(drive);</div><div class="line">         conn=DriverManager.getConnection(link+database,username,password); </div><div class="line">         st=conn.createStatement();</div><div class="line">         System.out.println(&quot;数据库连接成功......&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">        //功能1: 使用database数据库                                </div><div class="line">        public void useDatabase(String database)&#123;//参数: 数据库名称</div><div class="line">            sql=&quot;USE &quot;+database+&quot;;&quot;;</div><div class="line">            try&#123;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">            &#125;catch(Exception e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(sql+&quot; 执行完毕！-------------------------------------&quot;);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //功能2:查询table表中record字段满足condition条件的值</div><div class="line">        public String select(String table,String record,String condition)&#123;//参数: 表名,字段名,WHERE条件</div><div class="line">            </div><div class="line">            StringBuilder sb= new StringBuilder();</div><div class="line">            sql=&quot;SELECT &quot;+record+&quot; FROM &quot; +table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">            </div><div class="line">            try&#123;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                   ResultSetMetaData rsm =rs.getMetaData(); //获得列集</div><div class="line">                while(rs.next())&#123;</div><div class="line">                    sb.append(rs.getString(record));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;catch(Exception e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(sql+&quot; 执行完毕！-------------------------------------&quot;);</div><div class="line">            return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //功能3:查询table所有数据的数据,打印到控制台</div><div class="line">        public String selectAll(String table)&#123;//参数: 表名</div><div class="line">            </div><div class="line">            StringBuilder sb= new StringBuilder();</div><div class="line">            sql=&quot;SELECT * FROM &quot; +table+&quot;;&quot;;</div><div class="line">            </div><div class="line">            try&#123;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                rsmd =rs.getMetaData(); //获得列集</div><div class="line">                while(rs.next())&#123;</div><div class="line">                    for(int i=1;i&lt;rsmd.getColumnCount();i++)&#123;</div><div class="line">                        System.out.print(rs.getString(i)+&quot;\t&quot;);</div><div class="line">                    &#125;</div><div class="line">                    System.out.println();//换行</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;catch(Exception e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(sql+&quot; 执行完毕！-------------------------------------&quot;);</div><div class="line">            return sb.toString();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        </div><div class="line">        //功能4:查询webapi表,判断招标预告到控制价字段的记录值是否存在URL  ,返回有URL记录的字段名(例如:zbgg)</div><div class="line">        public String checktable(String num)&#123;//参数: 编号        </div><div class="line">            StringBuilder sb= new StringBuilder();</div><div class="line">            sql=&quot;SELECT * FROM webapi WHERE num=&apos;&quot;+num+&quot;&apos;;&quot;;</div><div class="line">            String content=null;</div><div class="line">            try&#123;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                rsmd=rs.getMetaData();</div><div class="line">                while(rs.next())&#123;</div><div class="line">                    for(int i=10;i&lt;18;i++)&#123;</div><div class="line">                        content=rs.getString(i);</div><div class="line">                        if(content.length()&lt;3) continue;</div><div class="line">                            </div><div class="line">                        sb.append(rsmd.getColumnName(i)+&quot;&amp;&quot;);   </div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">            &#125;catch(SQLException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(sql+&quot; 执行完毕！-------------------------------------&quot;);</div><div class="line">            return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        //功能5:查询table表,record字段的所有记录值(所有行)</div><div class="line">        public String selectNum(String table,String record) throws SQLException&#123;</div><div class="line">            StringBuilder sb= new StringBuilder();</div><div class="line">            </div><div class="line">             sql=&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot;;&quot;;</div><div class="line">             rs=st.executeQuery(sql);</div><div class="line">             while(rs.next())&#123;</div><div class="line">                 sb.append(rs.getString(1)+&quot;&amp;&quot;);</div><div class="line">             &#125;</div><div class="line">             </div><div class="line">            System.out.println(sql+&quot; 执行完毕！-------------------------------------&quot;);</div><div class="line">            return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        //功能6: 插入数据--少量数据(标题，日期等)</div><div class="line">        public void insert(String table,String record,String content)&#123;//参数: 表名,字段(多的话用,分割),内容(多的话用,号分割)</div><div class="line">                String sql=&quot;INSERT INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+content+&quot;);&quot;;</div><div class="line">                    int i=0;</div><div class="line">                    try&#123;</div><div class="line">                        i=st.executeUpdate(sql);</div><div class="line">                        </div><div class="line">                    &#125;catch(Exception e)&#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    if(i!=-1)&#123;</div><div class="line">                        System.out.println(&quot;插入成功&quot;);</div><div class="line">                    &#125;</div><div class="line">                System.out.println(sql+&quot;执行完毕！&quot;);</div><div class="line">            &#125;</div><div class="line">        </div><div class="line">        //功能7:插入数据--大量数据(文章，文本内容)</div><div class="line">        public void insertTXT(String table,String record,String content,String mark)&#123;//参数值: 表名,字段,内容(多个内容用&amp;号分割),?号(多个?用,分割)</div><div class="line">            </div><div class="line">            sql=&quot;INSERT INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+mark+&quot;);&quot;;</div><div class="line">            </div><div class="line">            String [] strA=content.split(&quot;&amp;&amp;&amp;&amp;&amp;&quot;);</div><div class="line">            //判断是否存在相同记录，如果存在则不执行插入</div><div class="line">            String ifwhere=record.substring(0,record.indexOf(&quot;,&quot;));</div><div class="line">            String ifexist=&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot; WHERE &quot;+ifwhere+&quot;=&apos;&quot;+strA[0]+&quot;&apos;;&quot;;</div><div class="line">                </div><div class="line">            try&#123;</div><div class="line">                rs=st.executeQuery(ifexist);</div><div class="line">                System.out.println(ifexist+&quot; 执行完毕！================================&quot;);</div><div class="line">                </div><div class="line">                if(rs.next())&#123;//存在相同记录</div><div class="line">                    System.out.println(&quot;数据库中已经存在相同&quot;+strA[0]+&quot;模版,不进行重复插入!&quot;);</div><div class="line">                &#125;else&#123;</div><div class="line">                    //不存在相同记录</div><div class="line">                    System.out.println(&quot;数据库不存在&quot;+strA[0]+&quot;模版,正在进行插入......&quot;);</div><div class="line">                    pst=conn.prepareStatement(sql);</div><div class="line">                    </div><div class="line">                    for(int i=1;i&lt;=strA.length;i++)&#123;//循环次数: ?号个数            </div><div class="line">                        pst.setString(i,strA[i-1]);</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    pst.executeUpdate();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;catch(Exception e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            System.out.println(sql+&quot; 执行完毕！================================&quot;);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        //功能8: 查询数据库weiabi表中对应num编号整行记录的需求字段的信息(区域，省份，城市，区县，网站名称，信息来源)</div><div class="line">        public String selectNeedInformation_num(String num)&#123;</div><div class="line">                StringBuilder sb= new StringBuilder();</div><div class="line">            </div><div class="line">            sql=&quot;SELECT * FROM webapi WHERE num=&apos;&quot;+num+&quot;&apos;;&quot;;</div><div class="line">            try&#123;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                while(rs.next())&#123;</div><div class="line">                    for(int i=2;i&lt;=8;i++)&#123; //区域-信息来源</div><div class="line">                        if(i==7) continue; //网站网址</div><div class="line">                        sb.append(rs.getString(i)+&quot;&amp;&quot;);</div><div class="line">                    &#125;       </div><div class="line">                &#125;</div><div class="line">            &#125;catch(Exception e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            System.out.println(sql+&quot; 执行完毕！-------------------------------------&quot;);</div><div class="line">            return sb.toString();   </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //关闭数据库连接</div><div class="line">        public void closeAll()&#123;</div><div class="line">            </div><div class="line">            //关闭Result</div><div class="line">             try&#123;</div><div class="line">                  if(rs!=null)</div><div class="line">                       rs.close();</div><div class="line">               &#125;catch(Exception e)&#123;</div><div class="line">                   e.printStackTrace(System.err);</div><div class="line">               &#125;</div><div class="line">             </div><div class="line">             </div><div class="line">            //关闭PreparedStatement</div><div class="line">            try&#123;</div><div class="line">            if(pst!=null)</div><div class="line">                  pst.close();</div><div class="line">            &#125;catch(Exception e)&#123;</div><div class="line">               e.printStackTrace(System.err);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            </div><div class="line">            //关闭Statement</div><div class="line">             try&#123;</div><div class="line">                   if(st!=null)</div><div class="line">                       st.close();</div><div class="line">               &#125;catch(Exception e)&#123;</div><div class="line">                   e.printStackTrace(System.err);</div><div class="line">               &#125;</div><div class="line">            </div><div class="line">             </div><div class="line">           //关闭Connection</div><div class="line">           try&#123;</div><div class="line">               if(conn!=null)</div><div class="line">                   conn.close();</div><div class="line">           &#125;catch(Exception e)&#123;</div><div class="line">               e.printStackTrace(System.err);</div><div class="line">           &#125;</div><div class="line">        </div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>2.IOfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line">package Utils;</div><div class="line"></div><div class="line">import java.io.File;</div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.io.OutputStreamWriter;</div><div class="line"></div><div class="line">public class IOFile &#123;</div><div class="line">    </div><div class="line">        //功能1:(字节流)读取文件内容--只适用与读取英文，数字，无法设置编码格式</div><div class="line">        public String readFileContent2(String path) throws IOException&#123; //参数:路径</div><div class="line">            String content=&quot;&quot;;</div><div class="line">            </div><div class="line">            InputStream inf=new FileInputStream(path);</div><div class="line">            int size=inf.available();</div><div class="line">            for(int i=0;i&lt;size;i++)&#123;</div><div class="line">                content+=(char)inf.read();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            return &quot;\&apos;&quot;+content+&quot;\&apos;&quot;;   </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //功能2:(字符流)读取文件内容--可以设置编码，读取中文，英文，数字</div><div class="line">          public String readFileContent(String path,String encoding) throws IOException&#123; //参数: 路径,编码格式</div><div class="line">                StringBuilder sb =new StringBuilder();</div><div class="line">                    </div><div class="line">                    //定位文件</div><div class="line">                    File f=new File(path);</div><div class="line">                    FileInputStream fip=new FileInputStream(f);</div><div class="line">                    InputStreamReader reader=new InputStreamReader(fip,encoding);</div><div class="line">                    </div><div class="line">                    while(reader.ready())&#123;</div><div class="line">                        sb.append((char)reader.read());</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                return sb.toString();   </div><div class="line">           &#125;        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        //功能3: 获得路径，创建目录</div><div class="line">        public void createFile(String path)&#123;</div><div class="line">            File d=new File(path);</div><div class="line">            d.mkdir();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //功能4: 创建文件,写入内容</div><div class="line">        public void cFile(String path,String fileName,String encoding,String content) throws IOException&#123; //参数：路径,文件名.格式,编码格式,文件内容</div><div class="line">            File f=new File(path+&quot;/&quot;+fileName);</div><div class="line">            FileOutputStream fop= new FileOutputStream(f);</div><div class="line">            OutputStreamWriter writer=new OutputStreamWriter(fop,&quot;UTF-8&quot;);</div><div class="line">            </div><div class="line">            writer.append(content);</div><div class="line">            </div><div class="line">            writer.close();</div><div class="line">            fop.close();</div><div class="line">            System.out.println( &quot;********************************************&quot;+fileName+&quot;*****创建完毕&quot;);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //功能5: 创建入库目录</div><div class="line">        public void cList(String path,String numberArea,String username) throws Exception&#123; //参数：路径,编号A-编号B，程序猿姓名</div><div class="line">            </div><div class="line">                //一.创建对象  1.连接数据库  2.改变文件</div><div class="line">                UseDB udb =new UseDB();</div><div class="line">                udb.connDatabase();</div><div class="line">                udb.useDatabase(&quot;batchcreate_file&quot;);//使用batchcreate_file数据库</div><div class="line">                ChangeFile cf=new ChangeFile(udb);</div><div class="line">            </div><div class="line">                //二.创建父目录</div><div class="line">                String dir=path+&quot;/入库&quot;;</div><div class="line">                createFile(dir);</div><div class="line">                </div><div class="line">                //三.获得编号,储存起始编号，终止编号</div><div class="line"></div><div class="line">                String [] num=numberArea.split(&quot;-&quot;);</div><div class="line">                int first=Integer.parseInt(num[0]);//开始编号</div><div class="line">                int last=Integer.parseInt(num[1]);//终止编号</div><div class="line">                </div><div class="line">                </div><div class="line">                //四.查询webapi表里num字段所有记录，将其保存在数组里 </div><div class="line">                String allNum=udb.selectNum(&quot;webapi&quot;,&quot;num&quot;);</div><div class="line">                String [] allNumA=allNum.split(&quot;&amp;&quot;);</div><div class="line">               </div><div class="line">                //五.计算webapi中num个数(包括带-的)</div><div class="line">                int sum=0;</div><div class="line">                String allNumber=udb.selectNum(&quot;webapi&quot;,&quot;num&quot;);</div><div class="line">                String [] allNumber_Arrays=allNumber.split(&quot;&amp;&quot;);</div><div class="line">                for(int i=0;i&lt;allNumber_Arrays.length;i++)&#123;</div><div class="line">                    if(i&gt;1)&#123;</div><div class="line">                        if(!allNumber_Arrays[i].substring(0,5).equals(allNumber_Arrays[i-1].substring(0,5)))//判断是否有带-的编号</div><div class="line">                            sum++;</div><div class="line">                        else</div><div class="line">                            continue;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                //六.生成1级子目录      规格:&quot;入库(n个)&quot;</div><div class="line">                    String [] str=&#123;&quot;入库&quot;&#125;;</div><div class="line">                    String sonFile=null;//1级子目录</div><div class="line">                    String sonFile2=null;//2级子目录</div><div class="line">                    String ifNum=null;//2级目录判定编号</div><div class="line">                    </div><div class="line">                    for(int i=0;i&lt;str.length;i++)&#123;   </div><div class="line">                        sonFile=dir+&quot;/&quot;+str[i]+&quot;(&quot;+sum+&quot;)&quot;;//路径</div><div class="line">                        this.createFile(sonFile);  //循环创建1级子目录(例子:入库(828))</div><div class="line">                        </div><div class="line">                        //进入含有&quot;入库&quot;字样的二级字目录</div><div class="line">                        if(str[i].indexOf(&quot;入库&quot;)!=-1)&#123;</div><div class="line">                            //生成入库编号</div><div class="line">                            for(int j=first;j&lt;=last;j++)&#123; //循环次数：终止编号-起始编号</div><div class="line">                                for(int k=0;k&lt;allNumA.length;k++)&#123; //循环次数：数据库webapi表里num记录的数量</div><div class="line">                                    </div><div class="line">                                    ifNum=allNumA[k].substring(1,5);</div><div class="line">                                    if(ifNum.equals(j+&quot;&quot;))&#123;   //对比输入编号和Excel表里的编号</div><div class="line">                                        </div><div class="line">                                        sonFile2=sonFile+&quot;/入库-0&quot;+j; </div><div class="line">                                        createFile(sonFile2); //创建2级子目录</div><div class="line">                                        </div><div class="line">                                        String provinceFirstLetter =udb.select(&quot;webapi&quot;,&quot;area&quot;,&quot;num=0&quot;+j) ;//省份</div><div class="line">                                        GetFirstLetter gfl = new GetFirstLetter();</div><div class="line">                                        String areaName=gfl.getFirstLetter(provinceFirstLetter).toUpperCase();//获取中文拼音的字母缩写，再转换为大写</div><div class="line">                                        if(k==0)</div><div class="line">                                            cf.createBackupTask(sonFile2+&quot;/&quot;, areaName,allNumA[k],allNumA[0]);//创建BackupTask.java</div><div class="line">                                        else</div><div class="line">                                            cf.createBackupTask(sonFile2+&quot;/&quot;, areaName,allNumA[k],allNumA[k-1]);//创建BackupTask.java,传入路径，编号，当前编号，上一个编号</div><div class="line">                                        </div><div class="line">                                        sonFile2=sonFile2+&quot;/imp&quot;;</div><div class="line">                                        createFile(sonFile2);//创建3级子目录              </div><div class="line">                                        cf.combineCreateRukuCoding(sonFile2+&quot;/&quot;, areaName,allNumA[k],username);//生成相应编号入库代码</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line"></div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                </div><div class="line">               System.out.println(&quot;***************&quot;+numberArea+&quot;的入库代码目录生成完毕******************************&quot;);</div><div class="line">               udb.closeAll();//关闭资源</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>3.ChangeFile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div></pre></td><td class="code"><pre><div class="line">package Utils;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line"></div><div class="line">public class ChangeFile &#123;</div><div class="line">    </div><div class="line">    private String zhaobYgService=&quot;zhaobYgService&quot;;     //招标预告</div><div class="line">    private String zhaobGgService=&quot;zhaobGgService&quot;;     //招标公告</div><div class="line">    private String zisJgService=&quot;zisJgService&quot;;         //咨审结果</div><div class="line">    private String zhaobWjService=&quot;zhaobWjService&quot;;     //招标文件</div><div class="line">    private String gonggBgService=&quot;gonggBgService&quot;;     //公告变更</div><div class="line">    private String zhaobDyService=&quot;zhaobDyService&quot;;     //招标答疑</div><div class="line">    private String zhongbXxService=&quot;zhongbXxService&quot;;   //中标信息</div><div class="line">    private String kongZjService=&quot;kongZjService&quot;;       //控制价</div><div class="line">    </div><div class="line">    private String model;   //BackupTask模版语句</div><div class="line"></div><div class="line">    </div><div class="line">    private UseDB udb;</div><div class="line">    private IOFile iof;</div><div class="line">    </div><div class="line">    //getter和Setter方法</div><div class="line">    public String getModel()&#123;</div><div class="line">        return model;</div><div class="line">    &#125;</div><div class="line">    public void setModel(String model)&#123;</div><div class="line">        this.model=model;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    //无参构造方法</div><div class="line">    public ChangeFile(UseDB u) throws Exception&#123;  //用于给模版语句赋值</div><div class="line">        String model=&quot;NameA=(NameB) ac.getBean(\&quot;fileName\&quot;);&quot;;</div><div class="line">        String model2=&quot;NameA.initNameB();&quot;;</div><div class="line">        this.setModel(&quot;\n\t\t&quot;+model+&quot;\n\t\t&quot;+model2+&quot;\n\t\t&quot;);//换行和空格Tab</div><div class="line">        </div><div class="line">        udb=u;</div><div class="line">        iof=new IOFile();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //工具1:将首字母变为大写</div><div class="line">    public String UpFirstString(String content)&#123; //参数: 内容</div><div class="line">        String firstLetter=content.substring(0,1);</div><div class="line">        //替换首字母</div><div class="line">        content=content.replaceFirst(firstLetter,firstLetter.toUpperCase());</div><div class="line">        return content;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //工具1-2:将首字母变为小写</div><div class="line">    public String LowFirstString(String content)&#123; //参数: 内容</div><div class="line">        String firstLetter=content.substring(0,1);</div><div class="line">        //替换首字母</div><div class="line">        content=content.replaceFirst(firstLetter,firstLetter.toLowerCase());</div><div class="line">        return content;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //工具2:自动生成文件名    </div><div class="line">    public String cFileName(String province,String num,String attributeName)&#123;//参数:省份拼音缩写(大写),编号,相应的属性名</div><div class="line">        StringBuilder sb= new StringBuilder();</div><div class="line">        </div><div class="line">        province =province.substring(0,2);//例如东北，为DB,防止出现DBDB之类的重复</div><div class="line">        </div><div class="line">        num=num.replace(&quot;-&quot;,&quot;_&quot;);</div><div class="line">        sb.append(province+&quot;_&quot;+num+&quot;_&quot;+attributeName);//拼接文件名</div><div class="line">        </div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //工具3:根据BackupTask模版语句,生成相应字符串</div><div class="line">    public String cModelString(String province,String num,String attributeName)&#123;//参数: 省份,编号,相应的属性名</div><div class="line">        StringBuilder sb=new StringBuilder();</div><div class="line">        </div><div class="line">        </div><div class="line">        String fileName=cFileName(province,num,this.UpFirstString(attributeName)); //调用工具2,生成文件名</div><div class="line">        String cStr=getModel();</div><div class="line">        cStr=cStr.replace(&quot;NameA&quot;,attributeName).replace(&quot;NameB&quot;,UpFirstString(attributeName)).replace(&quot;fileName&quot;,fileName);</div><div class="line">        </div><div class="line">        sb.append(cStr);</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //工具4:生成内容注解</div><div class="line">    public String cContentNode(String infSource,String modelName,String num)&#123;</div><div class="line">        StringBuilder sb= new StringBuilder();</div><div class="line">        </div><div class="line">        //根据模版名字判断类型</div><div class="line">        String type=&quot;&quot;;</div><div class="line">        </div><div class="line">        if(modelName.equals(&quot;zbyg&quot;))&#123;</div><div class="line">            type=&quot;招标预告&quot;;</div><div class="line">        &#125;else if(modelName.equals(&quot;zbgg&quot;))&#123;</div><div class="line">            type=&quot;招标公告&quot;;</div><div class="line">        &#125;else if(modelName.equals(&quot;zsjg&quot;))&#123;</div><div class="line">            type=&quot;咨审结果&quot;;</div><div class="line">        &#125;else if(modelName.equals(&quot;ggbg&quot;))&#123;</div><div class="line">            type=&quot;公告变更&quot;;</div><div class="line">        &#125;else if(modelName.equals(&quot;zbwj&quot;))&#123;</div><div class="line">            type=&quot;招标文件&quot;;</div><div class="line">        &#125;else if(modelName.equals(&quot;zbdy&quot;))&#123;</div><div class="line">            type=&quot;招标答疑&quot;;</div><div class="line">        &#125;else if(modelName.equals(&quot;zbxx&quot;))&#123;</div><div class="line">            type=&quot;中标信息&quot;;</div><div class="line">        &#125;else if(modelName.equals(&quot;kzj&quot;))&#123;</div><div class="line">            type=&quot;招标控制价&quot;;</div><div class="line">        &#125;   </div><div class="line">        </div><div class="line">        sb.append(&quot;东软一期-&quot;+infSource+&quot;-&quot;+type+&quot;-&quot;+num);</div><div class="line">        </div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //工具5: 判断一个编号有需要创建哪些入库代码，循环调用createRukuCoding方法进行</div><div class="line">    public void combineCreateRukuCoding(String path,String province,String num,String username)&#123;//路径,省份拼音首字母(大写),编号，程旭猿</div><div class="line">        </div><div class="line">        </div><div class="line">        //查询数据库，确认类型</div><div class="line">        String type=&quot;&quot;;</div><div class="line">        Boolean ifUseFilter = true; //是否在入库代码使用title自动判断，默认是true</div><div class="line">        String ifURL=udb.checktable(num);</div><div class="line">        </div><div class="line">        </div><div class="line">        //判断对应编号的备注是否是 &quot;含招标、中标&quot;,这种则需要招标，答疑，变更，中标都需要生成</div><div class="line">        String sRemark=udb.select(&quot;webapi&quot;,&quot;remark&quot;, &quot;num=&apos;&quot;+num+&quot;&apos;&quot;);</div><div class="line">        if(sRemark.indexOf(&quot;含招标&quot;) !=-1)&#123;</div><div class="line">            ifURL+=&quot;zbdy&amp;ggbg&amp;zbxx&quot;;</div><div class="line">        &#125;else&#123;</div><div class="line">            ifUseFilter =false;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        String [] ifURL_Arrays=ifURL.split(&quot;&amp;&quot;);</div><div class="line">        for(int i=0;i&lt;ifURL_Arrays.length;i++)&#123;</div><div class="line">            createRukuCoding(path,province,num,ifURL_Arrays[i],username,ifUseFilter);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //功能1:创建BackupTask.java                                                        (上一个编号，用来处理-)</div><div class="line">    public void createBackupTask (String path,String province,String num,String ageNum)&#123;//参数: 路径,省份拼音缩写,编号,上一个编号</div><div class="line"></div><div class="line">        //一.检查数据库webapi表,对应num(编号)的整条记录，招标预告-招标公告哪个字段有URL</div><div class="line">        String ifURL=udb.checktable(num); //返回有URL的字段名</div><div class="line">        </div><div class="line">        //判断对应编号的备注是否是 &quot;含招标、中标&quot;,这种则需要招标，答疑，变更，中标都需要生成</div><div class="line">        String sRemark=udb.select(&quot;webapi&quot;,&quot;remark&quot;, &quot;num=&apos;&quot;+num+&quot;&apos;&quot;);</div><div class="line">        if(sRemark.indexOf(&quot;含招标&quot;) !=-1)&#123;</div><div class="line">            ifURL+=&quot;zbdy&amp;ggbg&amp;zbxx&quot;;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        String [] ownURLArrays=ifURL.split(&quot;&amp;&quot;);</div><div class="line">        </div><div class="line">    </div><div class="line">        //二.生成相应内容</div><div class="line">        String content=&quot;&quot;; //储存总体字符串</div><div class="line">        String str=&quot;&quot;;     //中转字符串</div><div class="line">        if(ownURLArrays.length==0)&#123;</div><div class="line">            System.out.println(&quot;这个编号为空，不存在url，跳过&quot;);</div><div class="line">        &#125;else&#123;</div><div class="line">            for(int i=0;i&lt;ownURLArrays.length;i++)  //webapi表格里有url的字段</div><div class="line">            &#123;</div><div class="line">                </div><div class="line">                if(ownURLArrays[i].equals(&quot;zbyg&quot;))&#123;</div><div class="line">                    str=cModelString(province,num,zhaobYgService); //调用工具三,生成模版语句</div><div class="line">                &#125;else if(ownURLArrays[i].equals(&quot;zbgg&quot;))&#123;</div><div class="line">                    str=cModelString(province,num,zhaobGgService);</div><div class="line">                &#125;else if(ownURLArrays[i].equals(&quot;zsjg&quot;))&#123;</div><div class="line">                    str=cModelString(province,num,zisJgService);</div><div class="line">                &#125;else if(ownURLArrays[i].equals(&quot;ggbg&quot;))&#123;</div><div class="line">                    str=cModelString(province,num,gonggBgService);</div><div class="line">                &#125;else if(ownURLArrays[i].equals(&quot;zbwj&quot;))&#123;</div><div class="line">                    str=cModelString(province,num,zhaobWjService);</div><div class="line">                &#125;else if(ownURLArrays[i].equals(&quot;zbdy&quot;))&#123;</div><div class="line">                    str=cModelString(province,num,zhaobDyService);</div><div class="line">                &#125;else if(ownURLArrays[i].equals(&quot;zbxx&quot;))&#123;</div><div class="line">                    str=cModelString(province,num,zhongbXxService);</div><div class="line">                &#125;else if(ownURLArrays[i].equals(&quot;kzj&quot;))&#123;</div><div class="line">                    str=cModelString(province,num,kongZjService);</div><div class="line">                &#125;</div><div class="line">                                </div><div class="line">                content+=str;</div><div class="line">            &#125;</div><div class="line">            content+=&quot;//ok;&quot;;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">        //三.判断当前编号是否和上一个编号相同</div><div class="line">        boolean sign=false;//设立标示</div><div class="line">        if(num.equals(ageNum) || !num.substring(0,5).equals(ageNum.substring(0,5)))&#123;</div><div class="line">            sign=true;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //四.根据数据库表article表中模版，生成相应编号的文件</div><div class="line">        try&#123;</div><div class="line">            String dbModelBackupTask=udb.select(&quot;article&quot;,&quot;detail&quot;,&quot;model=&apos;BackupTask&apos;&quot;); //储存数据库article表中,BackupTask模版</div><div class="line">        </div><div class="line">            if(sign)&#123;</div><div class="line">                //与上一个编号完全不同(号码不同,且不带-)</div><div class="line">                dbModelBackupTask=dbModelBackupTask.replace(&quot;//changeModel;&quot;,content);</div><div class="line">                iof.cFile(path,&quot;BackupTask.java&quot;,&quot;UTF-8&quot;,dbModelBackupTask);//路径,文件名,编码格式,内容</div><div class="line">            </div><div class="line">            &#125;else&#123;</div><div class="line">                //带-的编号,在上一个文件基础上进行叠加</div><div class="line">                String ageContent=iof.readFileContent(path+&quot;/BackupTask.java&quot;,&quot;UTF-8&quot;);//前一个编号的内容       </div><div class="line">                String changeContent=ageContent.replace(&quot;//ok;&quot;,content);</div><div class="line">                iof.cFile(path,&quot;BackupTask.java&quot;,&quot;UTF-8&quot;,changeContent);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    //功能1:创建相应编号,类型的入库代码</div><div class="line">    public void createRukuCoding(String path,String province,String num,String type,String username,Boolean ifUseFilter)&#123;//参数: 路径,省份拼音首字母缩写,编号,类型,程序猿,是否使用自动判断</div><div class="line">        </div><div class="line">                //一.生成文件名</div><div class="line">                String fileName=&quot;&quot;; //注解名</div><div class="line">                String typeSpell=&quot;&quot;;</div><div class="line">                String typeService=&quot;&quot;;</div><div class="line">                String typeChinese=&quot;&quot;;//类型中文名</div><div class="line">                String tableName=&quot;&quot;;//入库表名</div><div class="line">                int tNumber =5; //自动识别判定条件</div><div class="line">                </div><div class="line">                    for(int i=0;i&lt;8;i++)  //共8种类型</div><div class="line">                    &#123;               </div><div class="line">                        if(type.equals(&quot;zbyg&quot;))&#123;</div><div class="line">                            fileName=cFileName(province,num,&quot;ZhaobYgService&quot;);</div><div class="line">                            typeSpell=&quot;zhaoBiaoYuGao&quot;;</div><div class="line">                            typeService=&quot;zhaobYgService&quot;;</div><div class="line">                            typeChinese=&quot;招标预告&quot;;</div><div class="line">                            tableName=&quot;t_zhao_biao_yu_gao&quot;;</div><div class="line">                        &#125;else if(type.equals(&quot;zbgg&quot;))&#123;</div><div class="line">                            fileName=cFileName(province,num,&quot;ZhaobGgService&quot;);</div><div class="line">                            typeSpell=&quot;zhaoBiaoGongGao&quot;;</div><div class="line">                            typeService=&quot;zhaobGgService&quot;;</div><div class="line">                            typeChinese=&quot;招标公告&quot;;</div><div class="line">                            tableName=&quot;t_zhao_biao_gong_gao&quot;;</div><div class="line">                            tNumber=1;</div><div class="line">                        &#125;else if(type.equals(&quot;zsjg&quot;))&#123;</div><div class="line">                            fileName=cFileName(province,num,&quot;ZisJgService&quot;);</div><div class="line">                            typeSpell=&quot;ziShenJieGuo&quot;;</div><div class="line">                            typeService=&quot;zisJgService&quot;;</div><div class="line">                            typeChinese=&quot;咨审结果&quot;;</div><div class="line">                            tableName=&quot;t_zi_shen_jie_guo&quot;;</div><div class="line">                        &#125;else if(type.equals(&quot;ggbg&quot;))&#123;</div><div class="line">                            fileName=cFileName(province,num,&quot;GonggBgService&quot;);</div><div class="line">                            typeSpell=&quot;gongGaoBianGeng&quot;;</div><div class="line">                            typeService=&quot;gonggBgService&quot;;</div><div class="line">                            typeChinese=&quot;公告变更&quot;;</div><div class="line">                            tableName=&quot;t_gong_gao_bian_geng&quot;;</div><div class="line">                            tNumber=3;</div><div class="line">                        &#125;else if(type.equals(&quot;zbwj&quot;))&#123;</div><div class="line">                            fileName=cFileName(province,num,&quot;ZhaobWjService&quot;);</div><div class="line">                            typeSpell=&quot;zhaoBiaoWenJian&quot;;</div><div class="line">                            typeService=&quot;zhaobWjService&quot;;</div><div class="line">                            typeChinese=&quot;招标文件&quot;;</div><div class="line">                            tableName=&quot;t_zhao_biao_wen_jian&quot;;</div><div class="line">                        &#125;else if(type.equals(&quot;zbdy&quot;))&#123;</div><div class="line">                            fileName=cFileName(province,num,&quot;ZhaobDyService&quot;);</div><div class="line">                            typeSpell=&quot;ZhaoBiaoDaYi&quot;;</div><div class="line">                            typeService=&quot;zhaobDyService&quot;;</div><div class="line">                            typeChinese=&quot;招标答疑&quot;;</div><div class="line">                            tableName=&quot;t_zhao_biao_da_yi&quot;;</div><div class="line">                            tNumber=4;</div><div class="line">                        &#125;else if(type.equals(&quot;zbxx&quot;))&#123;</div><div class="line">                            fileName=cFileName(province,num,&quot;ZhongbXxService&quot;);</div><div class="line">                            typeSpell=&quot;zhongBiaoXinXi&quot;;</div><div class="line">                            typeService=&quot;zhongbXxService&quot;;</div><div class="line">                            typeChinese=&quot;中标信息&quot;;</div><div class="line">                            tableName=&quot;t_zhong_biao_xin_xi&quot;;</div><div class="line">                            tNumber=2;</div><div class="line">                        &#125;else if(type.equals(&quot;kzj&quot;))&#123;</div><div class="line">                            fileName=cFileName(province,num,&quot;KongZjService&quot;);</div><div class="line">                            typeSpell=&quot;kongZhiJia&quot;;</div><div class="line">                            typeService=&quot;kongZjService&quot;;</div><div class="line">                            typeChinese=&quot;控制价&quot;;</div><div class="line">                            tableName=&quot;t_kong_zhi_jia&quot;;</div><div class="line">                        &#125;               </div><div class="line">                 &#125;</div><div class="line">                    </div><div class="line">                </div><div class="line">                //首字母变为大写</div><div class="line">                String typeSpellUp=UpFirstString(typeSpell);</div><div class="line">                String typeServiceUp=UpFirstString(typeService);</div><div class="line">                    </div><div class="line">                //二.查询数据库模版</div><div class="line">                String modelName=fileName.substring(fileName.lastIndexOf(&quot;_&quot;)+1);</div><div class="line">                String modelContent=udb.select(&quot;article&quot;,&quot;detail&quot;,&quot;model=&apos;ZhaobGgServiceModel&apos;&quot;);</div><div class="line">                </div><div class="line">                //三.查询数据库num编号的整行记录,所需要要的信息</div><div class="line">                String information_num=udb.selectNeedInformation_num(num);</div><div class="line">                String [] information_Arrays=information_num.split(&quot;&amp;&quot;);</div><div class="line">                </div><div class="line">                String area=information_Arrays[0];                                          //区域</div><div class="line">                String provinceDB=information_Arrays[1].replace(&quot;省&quot;,&quot;&quot;);                    //省份(不要省字)</div><div class="line">                String city=information_Arrays[2].replace(&quot;市&quot;,&quot;&quot;);                          //城市(不要市字)</div><div class="line">                String county=information_Arrays[3].replace(&quot;区&quot;,&quot;&quot;).replace(&quot;县&quot;,&quot;&quot;).replace(&quot;市&quot;,&quot;&quot;);        //区县(不要区,县字)</div><div class="line">                String webname=information_Arrays[4];                                       //网站名称</div><div class="line">                String infsource=information_Arrays[5];                                     //信息来源</div><div class="line">                </div><div class="line">                </div><div class="line">                //四.修改模版</div><div class="line">                String rukuContent=modelContent.replace(&quot;zhaoBiaoGongGao&quot;,typeSpell).replace(&quot;ZhaoBiaoGongGao&quot;,typeSpellUp).replace(&quot;ZhaobGgService&quot;,typeServiceUp).replace(&quot;zhaobGgService&quot;,typeService).replace(&quot;zbgg&quot;,type);</div><div class="line">                //程序猿;</div><div class="line">                rukuContent=rukuContent.replaceFirst(&quot;//程序猿;&quot;,username);</div><div class="line">                //注解内容</div><div class="line">                rukuContent=rukuContent.replaceFirst(&quot;//注解内容;&quot;,area+&quot;_&quot;+information_Arrays[1]+&quot;_&quot;+information_Arrays[2]+&quot;_&quot;+information_Arrays[3]+&quot;_&quot;+typeChinese+&quot;_&quot;+num);</div><div class="line">                </div><div class="line">                rukuContent=rukuContent.replaceFirst(&quot;//注解;&quot;,fileName).replaceFirst(&quot;//类名;&quot;,fileName);</div><div class="line">                 </div><div class="line">                rukuContent=rukuContent.replaceFirst(&quot;//编号;&quot;,num);</div><div class="line">                </div><div class="line">                //是否使用自动判断</div><div class="line">                if(ifUseFilter)&#123;</div><div class="line">                rukuContent=rukuContent.replaceFirst(&quot;//使用自动工具类;&quot;,&quot;int t = Utils.judge(listvo.getTitle());&quot;)</div><div class="line">                        .replaceFirst(&quot;//判断1;&quot;,&quot;if(t != //生成编号;)&#123;&quot;).replaceFirst(&quot;//判断2;&quot;,&quot;continue;&quot;).replaceFirst(&quot;//判断3;&quot;, &quot;&#125;&quot;);</div><div class="line">                rukuContent=rukuContent.replaceFirst(&quot;//生成编号;&quot;,tNumber+&quot;&quot;);</div><div class="line">                &#125;else&#123;</div><div class="line">                    rukuContent=rukuContent.replaceFirst(&quot;//使用自动工具类;&quot;,&quot;&quot;)</div><div class="line">                            .replaceFirst(&quot;//判断1;&quot;,&quot;&quot;).replaceFirst(&quot;//判断2;&quot;,&quot;&quot;).replaceFirst(&quot;//判断3;&quot;, &quot;&quot;);</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                </div><div class="line">                </div><div class="line">                rukuContent=rukuContent.replaceFirst(&quot;//area;&quot;,area);</div><div class="line">                rukuContent=rukuContent.replaceFirst(&quot;//provinceDB;&quot;,provinceDB);</div><div class="line">                rukuContent=rukuContent.replaceFirst(&quot;//city;&quot;,city);</div><div class="line">                rukuContent=rukuContent.replaceFirst(&quot;//county;&quot;,county);</div><div class="line">                rukuContent=rukuContent.replaceFirst(&quot;//webname;&quot;,webname);</div><div class="line">                rukuContent=rukuContent.replaceFirst(&quot;//infsource;&quot;,infsource);</div><div class="line">                rukuContent=rukuContent.replace(&quot;//表名;&quot;,tableName);</div><div class="line">                </div><div class="line">                try&#123;</div><div class="line">                    //创建文件</div><div class="line">                    iof.cFile(path,fileName+&quot;.java&quot;,&quot;UTF-8&quot;,rukuContent);//路径,文件名,编码格式,内容</div><div class="line">                &#125;catch(IOException e)&#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>4.GetFirstLetter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">package Utils;</div><div class="line"></div><div class="line">public class GetFirstLetter &#123;</div><div class="line">    private static int BEGIN = 45217;</div><div class="line">    private static int END = 63486;</div><div class="line">    </div><div class="line">    //按照声母表示，这个表是在GB2312中的出现的第一个汉字，也就是说“啊”是代表首字母a的第一个汉字</div><div class="line">    // 二十六个字母区间对应二十七个端点    // GB2312码汉字区间十进制表示</div><div class="line">    private static char[] chartable = &#123;&apos;啊&apos;, &apos;芭&apos;, &apos;擦&apos;, &apos;搭&apos;, &apos;蛾&apos;, &apos;发&apos;, &apos;噶&apos;, &apos;哈&apos;,        &apos;哈&apos;, &apos;击&apos;, &apos;喀&apos;, &apos;垃&apos;, &apos;妈&apos;, &apos;拿&apos;, &apos;哦&apos;, &apos;啪&apos;, &apos;期&apos;, &apos;然&apos;, &apos;撒&apos;, &apos;塌&apos;, &apos;塌&apos;,        &apos;塌&apos;, &apos;挖&apos;, &apos;昔&apos;, &apos;压&apos;, &apos;匝&apos;,&#125;; </div><div class="line">    private static int [] table = new int[27]; // 对应首字母区间表</div><div class="line"></div><div class="line">    // 对应首字母区间表</div><div class="line">    private static char[] initialtable = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;,        &apos;h&apos;, &apos;h&apos;, &apos;j&apos;, &apos;k&apos;, &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;, &apos;r&apos;, &apos;s&apos;, &apos;t&apos;,        &apos;t&apos;, &apos;t&apos;, &apos;w&apos;, &apos;x&apos;, &apos;y&apos;, &apos;z&apos;,&#125;;</div><div class="line">    </div><div class="line">    //1.初始化</div><div class="line">     static &#123;        </div><div class="line">         for (int i = 0; i &lt; 26; i++) &#123;            </div><div class="line">             table[i] = gbValue(chartable[i]);// 得到GB2312码的首字母区间端点表，十进制。 </div><div class="line">         &#125;</div><div class="line">         table[26] = END;// 区间表结尾</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     /* 根据一个包含汉字的字符串返回一个汉字拼音首字母的字符串 最重要的一个方法，思路如下：一个个字符读入、判断、输出     */</div><div class="line">     public static String getFirstLetter(String sourceStr) &#123;        </div><div class="line">            String result = &quot;&quot;;        </div><div class="line">            String str = sourceStr.toLowerCase();       </div><div class="line">            int StrLength = str.length();        </div><div class="line">            int i;       </div><div class="line">            try &#123;            </div><div class="line">                for (i = 0; i &lt; StrLength; i++) &#123;                </div><div class="line">                    result += Char2Initial(str.charAt(i));            </div><div class="line">                    &#125;        </div><div class="line">                &#125; catch (Exception e) &#123;            </div><div class="line">                    result = &quot;&quot;;        </div><div class="line">                    &#125;        </div><div class="line">            return result;   </div><div class="line">        &#125;</div><div class="line">     </div><div class="line">      /* 输入字符,得到他的声母,英文字母返回对应的大写字母,其他非简体汉字返回 &apos;0&apos;     */  </div><div class="line">     private static char Char2Initial(char ch) &#123;    </div><div class="line">                // 对英文字母的处理：小写字母转换为大写，大写的直接返回</div><div class="line">              if (ch &gt;= &apos;a&apos; &amp;&amp; ch &lt;= &apos;z&apos;) &#123;            </div><div class="line">                  return ch;        </div><div class="line">               &#125;        </div><div class="line">              if (ch &gt;= &apos;A&apos; &amp;&amp; ch &lt;= &apos;Z&apos;) &#123;</div><div class="line">                  return ch;  </div><div class="line">                &#125;</div><div class="line">         </div><div class="line">              // 对非英文字母的处理：转化为首字母，然后判断是否在码表范围内，        // 若不是，则直接返回。        // 若是，则在码表内的进行判断。   </div><div class="line">              int gb = gbValue(ch);// 汉字转换首字母</div><div class="line">              if ((gb &lt; BEGIN) || (gb &gt; END))&#123;            </div><div class="line">                  return ch;        </div><div class="line">                 &#125;</div><div class="line">    </div><div class="line">              int i;       </div><div class="line">              for (i = 0; i &lt; 26; i++) &#123; // 判断匹配码表区间，匹配到就break,判断区间形如“[,)”</div><div class="line">                  if ((gb &gt;= table[i]) &amp;&amp; (gb &lt; table[i + 1])) &#123;</div><div class="line">                      break;            </div><div class="line">                      &#125;        </div><div class="line">              &#125;</div><div class="line">              if (gb == END) &#123; //补上GB2312区间最右端    </div><div class="line">                     i = 25;        </div><div class="line">                &#125;      </div><div class="line">            return initialtable[i]; // 在码表区间中，返回首字母    &#125;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">     </div><div class="line">     /* 取出汉字的编码 cn 汉字     */  </div><div class="line">    private static int gbValue(char ch) &#123;</div><div class="line">        String str = new String();        </div><div class="line">        str += ch;       </div><div class="line">        try &#123;           </div><div class="line">            byte[] bytes = str.getBytes(&quot;GB2312&quot;);            </div><div class="line">            if (bytes.length &lt; 2) &#123;               </div><div class="line">                    return 0;           </div><div class="line">            &#125;            </div><div class="line">            return (bytes[0] &lt;&lt; 8 &amp; 0xff00) + (bytes[1] &amp; 0xff);      </div><div class="line">        &#125; catch (Exception e) &#123;          </div><div class="line">            return 0;        </div><div class="line">            &#125;    </div><div class="line">    &#125;   </div><div class="line">    </div><div class="line">//  public static void main(String [] args)&#123;</div><div class="line">//      //在main方法中调用FirstLetterUtil类的getFirstLetter()方法，获取姓名的首字母。如：“刘德华”获取首字母是“ldh”。</div><div class="line">//       System.out.print(getFirstLetter(&quot;日你仙人掌&quot;));//获取文字首字母的拼音</div><div class="line">//  &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="三-BackupTask-java和ZhaobGgServiceModel-java模版"><a href="#三-BackupTask-java和ZhaobGgServiceModel-java模版" class="headerlink" title="三.BackupTask.java和ZhaobGgServiceModel.java模版"></a>三.BackupTask.java和ZhaobGgServiceModel.java模版</h2><p>BackupTask<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">package com.bonait.dataextract.scheduler;</div><div class="line"></div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">import org.quartz.JobExecutionContext;</div><div class="line">import org.quartz.JobExecutionException;</div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line">import org.springframework.scheduling.quartz.QuartzJobBean;</div><div class="line"></div><div class="line">import com.bonait.dataextract.service.GonggBgService;</div><div class="line">import com.bonait.dataextract.service.KongZjService;</div><div class="line">import com.bonait.dataextract.service.ZhaobDyService;</div><div class="line">import com.bonait.dataextract.service.ZhaobGgService;</div><div class="line">import com.bonait.dataextract.service.ZhaobWjService;</div><div class="line">import com.bonait.dataextract.service.ZhaobYgService;</div><div class="line">import com.bonait.dataextract.service.ZhongbXxService;</div><div class="line">import com.bonait.dataextract.service.ZisJgService;</div><div class="line"></div><div class="line">public class BackupTask extends QuartzJobBean &#123;</div><div class="line"></div><div class="line">    private static ZhaobGgService zhaobGgService;</div><div class="line">    private static ZhongbXxService zhongbXxService;</div><div class="line">    private static ZhaobWjService zhaobWjService;</div><div class="line">    private static ZhaobDyService zhaobDyService;</div><div class="line">    private static ZisJgService zisJgService;</div><div class="line">    private static GonggBgService gonggBgService;</div><div class="line">    private static KongZjService kongZjService;</div><div class="line">    private static ZhaobYgService zhaobYgService;</div><div class="line">    </div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void executeInternal(JobExecutionContext arg0)</div><div class="line">            throws JobExecutionException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;    </div><div class="line">        System.out.println(&quot;bxkc_Test start time is&quot;+new Date());</div><div class="line"></div><div class="line">        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</div><div class="line">        </div><div class="line">        //changeModel;</div><div class="line">        </div><div class="line">        System.out.println(&quot;bxkc_Test end time is&quot;+new Date());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>ZhaobGgServiceModel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line">package com.bonait.dataextract.service.impl;</div><div class="line">import java.util.Date;</div><div class="line">import java.util.Iterator;</div><div class="line">import java.util.List;</div><div class="line">import java.util.UUID;</div><div class="line"></div><div class="line">import javax.annotation.Resource;</div><div class="line"></div><div class="line">import net.sf.json.JSONArray;</div><div class="line">import net.sf.json.JSONObject;</div><div class="line"></div><div class="line">import org.hibernate.Query;</div><div class="line">import org.hibernate.Session;</div><div class="line">import org.hibernate.SessionFactory;</div><div class="line">import org.springframework.stereotype.Service;</div><div class="line"></div><div class="line">import com.bonait.dataextract.domain.ZhaoBiaoGongGao;</div><div class="line">import com.bonait.dataextract.service.ZhaobGgService;</div><div class="line">import com.bonait.dataextract.util.Util;</div><div class="line">import com.bonait.dataextract.util.Utils;</div><div class="line">import com.bonait.dataextract.vo.ListVO;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * @程序猿：//程序猿;</div><div class="line"> * </div><div class="line"> * @内容：//注解内容;</div><div class="line"> */</div><div class="line">@Service(&quot;//注解;&quot;)</div><div class="line">public class //类名; implements ZhaobGgService&#123;</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    private SessionFactory sf ;</div><div class="line">    private Query query;</div><div class="line">    private ZhaoBiaoGongGao zbgg;</div><div class="line">    //列表页接口地址</div><div class="line">    private String listUrl=&quot;&quot;;</div><div class="line">    //内容页接口地址</div><div class="line">    private String detailUrl=&quot;&quot;;</div><div class="line">    //入库编码</div><div class="line">    private String sourceNo=&quot;//编号;&quot;;</div><div class="line">    @Override</div><div class="line">    public void initZhaobGgService() &#123;</div><div class="line">        Session session=sf.openSession();</div><div class="line">        session.beginTransaction();</div><div class="line">        try&#123;</div><div class="line">            //获取总页数</div><div class="line">              String s=Util.sendGet(listUrl,&quot;1&quot;);</div><div class="line">              JSONObject obj =JSONObject.fromObject(s);</div><div class="line">              int maxPage=Integer.parseInt(obj.get(&quot;pageCount&quot;).toString());</div><div class="line"></div><div class="line"></div><div class="line">        //清空数据库里</div><div class="line">//      query=session.createSQLQuery(&quot;DELETE FROM //表名; t where t.WEB_SOURCE_NO=&apos;&quot;+sourceNo+&quot;&apos;&quot;);</div><div class="line">//      query.executeUpdate();</div><div class="line">//      session.getTransaction().commit();</div><div class="line">//      session.beginTransaction();</div><div class="line"></div><div class="line">        int KK=0;</div><div class="line">            flag:</div><div class="line">            for(int i=1;i&lt;=maxPage;i++)&#123;//maxPage</div><div class="line">                String jsonList=Util.sendGet(listUrl,i+&quot;&quot;);</div><div class="line">                JSONObject objList =JSONObject.fromObject(jsonList);</div><div class="line">                </div><div class="line">                JSONArray temp=(JSONArray) objList.get(&quot;list&quot;);</div><div class="line">                List list = (List)JSONArray.toList(temp,ListVO.class);</div><div class="line">                Iterator it = list.iterator();</div><div class="line">                </div><div class="line">                while(it.hasNext())&#123;</div><div class="line">                    ListVO listvo = (ListVO) it.next();</div><div class="line">                    //使用自动工具类;</div><div class="line">                    </div><div class="line">                    //判断1;</div><div class="line">                        //判断2;</div><div class="line">                    //判断3;</div><div class="line">                    </div><div class="line">                    query=session.createSQLQuery(&quot;SELECT ID FROM //表名; t where t.WEB_SOURCE_NO=&apos;&quot;+sourceNo+&quot;&apos; and t.RECORD_ID=&apos;&quot;+listvo.getId()+&quot;&apos;&quot;);</div><div class="line">                    String getDate=listvo.getDate();</div><div class="line">                    //获取页数，便于插入数据异常时，先跳过该页</div><div class="line">//                  System.out.println(i+&quot;:&quot;+getDate+&quot;:&quot;+maxPage);</div><div class="line">                    </div><div class="line">                    int date = Integer.parseInt(getDate.substring(0, 4));</div><div class="line">                    //只取2014年至今的不重复数据   </div><div class="line">                    if(query.executeUpdate()&lt;=0&amp;&amp;date&gt;=2014)&#123;</div><div class="line">                        KK+=1;</div><div class="line">                        String detail=Util.sendGet(detailUrl,listvo.getId());</div><div class="line">//                      String detail=Util.sendGet(listvo.getUrl(),&quot;&quot;);</div><div class="line">                        JSONObject o=JSONObject.fromObject(detail);</div><div class="line">                         String content=o.get(&quot;content&quot;).toString();</div><div class="line">                         </div><div class="line">                        //过滤掉无效数据</div><div class="line">                        if(content==null||content.length()&lt;10||content.contains(&quot;出错&quot;)||content.contains(&quot;找不到文件&quot;))&#123;continue;&#125;</div><div class="line">                        zbgg=new ZhaoBiaoGongGao();</div><div class="line">                        zbgg.setWebSourceNo(sourceNo);</div><div class="line">                        zbgg.setArea(&quot;//area;&quot;);//区域</div><div class="line">                        zbgg.setProvince(&quot;//provinceDB;&quot;);//省份</div><div class="line">                        zbgg.setCity(&quot;//city;&quot;);//城市，没有可不填</div><div class="line">                        zbgg.setDistrict(&quot;//county;&quot;);// 区县 不要“区”字符</div><div class="line">//                      zbgg.setCity(listvo.getCiy());</div><div class="line">                        zbgg.setWebSourceName(&quot;//webname;&quot;);//网站名称，写完整的名称</div><div class="line">                        zbgg.setInfoSource(&quot;//infsource;&quot;);//信息来源</div><div class="line">                        //未匹配到工程或服务的，都标识为货物</div><div class="line">                        String infoType=Util.getInfoType(content);</div><div class="line">                        if(infoType!=null&amp;&amp;infoType.length()&gt;0)</div><div class="line">                        zbgg.setInfoType(Util.getInfoType(content));</div><div class="line">                        else &#123;zbgg.setInfoType(&quot;货物&quot;);&#125;</div><div class="line">//                       zbgg.setInfoType(Util.getInfoType(content));//信息类型</div><div class="line">//                      zbgg.setIndustry(&quot;建筑建材&quot;); //行业分类</div><div class="line">                        zbgg.setIndustry(Util.getIndustry(content));//行业分类</div><div class="line">                        zbgg.setRecordId(listvo.getId());</div><div class="line">                        zbgg.setId(UUID.randomUUID().toString());</div><div class="line">                        zbgg.setPageTitle(listvo.getTitle());</div><div class="line">                        zbgg.setPageTime(getDate);</div><div class="line">                        zbgg.setPageContent(content);</div><div class="line">                        zbgg.setPageAttachments(&quot;&quot;);//附件url，暂不需要</div><div class="line">                        zbgg.setCreateTime(new Date());</div><div class="line">                        session.save(zbgg);</div><div class="line">                     &#125;else&#123;break flag;&#125;//到2013年的页码时，断掉循环</div><div class="line">                    if(KK%1==0)&#123;</div><div class="line">                        session.flush();  </div><div class="line">                        session.clear();</div><div class="line">                        session.getTransaction().commit();</div><div class="line">                        session.beginTransaction();</div><div class="line">                    &#125;</div><div class="line">                &#125;  </div><div class="line">            &#125;   </div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            System.out.println(sourceNo+&quot; is error, please cheak ZhaobGgService !!!!!!!&quot;);</div><div class="line">        &#125;</div><div class="line">        session.getTransaction().commit();</div><div class="line">        session.close();</div><div class="line">        System.out.println(&quot;000000000&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="四-两个表webapi和article"><a href="#四-两个表webapi和article" class="headerlink" title="四.两个表webapi和article"></a>四.两个表webapi和article</h2><p>···</p>
<p> CREATE TABLE article(<br>    id INT  AUTO_INCREMENT primary key,<br>    model VARCHAR(30) NOT NULL,<br>    detail VARCHAR(20000) NOT NULL,<br>    date DATETIME DEFAULT NOW()<br>)ENGINE = innoDB DEFAULT CHARSET=utf8;</p>
<p>CREATE TABLE webapi(<br>    num VARCHAR(20) primary key,<br>    area VARCHAR(255) NOT NULL,<br>    province VARCHAR(255) NOT NULL,<br>    city VARCHAR(255) NOT NULL,<br>    county VARCHAR(255) NOT NULL,<br>    webname VARCHAR(255)  NOT NULL,<br>    weburl  VARCHAR(255)  NOT NULL,<br>    infsource VARCHAR(255) NOT NULL,<br>    inftype   VARCHAR(255),<br>    worktype VARCHAR(255),<br>    zbyg  VARCHAR(255),<br>    zbgg    VARCHAR(255),<br>    zsjg  VARCHAR(255),<br>    ggbg VARCHAR(255),<br>    zbwj VARCHAR(255),<br>    zbdy VARCHAR(255),<br>    zbxx VARCHAR(255),<br>    kzj VARCHAR(255),<br>    lot VARCHAR(255),<br>    webtype VARCHAR(255),<br>    remark VARCHAR(255)<br>)ENGINE = innoDB DEFAULT CHARSET=utf8;<br>···</p>
<p><br><br><br></p>
<hr>
<p><br><br><br></p>
<h1 id="版本【3-0】-2016-11-27"><a href="#版本【3-0】-2016-11-27" class="headerlink" title="版本【3.0】 2016.11.27"></a>版本【3.0】 2016.11.27</h1><p>优化了程序，更加简洁效率，归纳调理，可移植性和修改性高<br>有用到ArrayList和HashMap，重构了个人工具类</p>
<p><br><br></p>
<h2 id="1-目录结构："><a href="#1-目录结构：" class="headerlink" title="1.目录结构："></a>1.目录结构：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">BatchCreate_file</div><div class="line">    src</div><div class="line">        extend.example </div><div class="line">            GetFirstLetter.java</div><div class="line">        main</div><div class="line">            AlterContent.java</div><div class="line">            CreateFile.java</div><div class="line">            GetTableData.java</div><div class="line">            NumBean.java</div><div class="line">            GoTask.java</div><div class="line">            tset.java 【运行文件】</div><div class="line">        Utils</div><div class="line">            IOFile.java</div><div class="line">            UseDB.java</div><div class="line">            UseString.java</div></pre></td></tr></table></figure>
<hr>
<h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><p>a-1.GetFirstLetter.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">package extend.example;</div><div class="line"></div><div class="line">public class GetFirstLetter &#123;</div><div class="line">    private static int BEGIN = 45217;</div><div class="line">    private static int END = 63486;</div><div class="line">    </div><div class="line">    //按照声母表示，这个表是在GB2312中的出现的第一个汉字，也就是说“啊”是代表首字母a的第一个汉字</div><div class="line">    // 二十六个字母区间对应二十七个端点    // GB2312码汉字区间十进制表示</div><div class="line">    private static char[] chartable = &#123;&apos;啊&apos;, &apos;芭&apos;, &apos;擦&apos;, &apos;搭&apos;, &apos;蛾&apos;, &apos;发&apos;, &apos;噶&apos;, &apos;哈&apos;,        &apos;哈&apos;, &apos;击&apos;, &apos;喀&apos;, &apos;垃&apos;, &apos;妈&apos;, &apos;拿&apos;, &apos;哦&apos;, &apos;啪&apos;, &apos;期&apos;, &apos;然&apos;, &apos;撒&apos;, &apos;塌&apos;, &apos;塌&apos;,        &apos;塌&apos;, &apos;挖&apos;, &apos;昔&apos;, &apos;压&apos;, &apos;匝&apos;,&#125;; </div><div class="line">    private static int [] table = new int[27]; // 对应首字母区间表</div><div class="line"></div><div class="line">    // 对应首字母区间表</div><div class="line">    private static char[] initialtable = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;,        &apos;h&apos;, &apos;h&apos;, &apos;j&apos;, &apos;k&apos;, &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;, &apos;r&apos;, &apos;s&apos;, &apos;t&apos;,        &apos;t&apos;, &apos;t&apos;, &apos;w&apos;, &apos;x&apos;, &apos;y&apos;, &apos;z&apos;,&#125;;</div><div class="line">    </div><div class="line">    //1.初始化</div><div class="line">     static &#123;        </div><div class="line">         for (int i = 0; i &lt; 26; i++) &#123;            </div><div class="line">             table[i] = gbValue(chartable[i]);// 得到GB2312码的首字母区间端点表，十进制。 </div><div class="line">         &#125;</div><div class="line">         table[26] = END;// 区间表结尾</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     /* 根据一个包含汉字的字符串返回一个汉字拼音首字母的字符串 最重要的一个方法，思路如下：一个个字符读入、判断、输出     */</div><div class="line">     public static String getFirstLetter(String sourceStr) &#123;        </div><div class="line">            String result = &quot;&quot;;        </div><div class="line">            String str = sourceStr.toLowerCase();       </div><div class="line">            int StrLength = str.length();        </div><div class="line">            int i;       </div><div class="line">            try &#123;            </div><div class="line">                for (i = 0; i &lt; StrLength; i++) &#123;                </div><div class="line">                    result += Char2Initial(str.charAt(i));            </div><div class="line">                    &#125;        </div><div class="line">                &#125; catch (Exception e) &#123;            </div><div class="line">                    result = &quot;&quot;;        </div><div class="line">                    &#125;        </div><div class="line">            return result;   </div><div class="line">        &#125;</div><div class="line">     </div><div class="line">      /* 输入字符,得到他的声母,英文字母返回对应的大写字母,其他非简体汉字返回 &apos;0&apos;     */  </div><div class="line">     private static char Char2Initial(char ch) &#123;    </div><div class="line">                // 对英文字母的处理：小写字母转换为大写，大写的直接返回</div><div class="line">              if (ch &gt;= &apos;a&apos; &amp;&amp; ch &lt;= &apos;z&apos;) &#123;            </div><div class="line">                  return ch;        </div><div class="line">               &#125;        </div><div class="line">              if (ch &gt;= &apos;A&apos; &amp;&amp; ch &lt;= &apos;Z&apos;) &#123;</div><div class="line">                  return ch;  </div><div class="line">                &#125;</div><div class="line">         </div><div class="line">              // 对非英文字母的处理：转化为首字母，然后判断是否在码表范围内，        // 若不是，则直接返回。        // 若是，则在码表内的进行判断。   </div><div class="line">              int gb = gbValue(ch);// 汉字转换首字母</div><div class="line">              if ((gb &lt; BEGIN) || (gb &gt; END))&#123;            </div><div class="line">                  return ch;        </div><div class="line">                 &#125;</div><div class="line">    </div><div class="line">              int i;       </div><div class="line">              for (i = 0; i &lt; 26; i++) &#123; // 判断匹配码表区间，匹配到就break,判断区间形如“[,)”</div><div class="line">                  if ((gb &gt;= table[i]) &amp;&amp; (gb &lt; table[i + 1])) &#123;</div><div class="line">                      break;            </div><div class="line">                      &#125;        </div><div class="line">              &#125;</div><div class="line">              if (gb == END) &#123; //补上GB2312区间最右端    </div><div class="line">                     i = 25;        </div><div class="line">                &#125;      </div><div class="line">            return initialtable[i]; // 在码表区间中，返回首字母    &#125;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">     </div><div class="line">     /* 取出汉字的编码 cn 汉字     */  </div><div class="line">    private static int gbValue(char ch) &#123;</div><div class="line">        String str = new String();        </div><div class="line">        str += ch;       </div><div class="line">        try &#123;           </div><div class="line">            byte[] bytes = str.getBytes(&quot;GB2312&quot;);            </div><div class="line">            if (bytes.length &lt; 2) &#123;               </div><div class="line">                    return 0;           </div><div class="line">            &#125;            </div><div class="line">            return (bytes[0] &lt;&lt; 8 &amp; 0xff00) + (bytes[1] &amp; 0xff);      </div><div class="line">        &#125; catch (Exception e) &#123;          </div><div class="line">            return 0;        </div><div class="line">            &#125;    </div><div class="line">    &#125;   </div><div class="line">    </div><div class="line">//  public static void main(String [] args)&#123;</div><div class="line">//      //在main方法中调用FirstLetterUtil类的getFirstLetter()方法，获取姓名的首字母。如：“刘德华”获取首字母是“ldh”。</div><div class="line">//       System.out.print(getFirstLetter(&quot;日你仙人掌&quot;));//获取文字首字母的拼音</div><div class="line">//  &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>b-1.AlterContent.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">package main;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Iterator;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseString;</div><div class="line"></div><div class="line">/**更新时间： 2016.11.27</div><div class="line"> * </div><div class="line"> *  获取模版内容，根据编号各个属性值，修改BackupTask.java和入库文件，创建文件</div><div class="line"> *          @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class AlterContent &#123;</div><div class="line">    </div><div class="line"></div><div class="line">        //方法1:修改BackupTask.java,并创建</div><div class="line">        public  void aBackupTask(String path,String fileName,String content,String sign,ArrayList&lt;String&gt; rukuName_list,CreateFile cf_RK,IOFile iof,UseString us) throws IOException&#123;//参数:路径，文件名，内容，标记【修改还是创建】,入库名,,项目类，工具类             </div><div class="line">                </div><div class="line">             //1.修改模版内容</div><div class="line">            String BackupTask_model=&quot;\n\t\t&quot;+&quot;NameA=(NameB) ac.getBean(\&quot;fileName\&quot;);&quot; +</div><div class="line">                                                              &quot;\n\t\t&quot; +&quot;NameA.initNameB();&quot;;</div><div class="line">                String attributeName=&quot;&quot;;//属性名</div><div class="line">                String cStr =&quot;&quot;;</div><div class="line">                StringBuilder sb = new StringBuilder();//储存各个所有内容</div><div class="line">                for(int i=0;i&lt;rukuName_list.size();i++)&#123;</div><div class="line">                    attributeName =rukuName_list.get(i).substring(rukuName_list.get(i).lastIndexOf(&quot;_&quot;)+1);</div><div class="line">                    cStr=BackupTask_model.replace(&quot;NameA&quot;,attributeName)</div><div class="line">                                                              .replace(&quot;NameB&quot;,us.UpFirstString(attributeName))</div><div class="line">                                                              .replace(&quot;fileName&quot;,rukuName_list.get(i));</div><div class="line">                    sb.append(cStr);</div><div class="line">                &#125;</div><div class="line">                sb.append(&quot;\n\t\t//ok;&quot;);//用于叠加补充</div><div class="line">                </div><div class="line">                //2.覆盖或者修改文件</div><div class="line">                if(&quot;cover&quot;.equals(sign))&#123;//覆盖 【与上一个编号完全不同(号码不同,且不带-)】</div><div class="line">                    content=content.replace(&quot;//changeModel;&quot;,sb.toString());</div><div class="line">                    cf_RK.cBackupTask_RK(path, &quot;BackupTask.java&quot;, content, iof);        </div><div class="line">                &#125;else if(&quot;alter&quot;.equals(sign))&#123; //修改 【带-的编号,在上一个文件基础上进行叠加修改】</div><div class="line">                    content=content.replace(&quot;//ok;&quot;,sb.toString());</div><div class="line">                    cf_RK.cBackupTask_RK(path, &quot;BackupTask.java&quot;, content, iof);</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2:修改入库文件</div><div class="line">        public void aRK(String path,String fileName,String content,String type,String username,NumBean numbean,CreateFile cf_RK,GetTableData gtd_RK,IOFile iof,UseString us) throws IOException&#123;</div><div class="line">            </div><div class="line"></div><div class="line">                //一.根据类型生成相应名称</div><div class="line">                HashMap&lt;String,String&gt; hm = gtd_RK.getTypeAllName(type);</div><div class="line"></div><div class="line">                </div><div class="line">                //二.根据需求修改content</div><div class="line">                        //A.判断信息类型</div><div class="line">                        String infType =numbean.getInftype();</div><div class="line">                        if(infType !=null  &amp;&amp; ! &quot;-0-&quot;.equals(infType))&#123;                                     //zbgg.setInfoType(&quot;服务&quot;);// 信息类型</div><div class="line">                            content=content.replaceFirst(&quot;//是否有信息类型;&quot;,&quot;zbgg.setInfoType(\&quot;&quot;+infType+&quot;\&quot;);//信息类型&quot;);</div><div class="line">                        &#125;else&#123;</div><div class="line">                            content=content.replaceFirst(&quot;//是否有信息类型;&quot;,&quot;//zbgg.setInfoType(\&quot;服务\&quot;);//信息类型&quot;);</div><div class="line">                        &#125;</div><div class="line">                    </div><div class="line">                        //B.判断行业分类</div><div class="line">                        String workType=numbean.getWorktype();</div><div class="line">                        if(workType==null &amp;&amp; ! &quot;-0-&quot;.equals(workType)) &#123;                                 //zbgg.setIndustry(&quot;建筑建材&quot;); // 行业分类</div><div class="line">                            content=content.replaceFirst(&quot;//是否有行业分类;&quot;,&quot;zbgg.setIndustry(\&quot;&quot;+workType+&quot;\&quot;); //行业分类&quot;);</div><div class="line">                        &#125;else&#123;</div><div class="line">                            content=content.replaceFirst(&quot;//是否有行业分类;&quot;,&quot;//zbgg.setIndustry(\&quot;建筑建材\&quot;); // 行业分类&quot;);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    </div><div class="line">                //三.修改模版</div><div class="line">                content=content.replace(&quot;zhaoBiaoGongGao&quot;,hm.get(&quot;typeSpell&quot;))</div><div class="line">                                                                             .replace(&quot;ZhaoBiaoGongGao&quot;,us.UpFirstString(hm.get(&quot;typeSpell&quot;)))</div><div class="line">                                                                             .replace(&quot;ZhaobGgService&quot;,us.UpFirstString(hm.get(&quot;typeService&quot;)))</div><div class="line">                                                                             .replace(&quot;zhaobGgService&quot;,hm.get(&quot;typeService&quot;))</div><div class="line">                                                                             .replace(&quot;zbgg&quot;,type);</div><div class="line">                content=content.replaceFirst(&quot;//@程序猿;&quot;,username)</div><div class="line">                                            .replaceFirst(&quot;//@内容;&quot;,numbean.getArea()+&quot;_&quot;+numbean.getProvince()+&quot;_&quot;+numbean.getCity()+&quot;_&quot;+numbean.getCounty()+&quot;_&quot;+hm.get(&quot;typeChinese&quot;)+&quot;_&quot;+numbean.getNum())                </div><div class="line">                                            .replaceFirst(&quot;//编号;&quot;,numbean.getNum());        </div><div class="line">                String className =fileName.substring(0,fileName.lastIndexOf(&quot;.&quot;));</div><div class="line">                content=content.replaceFirst(&quot;//注解;&quot;,className)</div><div class="line">                                            .replaceFirst(&quot;//类名;&quot;,className);</div><div class="line">                content=content.replaceFirst(&quot;//Area;&quot;,numbean.getArea())</div><div class="line">                                            .replaceFirst(&quot;//Province;&quot;,numbean.getProvince())</div><div class="line">                                            .replaceFirst(&quot;//City;&quot;,numbean.getCity())</div><div class="line">                                            .replaceFirst(&quot;//County;&quot;,numbean.getCounty())</div><div class="line">                                            .replaceFirst(&quot;//Webname;&quot;,numbean.getWebname())</div><div class="line">                                            .replaceFirst(&quot;//Infsource;&quot;,numbean.getInfsource())</div><div class="line">                                            .replace(&quot;//表名;&quot;,hm.get(&quot;tableName&quot;));</div><div class="line"></div><div class="line">                </div><div class="line">                            </div><div class="line">                //四.创建编号相应类型的入库文件</div><div class="line">                cf_RK.c_RK(path,fileName, content, iof);</div><div class="line">        &#125;       </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>b-2.CreateFile.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package main;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.sql.SQLException;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseDB;</div><div class="line"></div><div class="line">/**更新时间： 2016.11.27</div><div class="line"> * </div><div class="line"> *  创建文件【入库目录，BackupTask.java,相应编号入库文件】</div><div class="line"> *          @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class CreateFile &#123;</div><div class="line">        </div><div class="line">    //方法1：创建入库目录</div><div class="line">    public void cCatalog_RK(String path,String catalogName,IOFile iof) throws IOException&#123;//参数：路径，编号，工具类对象</div><div class="line">        iof.createCatalog(path, catalogName);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法2：BackupTask.java</div><div class="line">    public void cBackupTask_RK(String path,String fileName,String modelContent,IOFile iof) throws IOException&#123;//参数：路径，文件名，模版内容，工具类对象</div><div class="line">         iof.cFile(path, fileName, &quot;UTF-8&quot;, modelContent);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    //方法3：入库文件【例如:HZ_02139_ZhaobGgService】</div><div class="line">    public void c_RK(String path,String fileName,String modelContent,IOFile iof) throws IOException&#123;//参数：路径，文件名，模版内容，工具类对象</div><div class="line">        iof.cFile(path, fileName, &quot;UTF-8&quot;, modelContent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>b-3.GetTableData.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line">package main;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseDB;</div><div class="line"></div><div class="line">/**更新时间： 2016.11.27</div><div class="line"> * </div><div class="line"> *  获取数据，处理数据，归纳信息</div><div class="line"> *          @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class GetTableData &#123;</div><div class="line"></div><div class="line">    </div><div class="line">    //方法1：获取table表中，num编号的所有信息,储存进NumBean，返回NumBean</div><div class="line">    public  NumBean getNumInformation(String table,String num,UseDB udb) throws SQLException&#123;//参数：表名,编号,工具类</div><div class="line"></div><div class="line">            //查询table表，num字段所有数据，用&amp;分隔</div><div class="line">            String numInf = udb.select(table, &quot;num&quot;, &quot;num=&apos;&quot;+num+&quot;&apos;&quot;, &apos;*&apos;);</div><div class="line">            String [] numInf_arrays=numInf.split(&quot;&amp;&quot;);</div><div class="line">            </div><div class="line">            //表共21列，Numbean共21个属性，拥有Getters和Setters</div><div class="line">            NumBean nb = new NumBean();</div><div class="line">                nb.setNum(numInf_arrays[0]);</div><div class="line">                nb.setArea(numInf_arrays[1]);</div><div class="line">                nb.setProvince(numInf_arrays[2]);</div><div class="line">                nb.setCity(numInf_arrays[3]);</div><div class="line">                nb.setCounty(numInf_arrays[4]);</div><div class="line">                nb.setWebname(numInf_arrays[5]);</div><div class="line">                nb.setWeburl(numInf_arrays[6]);</div><div class="line">                nb.setInfsource(numInf_arrays[7]);</div><div class="line">                nb.setInftype(numInf_arrays[8]);</div><div class="line">                nb.setWorktype(numInf_arrays[9]);</div><div class="line">                nb.setZbyg(numInf_arrays[10]);</div><div class="line">                nb.setZbgg(numInf_arrays[11]);</div><div class="line">                nb.setZsjg(numInf_arrays[12]);</div><div class="line">                nb.setGgbg(numInf_arrays[13]);</div><div class="line">                nb.setZbwj(numInf_arrays[14]);</div><div class="line">                nb.setZbdy(numInf_arrays[15]);</div><div class="line">                nb.setZbxx(numInf_arrays[16]);</div><div class="line">                nb.setKzj(numInf_arrays[17]);</div><div class="line">                nb.setLot(numInf_arrays[18]);</div><div class="line">                nb.setWebtype(numInf_arrays[19]);</div><div class="line">                nb.setRemark(numInf_arrays[20]);</div><div class="line">        </div><div class="line">        return nb;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法2：获取table表的，所有编号</div><div class="line">    public ArrayList&lt;String&gt; getAllNum(String table,UseDB udb) throws SQLException&#123; //参数: 表名，工具类</div><div class="line">            ArrayList&lt;String&gt; numList = new  ArrayList&lt;String&gt;();</div><div class="line">            </div><div class="line">            String allNum =udb.selectAllColumn(table,&quot;num&quot;);</div><div class="line">            String [] allNum_arrays = allNum.split(&quot;##&quot;);</div><div class="line">            for(int i=0;i&lt;allNum_arrays.length;i++)&#123;</div><div class="line">                numList.add(allNum_arrays[i]);</div><div class="line">            &#125;</div><div class="line">            return numList;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法3:获取当前编号拥有URL的字段名</div><div class="line">    public ArrayList&lt;String&gt; getNum_HaveURLRecord(String table,String num,UseDB udb) throws SQLException&#123; //参数：表名，编号，工具类</div><div class="line"></div><div class="line">        //查询数据库table表，num字段的11-18行，得到拥有记录的列名的ArrayList</div><div class="line">        ArrayList&lt;String&gt; alist=udb.selectAskinformation_Scope(table,&quot;num=&apos;&quot;+num+&quot;&apos;&quot;, &quot;11-18&quot;);//【11-18是招标预告到控制价】</div><div class="line"></div><div class="line">        return alist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //方法4：根据列名，得到相应类型的字符串</div><div class="line">    public String getTypename(String columnName)&#123; //参数：列名</div><div class="line">                String type=&quot;&quot;;</div><div class="line"></div><div class="line">                if(columnName.equals(&quot;zbyg&quot;))&#123;</div><div class="line">                    type=&quot;ZhaobYgService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zbgg&quot;))&#123;</div><div class="line">                    type=&quot;ZhaobGgService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zsjg&quot;))&#123;</div><div class="line">                    type=&quot;ZisJgService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;ggbg&quot;))&#123;</div><div class="line">                    type=&quot;GonggBgService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zbwj&quot;))&#123;</div><div class="line">                    type=&quot;ZhaobWjService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zbdy&quot;))&#123;</div><div class="line">                    type=&quot;ZhaobDyService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zbxx&quot;))&#123;</div><div class="line">                    type=&quot;ZhongbXxService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;kzj&quot;))&#123;</div><div class="line">                    type=&quot;KongZjService&quot;;</div><div class="line">                &#125;</div><div class="line">        </div><div class="line">        return type;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法5:判断num编号属否在scope区间里面，返回布尔类型参数【true-属于，false-不属于】</div><div class="line">    public Boolean getMinMaxScope(String scope,int num)&#123;//参数：范围，编号</div><div class="line">            Boolean sign = false;//判断标识，默认为true</div><div class="line">            </div><div class="line">            String [] scope_arrays = scope.split(&quot;-&quot;);</div><div class="line">            int minScope =Integer.parseInt(scope_arrays[0]);</div><div class="line">            int maxScope =Integer.parseInt(scope_arrays[1]);</div><div class="line">            </div><div class="line">                if(minScope &lt;= num &amp;&amp; num &lt;= maxScope)&#123;</div><div class="line">                    sign =true;</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">            return sign;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法6：根据类型生成相应名称，返回HaspMap【无序键值队】</div><div class="line">    public HashMap&lt;String,String&gt; getTypeAllName(String type)&#123;  //参数：类型名，也是列名</div><div class="line">        HashMap&lt;String,String&gt; hm = new HashMap&lt;String,String&gt;();</div><div class="line"></div><div class="line">                if(type.equals(&quot;zbyg&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;zhaoBiaoYuGao&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhaobYgService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;招标预告&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhao_biao_yu_gao&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zbgg&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;zhaoBiaoGongGao&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhaobGgService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;招标公告&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhao_biao_gong_gao&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zsjg&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;ziShenJieGuo&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zisJgService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;咨审结果&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zi_shen_jie_guo&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;ggbg&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;gongGaoBianGeng&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;gonggBgService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;公告变更&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_gong_gao_bian_geng&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zbwj&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;zhaoBiaoWenJian&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhaobWjService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;招标文件&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhao_biao_wen_jian&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zbdy&quot;))&#123;</div><div class="line">                    hm.put(&quot;typeSpell&quot;, &quot;ZhaoBiaoDaYi&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhaobDyService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;招标答疑&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhao_biao_da_yi&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zbxx&quot;))&#123;</div><div class="line">                    hm.put(&quot;typeSpell&quot;, &quot;zhongBiaoXinXi&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhongbXxService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;中标信息&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhong_biao_xin_xi&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;kzj&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;kongZhiJia&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;kongZjService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;控制价&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_kong_zhi_jia&quot;);</div><div class="line">                &#125;               </div><div class="line">        </div><div class="line">        return hm;      </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法6: 插入模版数据,并返回模版内容</div><div class="line">    public String getModel(String filePath,IOFile iof,UseDB udb) throws IOException,SQLException&#123;//参数：文件路径，工具类</div><div class="line">        </div><div class="line">        //1.读取文件内容                                                                                                      </div><div class="line">        String fileContent=iof.readFileContent_String(filePath,&quot;GBK&quot;); //注意：路径的话用/或者\\都可以,数据库的默认编码是GBK,如果是UTF-8\   </div><div class="line">        </div><div class="line">        //2.判断是否存在相同模版</div><div class="line">        String modeInf = udb.select(&quot;article&quot;, &quot;model&quot;, &quot;model=&apos;&quot;+filePath+&quot;&apos;&quot;, &apos;*&apos;);</div><div class="line">        if(modeInf.indexOf(filePath) == -1)&#123;</div><div class="line">            udb.insert(&quot;article&quot;,&quot;model,detail&quot;,filePath+&quot;&amp;&amp;&amp;&amp;&amp;&quot;+fileContent,&quot;?,?&quot;); </div><div class="line">        &#125;else&#123;</div><div class="line">            System.out.println(&quot;*******************已存在相同文件名的模版，不进行重复插入*******************&quot;);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return fileContent;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>b-4.NumBean.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line">package main;</div><div class="line"></div><div class="line">/**更新时间： 2016.11.27</div><div class="line"> * </div><div class="line"> *  JavaBena，每一个编号</div><div class="line"> *          @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class NumBean &#123;</div><div class="line">    </div><div class="line">        private String num;             //网站数据源编码【编号】</div><div class="line">        private String area;                //区域</div><div class="line">        private String province;        //省份</div><div class="line">        private String city;                    //城市</div><div class="line">        private String county;          //区县</div><div class="line">        private String webname;      //网站数据源名称</div><div class="line">        private String weburl;          //网址</div><div class="line">        private String infsource;       //信息来源</div><div class="line">        private String inftype;         //信息类型</div><div class="line">        private String worktype;        //行业分类</div><div class="line">        private String zbyg;                //招标预告</div><div class="line">        private String zbgg;                //招标公告</div><div class="line">        private String zsjg;                //咨审结果</div><div class="line">        private String ggbg;                //公告变更</div><div class="line">        private String zbwj;                //招标文件</div><div class="line">        private String zbdy;                //招标答疑</div><div class="line">        private String zbxx;                //中标信息</div><div class="line">        private String kzj;                 //控制价</div><div class="line">        private String lot;                 //批次</div><div class="line">        private String webtype;     //原网站信息分类</div><div class="line">        private String remark;          //备注</div><div class="line">    </div><div class="line">            public String getNum() &#123;</div><div class="line">                return num;</div><div class="line">            &#125;</div><div class="line">            public String getArea() &#123;</div><div class="line">                return area;</div><div class="line">            &#125;</div><div class="line">            public String getProvince() &#123;</div><div class="line">                return province;</div><div class="line">            &#125;</div><div class="line">            public String getCity() &#123;</div><div class="line">                return city;</div><div class="line">            &#125;</div><div class="line">            public String getCounty() &#123;</div><div class="line">                return county;</div><div class="line">            &#125;</div><div class="line">            public String getWebname() &#123;</div><div class="line">                return webname;</div><div class="line">            &#125;</div><div class="line">            public String getWeburl() &#123;</div><div class="line">                return weburl;</div><div class="line">            &#125;</div><div class="line">            public String getInfsource() &#123;</div><div class="line">                return infsource;</div><div class="line">            &#125;</div><div class="line">            public String getInftype() &#123;</div><div class="line">                return inftype;</div><div class="line">            &#125;</div><div class="line">            public String getWorktype() &#123;</div><div class="line">                return worktype;</div><div class="line">            &#125;</div><div class="line">            public String getZbyg() &#123;</div><div class="line">                return zbyg;</div><div class="line">            &#125;</div><div class="line">            public String getZbgg() &#123;</div><div class="line">                return zbgg;</div><div class="line">            &#125;</div><div class="line">            public String getZsjg() &#123;</div><div class="line">                return zsjg;</div><div class="line">            &#125;</div><div class="line">            public String getGgbg() &#123;</div><div class="line">                return ggbg;</div><div class="line">            &#125;</div><div class="line">            public String getZbwj() &#123;</div><div class="line">                return zbwj;</div><div class="line">            &#125;</div><div class="line">            public String getZbdy() &#123;</div><div class="line">                return zbdy;</div><div class="line">            &#125;</div><div class="line">            public String getZbxx() &#123;</div><div class="line">                return zbxx;</div><div class="line">            &#125;</div><div class="line">            public String getKzj() &#123;</div><div class="line">                return kzj;</div><div class="line">            &#125;</div><div class="line">            public String getLot() &#123;</div><div class="line">                return lot;</div><div class="line">            &#125;</div><div class="line">            public String getWebtype() &#123;</div><div class="line">                return webtype;</div><div class="line">            &#125;</div><div class="line">            public String getRemark() &#123;</div><div class="line">                return remark;</div><div class="line">            &#125;</div><div class="line">            public void setNum(String num) &#123;</div><div class="line">                this.num = num;</div><div class="line">            &#125;</div><div class="line">            public void setArea(String area) &#123;</div><div class="line">                this.area = area;</div><div class="line">            &#125;</div><div class="line">            public void setProvince(String province) &#123;</div><div class="line">                this.province = province;</div><div class="line">            &#125;</div><div class="line">            public void setCity(String city) &#123;</div><div class="line">                this.city = city;</div><div class="line">            &#125;</div><div class="line">            public void setCounty(String county) &#123;</div><div class="line">                this.county = county;</div><div class="line">            &#125;</div><div class="line">            public void setWebname(String webname) &#123;</div><div class="line">                this.webname = webname;</div><div class="line">            &#125;</div><div class="line">            public void setWeburl(String weburl) &#123;</div><div class="line">                this.weburl = weburl;</div><div class="line">            &#125;</div><div class="line">            public void setInfsource(String infsource) &#123;</div><div class="line">                this.infsource = infsource;</div><div class="line">            &#125;</div><div class="line">            public void setInftype(String inftype) &#123;</div><div class="line">                this.inftype = inftype;</div><div class="line">            &#125;</div><div class="line">            public void setWorktype(String worktype) &#123;</div><div class="line">                this.worktype = worktype;</div><div class="line">            &#125;</div><div class="line">            public void setZbyg(String zbyg) &#123;</div><div class="line">                this.zbyg = zbyg;</div><div class="line">            &#125;</div><div class="line">            public void setZbgg(String zbgg) &#123;</div><div class="line">                this.zbgg = zbgg;</div><div class="line">            &#125;</div><div class="line">            public void setZsjg(String zsjg) &#123;</div><div class="line">                this.zsjg = zsjg;</div><div class="line">            &#125;</div><div class="line">            public void setGgbg(String ggbg) &#123;</div><div class="line">                this.ggbg = ggbg;</div><div class="line">            &#125;</div><div class="line">            public void setZbwj(String zbwj) &#123;</div><div class="line">                this.zbwj = zbwj;</div><div class="line">            &#125;</div><div class="line">            public void setZbdy(String zbdy) &#123;</div><div class="line">                this.zbdy = zbdy;</div><div class="line">            &#125;</div><div class="line">            public void setZbxx(String zbxx) &#123;</div><div class="line">                this.zbxx = zbxx;</div><div class="line">            &#125;</div><div class="line">            public void setKzj(String kzj) &#123;</div><div class="line">                this.kzj = kzj;</div><div class="line">            &#125;</div><div class="line">            public void setLot(String lot) &#123;</div><div class="line">                this.lot = lot;</div><div class="line">            &#125;</div><div class="line">            public void setWebtype(String webtype) &#123;</div><div class="line">                this.webtype = webtype;</div><div class="line">            &#125;</div><div class="line">            public void setRemark(String remark) &#123;</div><div class="line">                this.remark = remark;</div><div class="line">            &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>b-5.GoTask.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line">package main;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line"></div><div class="line">import extend.example.GetFirstLetter;</div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseDB;</div><div class="line">import Utils.UseString;</div><div class="line"></div><div class="line"></div><div class="line">/**更新时间：2016.11.27</div><div class="line"> *      </div><div class="line"> * 任务流程</div><div class="line"> *           @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class GoTask &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    private String path=&quot;C:/Users/Liu-shuwei/Desktop\\&quot;;                                 //路径</div><div class="line">    private String catalogName=&quot;入库【版本3.0,包含新表and旧表】&quot;;               //文件名</div><div class="line">    private String numScope=&quot;01000-05000&quot;;                                                  //编号范围区间</div><div class="line">    private String useTable=&quot;webapi2&quot;;                                                              //使用哪个表的数据</div><div class="line">    private String username=&quot;某男子&quot;;                                                                 //程序员名称</div><div class="line">    </div><div class="line">    </div><div class="line">    public static long  useTime()&#123;</div><div class="line">        return System.currentTimeMillis();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //任务流程</div><div class="line">    public void GO() &#123;</div><div class="line">        long beginTime=useTime();   //开始时间</div><div class="line">        </div><div class="line">        //执行任务流程</div><div class="line">        try&#123;</div><div class="line">            </div><div class="line">            //一.获取对象</div><div class="line">            CreateFile cf_RK =new CreateFile();</div><div class="line">            GetTableData  gtd_RK = new GetTableData();</div><div class="line">            AlterContent afc = new AlterContent();</div><div class="line">            </div><div class="line">            UseDB udb = new UseDB();</div><div class="line">            IOFile iof=new IOFile();</div><div class="line">            UseString us = new UseString();</div><div class="line">            </div><div class="line">            GetFirstLetter gfl = new GetFirstLetter();</div><div class="line"></div><div class="line">            </div><div class="line">            udb.connDatabase(&quot;batchcreate_file&quot;);//连接数据库</div><div class="line">            </div><div class="line">            </div><div class="line">            //二.创建大目录,往数据库插入模版数据</div><div class="line">            iof.createCatalog(path, catalogName);</div><div class="line">            String model1_BT =gtd_RK.getModel(&quot;model_file/BackupTask.java&quot;,iof,udb);</div><div class="line">            String model2_RK =gtd_RK.getModel(&quot;model_file/ZhaobGgServiceModel.java&quot;,iof,udb);</div><div class="line">            </div><div class="line">            </div><div class="line">            </div><div class="line">            //三.获取数据表数据，并生成目录and文件</div><div class="line">                //三-1获取所有编号</div><div class="line">                ArrayList&lt;String&gt; numList =gtd_RK.getAllNum(useTable, udb) ; </div><div class="line">                </div><div class="line">                </div><div class="line">                //三-2.遍历所有编号</div><div class="line">                for(int i=0;i&lt;numList.size();i++)&#123;</div><div class="line">                </div><div class="line">                    String num=numList.get(i);                                  //当前编号</div><div class="line">                    String num_=numList.get(i) .replace(&quot;-&quot;,&quot;_&quot;);       //编号下划线形态</div><div class="line">                    String changePath =&quot;&quot;;                                          //变化路径</div><div class="line">                    </div><div class="line">                    //3-2判断当前编号是否在范围区间</div><div class="line">                    if(gtd_RK.getMinMaxScope(numScope, us.getInt(num.substring(0,5))))&#123;                              //范围，编号 进行比较</div><div class="line"></div><div class="line">                        //a.获取当前编号的所有数据，并储存到JavaBean</div><div class="line">                        NumBean numBean =gtd_RK.getNumInformation(useTable, num, udb);</div><div class="line">                        </div><div class="line">                        </div><div class="line">                        //b.生成入库文件名，存储进ArrayList</div><div class="line">                         ArrayList&lt;String&gt; ifURL_typelist =gtd_RK.getNum_HaveURLRecord(useTable, num, udb); //得到当前编号含有URL的入库文件类型</div><div class="line">                         ArrayList&lt;String &gt; rukuName_list=new ArrayList&lt;String&gt;();                                          //用于储存当前编号所需要的所有入库文件名</div><div class="line">                         for(int k=0;k&lt;ifURL_typelist.size();k++)&#123;</div><div class="line">                             String typeName =gtd_RK.getTypename(ifURL_typelist.get(k));                                                //入库类型</div><div class="line">                             String rukuName=gfl.getFirstLetter(numBean.getArea()).toUpperCase()+&quot;_&quot;+num_+&quot;_&quot;+typeName;     //入库文件完整名</div><div class="line">                             rukuName_list.add(rukuName);</div><div class="line">                         &#125;</div><div class="line">                        </div><div class="line">                        </div><div class="line">                        //d.生成入库子目录</div><div class="line">                        String catalog_1=&quot;入库-&quot;+num.substring(0,5);                          //目录名</div><div class="line">                        changePath =path+&quot;/&quot;+catalogName;                                      //子路径1</div><div class="line">                        cf_RK.cCatalog_RK(changePath,&quot;入库-&quot;+num.substring(0,5),iof);</div><div class="line">                        </div><div class="line">                        </div><div class="line">                        //生成BackupTask.java</div><div class="line">                         changePath +=&quot;/&quot;+catalog_1;                                 //子路径1-2</div><div class="line">                         String sign = &quot;cover&quot;;                                                 //判断当前编号是需要修改还是覆盖,默认是覆盖【带-编号是alter,不带-是cover】</div><div class="line">                            if(i &gt; 0)&#123;                                                                  //大于0的时候进行判断    【顶部位置没有上一个编号】</div><div class="line">                                if(us.getInt(numList.get(i-1).substring(0,5)) == us.getInt(num.substring(0,5)))&#123;            </div><div class="line">                                    sign=&quot;alter&quot;;                                                   //如果和上个编号相等，则修改</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                         if(&quot;cover&quot;.equals(sign))&#123;                      //覆盖</div><div class="line">                                    afc.aBackupTask(changePath,&quot;BackupTask.java&quot;, model1_BT,sign,rukuName_list, cf_RK, iof,us);</div><div class="line">                         &#125;else if(&quot;alter&quot;.equals(sign))&#123;                //修改</div><div class="line">                             String ageBackupTask=iof.readFileContent_String(changePath+&quot;/BackupTask.java&quot;,&quot;GBK&quot;); //读取已经已经存在的BackupTask.java</div><div class="line">                             afc.aBackupTask(changePath,&quot;BackupTask.java&quot;,ageBackupTask ,sign,rukuName_list, cf_RK, iof,us);</div><div class="line">                         &#125;</div><div class="line">                         </div><div class="line">                        </div><div class="line">                        //e.生成入库文件</div><div class="line">                        cf_RK.cCatalog_RK(changePath,&quot;imp&quot;,iof);        //生成imp目录</div><div class="line">                        changePath +=&quot;/imp&quot;;                                         //子路径1-2-3</div><div class="line">                        for(int k=0;k&lt;ifURL_typelist.size();k++)&#123;                //根据拥有URL的类型，循环生成入库文件</div><div class="line">                            afc.aRK(changePath, rukuName_list.get(k)+&quot;.java&quot;, model2_RK,ifURL_typelist.get(k),username,numBean,cf_RK, gtd_RK,iof, us);</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            </div><div class="line">        </div><div class="line">            //四.关闭资源</div><div class="line">            udb.closeAll();</div><div class="line">            </div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //结束时间</div><div class="line">        long endTime=useTime();</div><div class="line">        System.out.println(&quot;总共用时:&quot;+(endTime-beginTime)+&quot;毫秒！&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>b-6.test.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package main;</div><div class="line"></div><div class="line">public class test &#123;</div><div class="line">    </div><div class="line"></div><div class="line">    //测试主方法</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">    </div><div class="line">        //创建任务流程对象</div><div class="line">        GoTask gt= new GoTask();</div><div class="line">        </div><div class="line">        //执行流程(参数:路径,某个表数据,目录名)</div><div class="line">        gt.GO();</div><div class="line">    </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>c-1.IOFile.java<br>c-2.UseDB.java<br>c-3.UseString.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div></pre></td><td class="code"><pre><div class="line">***********************c-1*************************************</div><div class="line">package Utils;</div><div class="line"></div><div class="line">import java.io.BufferedWriter;</div><div class="line">import java.io.File;</div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.io.OutputStreamWriter;</div><div class="line"></div><div class="line">/** 更新时间： 2016.11.26</div><div class="line"> *   </div><div class="line"> *  数据库封装类</div><div class="line"> *          方法1-读取</div><div class="line"> *          方法2-创建</div><div class="line"> *          方法3-追加内容</div><div class="line"> *              @author suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class IOFile &#123;</div><div class="line">    </div><div class="line">        //方法1-1:读取文件内容【字节流】【只适用与读取英文，数字，无法设置编码格式】</div><div class="line">        public String readFileContent_Char(String filePath) throws IOException&#123; //参数:文件路径,编码格式</div><div class="line">            </div><div class="line">            String content=&quot;&quot;;</div><div class="line">            InputStream inf=new FileInputStream(filePath);</div><div class="line">            for(int i=0;i&lt;inf.available();i++)&#123;</div><div class="line">                content+=(char)inf.read();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line"></div><div class="line">            return &quot;\&apos;&quot;+content+&quot;\&apos;&quot;;   </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法1-2:读取文件内容【字符流】【可以设置编码，读取中文，英文，数字】</div><div class="line">          public String readFileContent_String(String filePath,String encoding) throws IOException&#123; //参数: 路径,编码格式</div><div class="line">                    StringBuilder sb =new StringBuilder();</div><div class="line">                    </div><div class="line">                    File f=new File(filePath);//定位文件【小弊端，没有文件的话会自动新建】</div><div class="line">                    </div><div class="line">                    FileInputStream fip=new FileInputStream(f);</div><div class="line">                    InputStreamReader reader=new InputStreamReader(fip,encoding);</div><div class="line">                    while(reader.ready())&#123;</div><div class="line">                        sb.append((char)reader.read());</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                return sb.toString();   </div><div class="line">           &#125;        </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        //方法3-1: 创建目录</div><div class="line">        public void createCatalog(String path,String catalogName)&#123;//参数：路径，目录名</div><div class="line">            </div><div class="line">            File d=new File(path+&quot;/&quot;+catalogName);</div><div class="line">            d.mkdir();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法3-2: 创建文件,写入内容</div><div class="line">        public void cFile(String path,String fileName,String encoding,String content) throws IOException&#123; //参数：路径,文件名.格式,编码格式,文件内容</div><div class="line">            File f=new File(path+&quot;/&quot;+fileName);</div><div class="line">            </div><div class="line">            FileOutputStream fop= new FileOutputStream(f);</div><div class="line">            OutputStreamWriter writer=new OutputStreamWriter(fop,&quot;UTF-8&quot;);</div><div class="line">            writer.append(content);</div><div class="line"></div><div class="line">            writer.close();</div><div class="line">            fop.close();</div><div class="line">            System.out.println( &quot;*********************&quot;+fileName+&quot;成功创建！***********************************&quot;);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法3-3:追加文件内容【若不存在文件，则会在路径path下，新建filnName文件】</div><div class="line">        public void addContentFile(String path,String fileName,String content) throws IOException&#123; //参数：路径，文件名，追加的内容</div><div class="line">            File f=new File(path+&quot;/&quot;+fileName); </div><div class="line"></div><div class="line">            FileOutputStream fs = new FileOutputStream(f,true);</div><div class="line">            OutputStreamWriter osw = new OutputStreamWriter(fs);</div><div class="line">            BufferedWriter out = new BufferedWriter(osw);     </div><div class="line">                    </div><div class="line">            out.write(content);     </div><div class="line">            out.close();     </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">************************************c-2***********************************************************</div><div class="line">package Utils;</div><div class="line"></div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.DriverManager;</div><div class="line">import java.sql.PreparedStatement;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.ResultSetMetaData;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.sql.Statement;</div><div class="line">import java.util.ArrayList;</div><div class="line"></div><div class="line"></div><div class="line">/** 更新时间： 2016.11.26</div><div class="line"> *   </div><div class="line"> *  数据库封装类</div><div class="line"> *          方法1-基础使用</div><div class="line"> *          方法2-查询 【SELECT】</div><div class="line"> *          方法3-添加【INSERT】</div><div class="line"> *              @author suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class UseDB &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    private String drive=&quot;com.mysql.jdbc.Driver&quot;;           //数据库驱动</div><div class="line">    private String link=&quot;jdbc:mysql://127.0.0.1:3306/&quot;;     //mysql—JDBC链接+IP地址+端口</div><div class="line"></div><div class="line">    </div><div class="line">    private String username=&quot;root&quot;;                         //用户名</div><div class="line">    private String password=&quot;liushuwei&quot;;                    //密码</div><div class="line">    </div><div class="line">    private Connection conn;</div><div class="line">    private Statement st;</div><div class="line">    private PreparedStatement pst;</div><div class="line">    private ResultSet rs;</div><div class="line">    private ResultSetMetaData rsmd;//获取列的信息</div><div class="line">    </div><div class="line">    private String sql; //sql语句</div><div class="line">    </div><div class="line"></div><div class="line">        //无参构造方法</div><div class="line">        public UseDB()&#123; </div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        //方法1: 连接database数据库</div><div class="line">        public void connDatabase(String database)  throws SQLException,ClassNotFoundException&#123; //参数：数据库名称</div><div class="line">             Class.forName(drive);</div><div class="line">             conn=DriverManager.getConnection(link+database,username,password); </div><div class="line">             st=conn.createStatement();</div><div class="line">             System.out.println(&quot;数据库连接成功......&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //访法1-2: 使用database数据库                                </div><div class="line">        public void useDatabase(String database) throws SQLException&#123;//参数: 数据库名称</div><div class="line">            </div><div class="line">                sql=&quot;USE &quot;+database+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line"></div><div class="line">            System.out.println(&quot;********************目前使用&quot;+database+&quot;数据库**************************&quot;);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法1-3关闭所有对象</div><div class="line">        public void closeAll() throws SQLException&#123;</div><div class="line">            </div><div class="line">            if(rs!=null)  rs.close();//关闭ResultSet</div><div class="line">            if(pst!=null)   pst.close();    //关闭PreparedStatement</div><div class="line">            if(st!=null) st.close();//关闭Statement</div><div class="line">            if(conn!=null)  conn.close(); //关闭Connection</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-1:查询table表中record字段满足condition条件的值,返回查询内容【字段值】 ，不能用于 * 查询</div><div class="line">        public String select(String table,String record,String condition)throws SQLException&#123;//参数: 表名,字段名,WHERE条件</div><div class="line">                StringBuilder sb= new StringBuilder();</div><div class="line">                </div><div class="line">                sql=&quot;SELECT &quot;+record+&quot; FROM &quot; +table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                ResultSetMetaData rsm =rs.getMetaData(); //获得列集</div><div class="line">                while(rs.next())&#123;</div><div class="line">                    sb.append(rs.getString(record));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-2:查询table表中record字段满足condition条件的值,打印到控制台，并返回一个字符串【&amp;换列】</div><div class="line">                public String select(String table,String record,String condition,char o)throws SQLException&#123;//参数: 表名,字段名,WHERE条件</div><div class="line">                        StringBuilder sb= new StringBuilder();</div><div class="line">                        </div><div class="line">                        sql=&quot;SELECT * FROM &quot; +table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                        rs=st.executeQuery(sql);</div><div class="line">                        rsmd=rs.getMetaData();</div><div class="line">                        while(rs.next())&#123;</div><div class="line">                            for(int i=1;i&lt;=rsmd.getColumnCount();i++)&#123;  //获取总列数 数据字段从1开始</div><div class="line">                                if(rs.getString(i).equals(&quot;&quot;))&#123;</div><div class="line">                                    sb.append(&quot;-0-&amp;&quot;);</div><div class="line">                                &#125;else&#123;</div><div class="line">                                    sb.append(rs.getString(i)+&quot;&amp;&quot;);</div><div class="line">                                &#125;</div><div class="line">                                System.out.print(rs.getString(i)+&quot;\t&quot;);  //输出每个字段值，间隔一个Tab长度</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    return sb.toString();</div><div class="line">                &#125;</div><div class="line">        </div><div class="line">        //方法2-3:查询table所有数据的数据,打印到控制台，并返回一个字符串 【&amp;换列，##换行】</div><div class="line">        public String select(String table) throws SQLException&#123;//参数: 表名</div><div class="line">                StringBuilder sb= new StringBuilder();</div><div class="line">                </div><div class="line">                sql=&quot;SELECT * FROM &quot; +table+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                rsmd =rs.getMetaData(); //获得列集</div><div class="line">                </div><div class="line">                    while(rs.next())&#123;//光标移动</div><div class="line">                        for(int i=1;i&lt;=rsmd.getColumnCount();i++)&#123;  //获取总列数</div><div class="line">                            sb.append(rs.getString(i)+&quot;&amp;&quot;);</div><div class="line">                            System.out.print(rs.getString(i)+&quot;\t&quot;);  //输出每个字段值，间隔一个Tab长度</div><div class="line">                        &#125;</div><div class="line">                        System.out.println();//换行</div><div class="line">                        sb.append(&quot;##&quot;);</div><div class="line">                    &#125;</div><div class="line">    </div><div class="line">            </div><div class="line">                return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">            </div><div class="line">        </div><div class="line">        //方法2-4:查询table表,record字段的所有记录值(所有行)【##换行】</div><div class="line">        public String selectAllColumn(String table,String record) throws SQLException&#123;</div><div class="line">            StringBuilder sb= new StringBuilder();</div><div class="line">            </div><div class="line">             sql=&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot;;&quot;;</div><div class="line">             rs=st.executeQuery(sql);</div><div class="line">             while(rs.next())&#123;</div><div class="line">                 sb.append(rs.getString(1)+&quot;##&quot;);</div><div class="line">             &#125;</div><div class="line">             </div><div class="line">            return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-6：查询table表,满足content条件【具有唯一性】，有记录的字段直接返回记录值,没有则返回null</div><div class="line">        public String selectIfExist_CheckRecord(String table,String record,String condition) throws SQLException&#123;//参数: 表名,字段名，条件</div><div class="line">                </div><div class="line">                sql=&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                String record_content=null;</div><div class="line">                if(rs.next())&#123;</div><div class="line">                    record_content=rs.getString(1);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            return record_content;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法2-7:查询table表,根据条件condition【具有唯一性】,判断整行记录那个字段拥有记录，有记录的字段返回字段名和值【&amp;&amp;&amp;&amp;&amp;分隔】</div><div class="line">        public ArrayList&lt;String&gt; selectIfExist_CheckRecord(String table,String condition,char o) throws SQLException&#123;//参数: 表名，条件,*</div><div class="line">            </div><div class="line">            ArrayList&lt;String&gt; al = new ArrayList&lt;String&gt;();</div><div class="line">                </div><div class="line">                sql=&quot;SELECT * FROM &quot;+table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                System.out.println(sql);</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                rsmd=rs.getMetaData();</div><div class="line"></div><div class="line">                while(rs.next())&#123;</div><div class="line">                    for(int i=1;i&lt;=rsmd.getColumnCount();i++)&#123;  </div><div class="line">                        al.add(rsmd.getColumnName(i));//只要列名</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">            return al;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-8: 查询table表,满足条件condition的,返回规定范围行数的记录的列名【&amp;分隔每列】</div><div class="line">        public ArrayList&lt;String&gt; selectAskinformation_Scope(String table,String condition,String scope) throws SQLException&#123; //参数:表名,条件,范围行数【使用-进行分隔,例如1-5】</div><div class="line">//              StringBuilder sb= new StringBuilder();</div><div class="line">                ArrayList&lt;String&gt; alist = new  ArrayList&lt;String&gt;();</div><div class="line">                </div><div class="line">                String [] scope_arrays =scope.split(&quot;-&quot;);</div><div class="line">                int begin=Integer.parseInt(scope_arrays[0]);</div><div class="line">                int end=Integer.parseInt(scope_arrays[1]);</div><div class="line">                </div><div class="line">                sql=&quot;SELECT * FROM &quot;+table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                rsmd=rs.getMetaData();</div><div class="line">                while(rs.next())&#123;</div><div class="line">                    for(int i=begin;i&lt;=end;i++)&#123; //遍历范围区间的字段</div><div class="line">                        if(rs.getString(i)==null || rs.getString(i).length()&lt;2) continue;</div><div class="line">                        alist.add(rsmd.getColumnName(i));//只要列名</div><div class="line">                    &#125;       </div><div class="line">                &#125;</div><div class="line"></div><div class="line">            return alist;   </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-9：查询table所有记录总数，返回记录总数</div><div class="line">        public int select_allCount(String table) throws SQLException&#123;//参数：表名</div><div class="line">            </div><div class="line">            </div><div class="line">            sql=&quot;SELECT count(*)  FROM &quot; +table+&quot;;&quot;;</div><div class="line">            rs=st.executeQuery(sql);</div><div class="line">            rs.next();</div><div class="line">            </div><div class="line">            int recordCount =Integer.parseInt(rs.getString(1));</div><div class="line"></div><div class="line">            return recordCount;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法3-1: 往table表record字段,插入一行content数据【少量数据(标题，日期等)】【多字段插入   ,分隔字段     ,号分隔内容】</div><div class="line">        public void insert(String table,String record,String content) throws SQLException&#123;//参数: 表名,字段,内容</div><div class="line">                    String sql=&quot;INSERT INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+content+&quot;);&quot;;</div><div class="line">                    int i=st.executeUpdate(sql);</div><div class="line">                    if(i!=-1)&#123;</div><div class="line">                        System.out.println(&quot;*****************&quot;+table+&quot;表INSERT成功！****************&quot;);</div><div class="line">                    &#125;</div><div class="line">        &#125;</div><div class="line">                </div><div class="line">        //方法3-2:往table表record，插入一行content数据 【大量数据(文章，文本内容)】【,分隔字段 &amp;&amp;&amp;&amp;&amp; 分隔内容   ,分隔占位符】</div><div class="line">        public void insert(String table,String record,String content,String mark) throws SQLException, UnsupportedEncodingException&#123;//参数值: 表名,字段,内容，占位符(?)</div><div class="line">                    </div><div class="line">            </div><div class="line">                    String [] content_Arrays=content.split(&quot;&amp;&amp;&amp;&amp;&amp;&quot;);//分隔内容存入数组</div><div class="line">                    String [] mark_Arrays = mark.split(&quot;,&quot;);</div><div class="line">                    </div><div class="line">                    //判断是否存在相同记录，如果存在则不执行插入【以第一条record为准】</div><div class="line">                    String first_record=record.substring(0,record.indexOf(&quot;,&quot;));</div><div class="line">                    sql  =&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot; WHERE &quot;+first_record+&quot;=&apos;&quot;+content_Arrays[0]+&quot;&apos;;&quot;;</div><div class="line">                    rs=st.executeQuery(sql);</div><div class="line">                        </div><div class="line">                        if(rs.next())&#123;//光标移动</div><div class="line">                            //存在相同记录</div><div class="line">                            System.out.println(&quot;**********************很抱歉，&quot;+table+&quot;表已经存在&quot;+content_Arrays[0]+&quot;记录,INSERT失败,不进行重复插入！*************************8888&quot;);</div><div class="line">                        &#125;else&#123;</div><div class="line">                            //不存在相同记录</div><div class="line">                            System.out.println(&quot;**********************&quot;+table+&quot;表中不存在&quot;+content_Arrays[0]+&quot;记录,正在进行INSERT。。。。。。。。。。。。。&quot;);</div><div class="line">                            sql=&quot;INSERT INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+mark+&quot;);&quot;;</div><div class="line">                            </div><div class="line">                            pst=conn.prepareStatement(sql);</div><div class="line">                            </div><div class="line">                            for(int i=1;i&lt;=mark_Arrays.length;i++)&#123;//根据占位符个数【?的数量】进行循环: ?号个数            </div><div class="line">                                pst.setString(i,mark_Arrays[i-1]);</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                            pst.executeUpdate();</div><div class="line">                            System.out.println(&quot;*****************&quot;+table+&quot;表INSERT成功！****************&quot;);</div><div class="line">                        &#125;</div><div class="line">            &#125;</div><div class="line">                </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">************************************c-3***********************************************************</div><div class="line">package Utils;</div><div class="line"></div><div class="line"></div><div class="line">/**更新时间:2016.11.26</div><div class="line"> *          操作字符串</div><div class="line"> *              方法1：转换</div><div class="line"> *              方法2：判断</div><div class="line"> *      @author Suvan</div><div class="line"> */</div><div class="line">public class UseString &#123;</div><div class="line">    </div><div class="line">    //方法1-1:将首字母变为大写</div><div class="line">        public String UpFirstString(String content)&#123; //参数: 内容</div><div class="line">            String firstLetter=content.substring(0,1);</div><div class="line">            content=content.replaceFirst(firstLetter,firstLetter.toUpperCase());//替换首字母</div><div class="line">            </div><div class="line">            return content;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法1-2:将首字母变为小写</div><div class="line">        public String LowFirstString(String content)&#123; //参数: 内容</div><div class="line">            String firstLetter=content.substring(0,1);</div><div class="line">            content=content.replaceFirst(firstLetter,firstLetter.toLowerCase());//替换首字母</div><div class="line">            </div><div class="line">            return content;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法:1-3:将字符串变为int类型</div><div class="line">        public int getInt(String content)&#123;</div><div class="line">            return Integer.parseInt(content);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-1：判断num编号属否在scope区间里面，返回布尔类型参数【true--属于，false--不属于】</div><div class="line">        public Boolean getMinMaxScope(String scope,int num)&#123;//参数：范围，编号</div><div class="line">            Boolean sign = false;//判断标识，默认为true</div><div class="line">            </div><div class="line">            String [] scope_arrays = scope.split(&quot;-&quot;);</div><div class="line">            int minScope =Integer.parseInt(scope_arrays[0]);</div><div class="line">            int maxScope =Integer.parseInt(scope_arrays[1]);</div><div class="line">            </div><div class="line">                if(minScope &lt;= num &amp;&amp; num &lt;= maxScope)&#123;</div><div class="line">                    sign =true;</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">            return sign;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br><br></p>
<h1 id="版本4-0【2016-12-13】"><a href="#版本4-0【2016-12-13】" class="headerlink" title="版本4.0【2016.12.13】"></a>版本4.0【2016.12.13】</h1><p>&emsp;耗时半天左右，突发奇想，优化+学习,最后勉强搞定，但是仍然有优化的空间</p>
<p>版本改动</p>
<ul>
<li>优化了代码,每个类都用工具类的属性,GoTask里创建对象的时候传参赋值,删除了CreateFile.java</li>
<li>兼容2种数据库【SQLite和MySQL】,SQLite嵌入到项目中,移植性高</li>
<li>MySQL需要自己新建数据库and表,SQLite运行即自动创建【不会重复创建or插入】</li>
<li>使用SQLite第一次创建会在项目相应目录下建库,建表，读取excel数据插入,会有点慢,二次运行快到飞起</li>
<li>添加了excel数据读取【目前是jxl,项目中也包含poi,可根据需求修改GeTableData.java的s_InsertExcel()方法】</li>
<li>可设置程序猿的编号范围匹配和地区匹配</li>
</ul>
<p><br></p>
<p>项目结构规划<br>BatchCreate_file<br>&emsp;extend.example<br>&emsp;&emsp;GetFirstLetter.java<br>&emsp;main<br>&emsp;&emsp;AlterContent.java<br>&emsp;&emsp;GetTableData.java<br>&emsp;&emsp;NumBean.java<br>&emsp;&emsp;GoTask.java【任务流程 GO()】<br>&emsp;&emsp;test.java【运行项目的测试方法】<br>&emsp;Utils<br>&emsp;&emsp;IOFile.java<br>&emsp;&emsp;UseDB.java<br>&emsp;&emsp;UseExcel.java【新增,用于excel文件的读写】<br>&emsp;&emsp;UseString.java</p>
<p><br><br><br></p>
<p>下面贴出主要改动的代码</p>
<h2 id="main包"><a href="#main包" class="headerlink" title="main包"></a>main包</h2><p>1.AlterContent.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line">package main;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseDB;</div><div class="line">import Utils.UseString;</div><div class="line"></div><div class="line">/**更新时间： 2016.12.13</div><div class="line"> * </div><div class="line"> *  获取模版内容，根据编号各个属性值，修改BackupTask.java和入库文件，创建文件</div><div class="line"> *          @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class AlterContent &#123;</div><div class="line">        </div><div class="line">        private IOFile iof;</div><div class="line">        private UseDB udb;</div><div class="line">        private UseString us;</div><div class="line">        private GetTableData gtd;</div><div class="line">        </div><div class="line">        //有参构造函数，创建对象时进行赋值</div><div class="line">        public AlterContent(IOFile iof,UseDB udb,UseString us,GetTableData gtd)&#123;  </div><div class="line">            this.iof=iof;</div><div class="line">            this.udb=udb;</div><div class="line">            this.us=us;</div><div class="line">            this.gtd=gtd;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line"></div><div class="line">        //方法1:修改BackupTask.java,并创建</div><div class="line">        public  void aBackupTask(String path,String fileName,String content,String sign,ArrayList&lt;String&gt; rukuName_list) throws IOException&#123;//参数:路径，文件名，内容，标记【修改还是创建】,入库名,项目类           </div><div class="line">                </div><div class="line">             //1.修改模版内容</div><div class="line">            String BackupTask_model=&quot;\n\t\t&quot;+&quot;NameA=(NameB) ac.getBean(\&quot;fileName\&quot;);&quot; +</div><div class="line">                                                              &quot;\n\t\t&quot; +&quot;NameA.initNameB();&quot;;</div><div class="line">                String attributeName=&quot;&quot;;//属性名</div><div class="line">                String cStr =&quot;&quot;;</div><div class="line">                StringBuilder sb = new StringBuilder();//储存各个所有内容</div><div class="line">                for(int i=0;i&lt;rukuName_list.size();i++)&#123;</div><div class="line">                    attributeName =rukuName_list.get(i).substring(rukuName_list.get(i).lastIndexOf(&quot;_&quot;)+1);</div><div class="line">                    cStr=BackupTask_model.replace(&quot;NameA&quot;,us.LowFirstString(attributeName))</div><div class="line">                                                              .replace(&quot;NameB&quot;,us.UpFirstString(attributeName))</div><div class="line">                                                              .replace(&quot;fileName&quot;,rukuName_list.get(i));</div><div class="line">                    sb.append(cStr);</div><div class="line">                &#125;</div><div class="line">                sb.append(&quot;\n\t\t//ok;&quot;);//用于叠加补充</div><div class="line">                </div><div class="line">                //2.覆盖或者修改文件</div><div class="line">                if(&quot;cover&quot;.equals(sign))&#123;//覆盖 【与上一个编号完全不同(号码不同,且不带-)】</div><div class="line">                    content=content.replace(&quot;//changeModel;&quot;,sb.toString());</div><div class="line">                     iof.cFile(path, &quot;BackupTask.java&quot;, &quot;UTF-8&quot;, content);</div><div class="line">                &#125;else if(&quot;alter&quot;.equals(sign))&#123; //修改 【带-的编号,在上一个文件基础上进行叠加修改】</div><div class="line">                    content=content.replace(&quot;//ok;&quot;,sb.toString());</div><div class="line">                    iof.cFile(path, &quot;BackupTask.java&quot;, &quot;UTF-8&quot;, content);</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法2:修改入库文件</div><div class="line">        public void aRK(String path,String fileName,String content,String type,String username,NumBean numbean) throws IOException&#123;</div><div class="line">            </div><div class="line"></div><div class="line">                //一.根据类型生成相应名称</div><div class="line">                HashMap&lt;String,String&gt; hm = gtd.getTypeAllName(type);</div><div class="line"></div><div class="line">                </div><div class="line">                //二.根据需求修改content</div><div class="line">                        //A.判断信息类型</div><div class="line">                        String infType =numbean.getInftype();</div><div class="line">                        if(infType !=null  &amp;&amp; ! &quot;-0-&quot;.equals(infType))&#123;                                     //zbgg.setInfoType(&quot;服务&quot;);// 信息类型</div><div class="line">                            content=content.replaceFirst(&quot;//是否有信息类型;&quot;,&quot;zbgg.setInfoType(\&quot;&quot;+infType+&quot;\&quot;);//信息类型&quot;);</div><div class="line">                        &#125;else&#123;</div><div class="line">                            content=content.replaceFirst(&quot;//是否有信息类型;&quot;,&quot;//zbgg.setInfoType(\&quot;服务\&quot;);//信息类型&quot;);</div><div class="line">                        &#125;</div><div class="line">                    </div><div class="line">                        //B.判断行业分类</div><div class="line">                        String workType=numbean.getWorktype();</div><div class="line">                        if(workType==null &amp;&amp; ! &quot;-0-&quot;.equals(workType)) &#123;                                 //zbgg.setIndustry(&quot;建筑建材&quot;); // 行业分类</div><div class="line">                            content=content.replaceFirst(&quot;//是否有行业分类;&quot;,&quot;zbgg.setIndustry(\&quot;&quot;+workType+&quot;\&quot;); //行业分类&quot;);</div><div class="line">                        &#125;else&#123;</div><div class="line">                            content=content.replaceFirst(&quot;//是否有行业分类;&quot;,&quot;//zbgg.setIndustry(\&quot;建筑建材\&quot;); // 行业分类&quot;);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    </div><div class="line">                //三.修改模版</div><div class="line">                content=content.replace(&quot;zhaoBiaoGongGao&quot;,hm.get(&quot;typeSpell&quot;))</div><div class="line">                                                                             .replace(&quot;ZhaoBiaoGongGao&quot;,us.UpFirstString(hm.get(&quot;typeSpell&quot;)))</div><div class="line">                                                                             .replace(&quot;ZhaobGgService&quot;,us.UpFirstString(hm.get(&quot;typeService&quot;)))</div><div class="line">                                                                             .replace(&quot;zhaobGgService&quot;,hm.get(&quot;typeService&quot;))</div><div class="line">                                                                             .replace(&quot;zbgg&quot;,type);</div><div class="line">                content=content.replaceFirst(&quot;//@程序猿;&quot;,username)</div><div class="line">                                            .replaceFirst(&quot;//@内容;&quot;,numbean.getArea()+&quot;_&quot;+numbean.getProvince()+&quot;_&quot;+numbean.getCity()+&quot;_&quot;+numbean.getCounty()+&quot;_&quot;+hm.get(&quot;typeChinese&quot;)+&quot;_&quot;+numbean.getNum())                </div><div class="line">                                            .replaceFirst(&quot;//编号;&quot;,numbean.getNum());        </div><div class="line">                String className =fileName.substring(0,fileName.lastIndexOf(&quot;.&quot;));</div><div class="line">                content=content.replaceFirst(&quot;//注解;&quot;,className)</div><div class="line">                                            .replaceFirst(&quot;//类名;&quot;,className);</div><div class="line">                content=content.replaceFirst(&quot;//Area;&quot;,numbean.getArea())</div><div class="line">                                             .replaceFirst(&quot;//Province;&quot;,numbean.getProvince().replaceFirst(&quot;省&quot;,&quot;&quot;).replaceFirst(&quot;市&quot;,&quot;&quot;).replaceFirst(&quot;区&quot;,&quot;&quot;).replaceFirst(&quot;县&quot;,&quot;&quot;))</div><div class="line">                                            .replaceFirst(&quot;//Webname;&quot;,numbean.getWebname())</div><div class="line">                                            .replaceFirst(&quot;//Infsource;&quot;,numbean.getInfsource())</div><div class="line">                                            .replace(&quot;//表名;&quot;,hm.get(&quot;tableName&quot;));</div><div class="line">                </div><div class="line">                //仅有2个字符的时候保留，省,市，区</div><div class="line">                if(numbean.getCity().length()==2)&#123;</div><div class="line">                    content=content.replaceFirst(&quot;//City;&quot;,numbean.getCity());</div><div class="line">                &#125;else&#123;</div><div class="line">                    content=content.replaceFirst(&quot;//City;&quot;,numbean.getCity().replaceFirst(&quot;省&quot;,&quot;&quot;).replaceFirst(&quot;市&quot;,&quot;&quot;).replaceFirst(&quot;区&quot;,&quot;&quot;).replaceFirst(&quot;县&quot;,&quot;&quot;));</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                if(numbean.getCounty().length()==2)&#123;</div><div class="line">                    content=content.replaceFirst(&quot;//County;&quot;,numbean.getCounty());</div><div class="line">                &#125;else&#123;</div><div class="line">                    content=content.replaceFirst(&quot;//County;&quot;,numbean.getCounty().replaceFirst(&quot;省&quot;,&quot;&quot;).replaceFirst(&quot;市&quot;,&quot;&quot;).replaceFirst(&quot;区&quot;,&quot;&quot;).replaceFirst(&quot;县&quot;,&quot;&quot;));</div><div class="line">                &#125;</div><div class="line">                        </div><div class="line">                        </div><div class="line">                </div><div class="line">                            </div><div class="line">                //四.创建编号相应类型的入库文件</div><div class="line">                iof.cFile(path, fileName, &quot;UTF-8&quot;, content);</div><div class="line">        &#125;       </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br></p>
<h2 id="2-GetTableData-java"><a href="#2-GetTableData-java" class="headerlink" title="2.GetTableData.java"></a>2.GetTableData.java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div></pre></td><td class="code"><pre><div class="line">package main;</div><div class="line"></div><div class="line">import java.io.File;</div><div class="line">import java.io.IOException;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.regex.Matcher;</div><div class="line">import java.util.regex.Pattern;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseDB;</div><div class="line">import jxl.Cell;</div><div class="line">import jxl.Sheet;</div><div class="line">import jxl.Workbook;</div><div class="line">import jxl.read.biff.BiffException;</div><div class="line"></div><div class="line">/**更新时间： 2016.12.13</div><div class="line"> * </div><div class="line"> *  获取数据，处理数据，归纳信息</div><div class="line"> *          @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class GetTableData &#123;</div><div class="line"></div><div class="line">    private IOFile iof;</div><div class="line">    private UseDB udb;</div><div class="line">    </div><div class="line">    //有参构造函数，创建对象时进行赋值</div><div class="line">    public GetTableData(IOFile iof,UseDB udb)&#123;</div><div class="line">        this.iof=iof;</div><div class="line">        this.udb=udb;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法1: 插入模版数据,并返回模版内容</div><div class="line">        public String getModel(String filePath) throws IOException,SQLException&#123;//参数：文件路径</div><div class="line">            </div><div class="line">            //1.读取文件内容                                                                                                      </div><div class="line">            String fileContent=iof.readFileContent_String(filePath,&quot;GBK&quot;);   //注意：路径的话用/或者\\都可以,数据库的默认编码是GBK</div><div class="line">            String modeName=filePath.substring(filePath.indexOf(&quot;/&quot;)+1);            //模版名字</div><div class="line"></div><div class="line">            //2.判断是否存在相同模版</div><div class="line">            String modeInf = udb.select(&quot;article&quot;, &quot;model&quot;, &quot;model=&apos;&quot;+modeName+&quot;&apos;&quot;);</div><div class="line"></div><div class="line">            if(modeInf.length() &lt;1)&#123;    //判断是否已存在模版</div><div class="line">                udb.insert(&quot;article&quot;,&quot;model,detail&quot;,&quot;&apos;&quot;+modeName+&quot;&apos;,&apos;&quot;+fileContent.replace(&quot;&apos;&quot;, &quot;&apos;&apos;&quot;)+&quot;&apos;&quot;); </div><div class="line">            &#125;else&#123;</div><div class="line">                System.out.println(&quot;\n********************************已存在&quot;+modeInf+&quot;模版，不进行重复插入****************************&quot;);</div><div class="line">            &#125;</div><div class="line">        </div><div class="line">            return fileContent;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">    //方法2：获取table表中，num编号的所有信息,储存进NumBean，返回NumBean</div><div class="line">    public  NumBean getNumInformation(String table,String num) throws SQLException&#123;//参数：表名,编号</div><div class="line"></div><div class="line">            //查询table表，num字段所有数据，用&amp;分隔</div><div class="line">            String numInf = udb.select(table, &quot;num&quot;, &quot;num=&apos;&quot;+num+&quot;&apos;&quot;, &apos;*&apos;);</div><div class="line">            String [] numInf_arrays=numInf.split(&quot;&amp;&quot;);</div><div class="line">            </div><div class="line">            //表共21列，Numbean共21个属性，拥有Getters和Setters</div><div class="line">            NumBean nb = new NumBean();</div><div class="line">                nb.setNum(numInf_arrays[0]);</div><div class="line">                nb.setArea(numInf_arrays[1]);</div><div class="line">                nb.setProvince(numInf_arrays[2]);</div><div class="line">                nb.setCity(numInf_arrays[3]);</div><div class="line">                nb.setCounty(numInf_arrays[4]);</div><div class="line">                nb.setWebname(numInf_arrays[5]);</div><div class="line">                nb.setWeburl(numInf_arrays[6]);</div><div class="line">                nb.setInfsource(numInf_arrays[7]);</div><div class="line">                nb.setInftype(numInf_arrays[8]);</div><div class="line">                nb.setWorktype(numInf_arrays[9]);</div><div class="line">                nb.setZbyg(numInf_arrays[10]);</div><div class="line">                nb.setZbgg(numInf_arrays[11]);</div><div class="line">                nb.setZsjg(numInf_arrays[12]);</div><div class="line">                nb.setGgbg(numInf_arrays[13]);</div><div class="line">                nb.setZbwj(numInf_arrays[14]);</div><div class="line">                nb.setZbdy(numInf_arrays[15]);</div><div class="line">                nb.setZbxx(numInf_arrays[16]);</div><div class="line">                nb.setKzj(numInf_arrays[17]);</div><div class="line">                nb.setLot(numInf_arrays[18]);</div><div class="line">                nb.setWebtype(numInf_arrays[19]);</div><div class="line">                nb.setRemark(numInf_arrays[20]);</div><div class="line">        </div><div class="line">        return nb;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法3：获取table表的，所有编号</div><div class="line">    public ArrayList&lt;String&gt; getAllNum(String table) throws SQLException&#123; //参数: 表名</div><div class="line">            ArrayList&lt;String&gt; numList = new  ArrayList&lt;String&gt;();</div><div class="line">            </div><div class="line">            String allNum =udb.selectAllColumn(table,&quot;num&quot;);</div><div class="line">            String [] allNum_arrays = allNum.split(&quot;##&quot;);</div><div class="line">            for(int i=0;i&lt;allNum_arrays.length;i++)&#123;</div><div class="line">                numList.add(allNum_arrays[i]);</div><div class="line">            &#125;</div><div class="line">            return numList;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法4:判断num编号属否在scope区间里面，返回布尔类型参数【true-属于，false-不属于】</div><div class="line">    public Boolean getMinMaxScope(String scope,int num)&#123;//参数：范围，编号</div><div class="line">            Boolean sign = false;//判断标识，默认为true</div><div class="line">            </div><div class="line">            String [] scope_arrays = scope.split(&quot;-&quot;);</div><div class="line">            int minScope =Integer.parseInt(scope_arrays[0]);</div><div class="line">            int maxScope =Integer.parseInt(scope_arrays[1]);</div><div class="line">            </div><div class="line">                if(minScope &lt;= num &amp;&amp; num &lt;= maxScope)&#123;</div><div class="line">                    sign =true;</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">            return sign;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法5:获取当前编号拥有URL的字段名【类型】</div><div class="line">    public ArrayList&lt;String&gt; getNum_HaveURLRecord(String table,String num) throws SQLException&#123; //参数：表名，编号</div><div class="line"></div><div class="line">        //查询数据库table表，num字段的11-18行，得到拥有记录的列名的ArrayList</div><div class="line">        ArrayList&lt;String&gt; alist=udb.selectAskinformation_Scope(table,&quot;num=&apos;&quot;+num+&quot;&apos;&quot;, &quot;11-18&quot;);//【11-18是招标预告到控制价】</div><div class="line"></div><div class="line">        return alist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //方法6：根据列名，得到相应类型的字符串</div><div class="line">    public String getTypename(String columnName)&#123; //参数：列名</div><div class="line">                String type=&quot;&quot;;</div><div class="line"></div><div class="line">                if(columnName.equals(&quot;zbyg&quot;))&#123;</div><div class="line">                    type=&quot;ZhaobYgService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zbgg&quot;))&#123;</div><div class="line">                    type=&quot;ZhaobGgService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zsjg&quot;))&#123;</div><div class="line">                    type=&quot;ZisJgService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;ggbg&quot;))&#123;</div><div class="line">                    type=&quot;GonggBgService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zbwj&quot;))&#123;</div><div class="line">                    type=&quot;ZhaobWjService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zbdy&quot;))&#123;</div><div class="line">                    type=&quot;ZhaobDyService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zbxx&quot;))&#123;</div><div class="line">                    type=&quot;ZhongbXxService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;kzj&quot;))&#123;</div><div class="line">                    type=&quot;KongZjService&quot;;</div><div class="line">                &#125;</div><div class="line">        </div><div class="line">        return type;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line">    //方法7：根据类型生成相应名称，返回HaspMap【无序键值队】</div><div class="line">    public HashMap&lt;String,String&gt; getTypeAllName(String type)&#123;  //参数：类型名，也是列名</div><div class="line">        HashMap&lt;String,String&gt; hm = new HashMap&lt;String,String&gt;();</div><div class="line"></div><div class="line">                if(type.equals(&quot;zbyg&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;zhaoBiaoYuGao&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhaobYgService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;招标预告&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhao_biao_yu_gao&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zbgg&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;zhaoBiaoGongGao&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhaobGgService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;招标公告&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhao_biao_gong_gao&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zsjg&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;ziShenJieGuo&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zisJgService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;咨审结果&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zi_shen_jie_guo&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;ggbg&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;gongGaoBianGeng&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;gonggBgService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;公告变更&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_gong_gao_bian_geng&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zbwj&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;zhaoBiaoWenJian&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhaobWjService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;招标文件&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhao_biao_wen_jian&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zbdy&quot;))&#123;</div><div class="line">                    hm.put(&quot;typeSpell&quot;, &quot;ZhaoBiaoDaYi&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhaobDyService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;招标答疑&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhao_biao_da_yi&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zbxx&quot;))&#123;</div><div class="line">                    hm.put(&quot;typeSpell&quot;, &quot;zhongBiaoXinXi&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhongbXxService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;中标信息&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhong_biao_xin_xi&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;kzj&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;kongZhiJia&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;kongZjService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;控制价&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_kong_zhi_jia&quot;);</div><div class="line">                &#125;               </div><div class="line">        </div><div class="line">        return hm;      </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">//************************************************************************************************************************</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法SQLite-1：创建表结构</div><div class="line">    public void s_CreateTable(String useTable) throws SQLException&#123;</div><div class="line">        </div><div class="line">         //创建模版表</div><div class="line">        String sql1= &quot;CREATE TABLE if not exists article(&quot;  +            </div><div class="line">                                &quot;id  INCREMENT primary key,&quot; +</div><div class="line">                                &quot;model TEXT NOT NULL,&quot;              +</div><div class="line">                                &quot; detail TEXT NOT NULL&quot;     +</div><div class="line">                                &quot;);&quot; ;</div><div class="line">        //获取Excel数据表</div><div class="line">        String sql2=&quot;CREATE TABLE if not exists &quot;+useTable+&quot;(&quot; +</div><div class="line">                             &quot;num TEXT primary key,&quot; +</div><div class="line">                             &quot;area TEXT NOT NULL,&quot; +</div><div class="line">                             &quot;province TEXT,&quot; +</div><div class="line">                             &quot;city TEXT,&quot; +</div><div class="line">                             &quot;county TEXT,&quot; +</div><div class="line">                             &quot;webname TEXT,&quot; +</div><div class="line">                             &quot;weburl  TEXT,&quot; +</div><div class="line">                             &quot;infsource TEXT,&quot; +</div><div class="line">                             &quot;inftype   TEXT,&quot; +</div><div class="line">                             &quot;worktype TEXT,&quot; +</div><div class="line">                             &quot;zbyg  TEXT,&quot; +</div><div class="line">                             &quot;zbgg    TEXT,&quot; +</div><div class="line">                             &quot;zsjg  TEXT,&quot; +</div><div class="line">                             &quot;ggbg TEXT,&quot; +</div><div class="line">                             &quot;zbwj TEXT,&quot; +</div><div class="line">                             &quot;zbdy TEXT,&quot; +</div><div class="line">                             &quot;zbxx TEXT,&quot; +</div><div class="line">                             &quot;kzj TEXT,&quot; +</div><div class="line">                             &quot;lot TEXT,&quot; +</div><div class="line">                             &quot;webtype TEXT,&quot; +</div><div class="line">                             &quot;remark TEXT&quot;  +</div><div class="line">                             &quot;  )&quot;;</div><div class="line">        </div><div class="line">          udb.createSQL(sql1); </div><div class="line">          udb.createSQL(sql2); </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法SQLite-2.读取Excel表的数据，插入SQLite</div><div class="line">    public void s_InsertExcel(String useExcel,String useTable) throws IOException,BiffException,SQLException&#123;//参数：Excel文件名,表名</div><div class="line">        </div><div class="line">            File xlsFile = new File(&quot;Excel/&quot;+useExcel);</div><div class="line">            //2.获得工作薄对象</div><div class="line">            Workbook workbook = Workbook.getWorkbook(xlsFile);</div><div class="line">            </div><div class="line">            //3.获得所有工作表</div><div class="line">            Sheet [] sheets = workbook.getSheets();</div><div class="line">            if(sheets.length&gt;0)&#123;</div><div class="line">                System.out.println(&quot;将Excel数据插入SQLite数据库---------------------------&gt;&quot;);</div><div class="line">                Sheet sheet = sheets[0];    //第1个工作表</div><div class="line">                int rows = sheet.getRows(); //总行数</div><div class="line">//              int cols = sheet.getRows(); //总列数</div><div class="line">                </div><div class="line">                </div><div class="line">                </div><div class="line">                for(int row=0;row&lt;rows;row++)&#123;  </div><div class="line">                    Cell    [] cells =sheet.getRow(row);</div><div class="line">                    </div><div class="line">                    //正则判断n行的第1列的数据是否是编号【开头是否为数字】，不是则跳过</div><div class="line">                    Pattern p = Pattern.compile(&quot;\\d+&quot;);</div><div class="line">                    Matcher m = p.matcher(cells[0].getContents());</div><div class="line">                    if(m.find())&#123;</div><div class="line">                        System.out.print(row+&quot;行......&quot;);</div><div class="line">                        if(row %50 ==0) System.out.println();   //若50条记录换行一次</div><div class="line">                        udb.insert(useTable,</div><div class="line">                                    &quot;&apos;&quot;+cells[0].getContents()+&quot;&apos;,&apos;&quot;+cells[1].getContents()+&quot;&apos;,&apos;&quot;+cells[2].getContents()+&quot;&apos;,&apos;&quot;+cells[3].getContents()+&quot;&apos;,&apos;&quot;+cells[4].getContents()+&quot;&apos;,&apos;&quot;</div><div class="line">                                        +cells[5].getContents()+&quot;&apos;,&apos;&quot;+cells[6].getContents()+&quot;&apos;,&apos;&quot;+cells[7].getContents()+&quot;&apos;,&apos;&quot;+cells[8].getContents()+&quot;&apos;,&apos;&quot;+cells[9].getContents()+&quot;&apos;,&apos;&quot;</div><div class="line">                                        +cells[10].getContents()+&quot;&apos;,&apos;&quot;+cells[11].getContents()+&quot;&apos;,&apos;&quot;+cells[12].getContents()+&quot;&apos;,&apos;&quot;+cells[13].getContents()+&quot;&apos;,&apos;&quot;+cells[14].getContents()+&quot;&apos;,&apos;&quot;</div><div class="line">                                        +cells[15].getContents()+&quot;&apos;,&apos;&quot;+cells[16].getContents()+&quot;&apos;,&apos;&quot;+cells[17].getContents()+&quot;&apos;,&apos;&quot;+cells[18].getContents()+&quot;&apos;,&apos;&quot;+cells[19].getContents()+&quot;&apos;,&apos;&quot;+cells[20].getContents()+&quot;&apos;&quot;);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<p>3.GoTask.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div></pre></td><td class="code"><pre><div class="line">package main;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseDB;</div><div class="line">import Utils.UseString;</div><div class="line">import extend.example.GetFirstLetter;</div><div class="line"></div><div class="line"></div><div class="line">/**更新时间：2016.12.13</div><div class="line"> *      </div><div class="line"> * 任务流程</div><div class="line"> *           @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class GoTask &#123;</div><div class="line">    </div><div class="line">    </div><div class="line"></div><div class="line">//  private String numScope=&quot;00000-05000&quot;;                                                  //编号范围区间</div><div class="line">//  private String username=&quot;某男子&quot;;                                                                  //程序员名称</div><div class="line">    private String path=&quot;C:/Users/Liu-shuwei/Desktop\\&quot;;                                             //路径</div><div class="line">    private String catalogName=&quot;入库【3.3版,823表(区分程序猿and地区)】&quot;;             //文件名</div><div class="line">    private Boolean areaMatch=false;                                                                    //是否开启区域匹配【默认不开启】</div><div class="line">    private Boolean numMatch=false;                                                                 //是否开启默认匹配【默认不开启】</div><div class="line">    private String useExcel;                                                                                    //使用项目根目录下哪个Excel</div><div class="line">    private String useTable;                                                                                    //使用哪个表的数据【SQLite的话，不存在表则自动创建】</div><div class="line">    </div><div class="line">    public void setPath(String path)&#123;</div><div class="line">        this.path=path;</div><div class="line">    &#125;</div><div class="line">    public void setCatalogName(String cn)&#123;</div><div class="line">        this.catalogName=cn;</div><div class="line">    &#125;</div><div class="line">    public void setAreaMatch(Boolean b)&#123;</div><div class="line">        this.areaMatch=b;</div><div class="line">    &#125;</div><div class="line">    public void setNumMatch(Boolean b)&#123;</div><div class="line">        this.numMatch=b;</div><div class="line">    &#125;</div><div class="line">    public void setUseExcel(String excel)&#123;</div><div class="line">        this.useExcel=excel;</div><div class="line">    &#125;</div><div class="line">    public void setUseTable(String table)&#123;</div><div class="line">        this.useTable=table;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //任务1： 使用MySQL数据库</div><div class="line">    public void GO(String username,String numScope,String numArea) &#123;    //参数:程序猿，编号范围，地区</div><div class="line">            System.out.println(username+&quot;--------------------------------------------------&gt;Go!&quot;);</div><div class="line">        </div><div class="line">        //执行任务流程</div><div class="line">        try&#123;</div><div class="line">            </div><div class="line">            //一.获取对象</div><div class="line">            UseDB udb = new UseDB(&quot;mysql&quot;);</div><div class="line">            IOFile iof=new IOFile();</div><div class="line">            UseString us = new UseString();</div><div class="line">            </div><div class="line">            GetFirstLetter gfl = new GetFirstLetter();</div><div class="line"></div><div class="line">            GetTableData  gtd = new GetTableData(iof,udb);</div><div class="line">            AlterContent ac = new AlterContent(iof,udb,us,gtd);</div><div class="line">            </div><div class="line">            </div><div class="line">            udb.connDatabase(&quot;batchcreate_file&quot;);//连接数据库</div><div class="line">            </div><div class="line">            </div><div class="line">            //二.创建大目录,往数据库插入模版数据</div><div class="line">            iof.createCatalog(path, catalogName);</div><div class="line">            iof.createCatalog(path+&quot;/&quot;+catalogName, username);</div><div class="line">            String model1_BT =gtd.getModel(&quot;model_file/BackupTask.java&quot;);</div><div class="line">            String model2_RK =gtd.getModel(&quot;model_file/ZhaobGgServiceModel.java&quot;);</div><div class="line">            </div><div class="line">            </div><div class="line">            </div><div class="line">            //三.获取数据表数据，并生成目录and文件</div><div class="line">                //三-1获取所有编号</div><div class="line">                ArrayList&lt;String&gt; numList =gtd.getAllNum(useTable) ; </div><div class="line">                </div><div class="line">                </div><div class="line">                //三-2.遍历所有编号</div><div class="line">                for(int i=0;i&lt;numList.size();i++)&#123;</div><div class="line">                </div><div class="line">                    String num=numList.get(i);                                                      //当前编号</div><div class="line">                    String num_=numList.get(i) .replace(&quot;-&quot;,&quot;_&quot;);                           //编号下划线形态</div><div class="line">                    StringBuilder changePath =new StringBuilder(&quot;&quot;);                                            //变化路径</div><div class="line">                    </div><div class="line">                    //P1:判断是否开启编号范围匹配 and 比较当前编号是否在范围区间</div><div class="line">                    if( numMatch &amp;&amp; !gtd.getMinMaxScope(numScope, us.getInt(num.substring(0,5))))&#123;  //获取前5个数字</div><div class="line">                        continue;</div><div class="line">                    &#125;</div><div class="line">                    //P2:判断是否开启地区匹配 and 进行地区匹配</div><div class="line">                        if(areaMatch)&#123;</div><div class="line">                            String area =udb.select(useTable,&quot;area&quot;,&quot;num=&apos;&quot;+num+&quot;&apos;&quot;);</div><div class="line">                            if(!area.equals(numArea))&#123;</div><div class="line">                                continue;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    </div><div class="line">                        </div><div class="line">                        //a.获取当前编号的所有数据，并储存到JavaBean</div><div class="line">                        NumBean numBean =gtd.getNumInformation(useTable, num);</div><div class="line">                        </div><div class="line">                        //b.生成入库文件名，存储进ArrayList</div><div class="line">                         ArrayList&lt;String&gt; ifURLType_list =gtd.getNum_HaveURLRecord(useTable, num);             //获取当前编号所有&quot;含有URL&quot;的字段的类型【例:招标公告 zbgg】</div><div class="line">                         ArrayList&lt;String &gt; rukuName_list=new ArrayList&lt;String&gt;();                                                      //用于储存当前编号所需要的所有入库文件名</div><div class="line">                         StringBuilder rukuName=new StringBuilder(&quot;&quot;);</div><div class="line">                         for(String type:ifURLType_list)&#123;</div><div class="line">                             rukuName.append(gfl.getFirstLetter(numBean.getArea()).toUpperCase()+&quot;_&quot;+num_+&quot;_&quot;+gtd.getTypename(type));   //入库文件完整名【地区首字母(大写)_编号_类型服务名】</div><div class="line">                             rukuName_list.add(rukuName.toString());</div><div class="line">                             rukuName=rukuName.delete(0, rukuName.length());                                                                                //清空</div><div class="line">                         &#125;</div><div class="line">                         </div><div class="line">                        </div><div class="line">                        //d.生成入库子目录</div><div class="line">                        String catalog_1=&quot;入库-&quot;+num.substring(0,5);                                                                  //目录名</div><div class="line">                        changePath.insert(0,path+&quot;/&quot;+catalogName+&quot;/&quot;+username);                                     //子路径1                </div><div class="line">                        iof.createCatalog(changePath.toString(),&quot;入库-&quot;+num.substring(0,5));                          //创建入库子目录【入库-编号】</div><div class="line">                        </div><div class="line">                        </div><div class="line">                        //生成BackupTask.java</div><div class="line">                         changePath.append(&quot;/&quot;+catalog_1);                               //子路径1-2</div><div class="line">                         String sign = &quot;cover&quot;;                                                          //判断当前编号是需要修改还是覆盖【默认是覆盖，带-编号是alter,不带-是cover】</div><div class="line">                            if(i &gt; 0)&#123;                                                                           //大于0的时候进行判断   【顶部位置没有上一个编号】</div><div class="line">                                if(us.getInt(numList.get(i-1).substring(0,5)) == us.getInt(num.substring(0,5)))&#123;            </div><div class="line">                                    sign=&quot;alter&quot;;                                                            //如果和上个编号相等，则修改</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                         if(&quot;cover&quot;.equals(sign))&#123;                      //覆盖</div><div class="line">                                    ac.aBackupTask(changePath.toString(),&quot;BackupTask.java&quot;, model1_BT,sign,rukuName_list);</div><div class="line">                         &#125;else if(&quot;alter&quot;.equals(sign))&#123;                //修改</div><div class="line">                             String ageBackupTask=iof.readFileContent_String(changePath+&quot;/BackupTask.java&quot;,&quot;GBK&quot;);                  //读取已经已经存在的BackupTask.java</div><div class="line">                             ac.aBackupTask(changePath.toString(),&quot;BackupTask.java&quot;,ageBackupTask ,sign,rukuName_list);</div><div class="line">                         &#125;</div><div class="line">                         </div><div class="line">                        </div><div class="line">                        //e.生成入库文件</div><div class="line">                        iof.createCatalog(changePath.toString(),&quot;imp&quot;);          //生成imp目录</div><div class="line">                        changePath.append(&quot;/imp&quot;);                                       //子路径1-2-3</div><div class="line">                        for(int k=0;k&lt;ifURLType_list.size();k++)&#123;                    //根据拥有URL的类型，循环生成入库文件</div><div class="line">                            ac.aRK(changePath.toString(), rukuName_list.get(k)+&quot;.java&quot;, model2_RK,ifURLType_list.get(k),username,numBean);</div><div class="line">                        &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            //四.关闭资源</div><div class="line">            udb.closeAll();</div><div class="line">            </div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">//***********************************************************************************************************************************</div><div class="line">    </div><div class="line">    </div><div class="line">    //任务2： 使用SQLite</div><div class="line">        public void GO_SQLite(String username,String numScope,String numArea) &#123; //参数:程序猿，编号范围，地区</div><div class="line">            System.out.println(username+&quot;--------------------------------------------------&gt;Go!&quot;);</div><div class="line">        </div><div class="line">        //执行任务流程</div><div class="line">        try&#123;</div><div class="line">            </div><div class="line">            //一.获取对象</div><div class="line">            UseDB udb = new UseDB(&quot;SQLite&quot;);</div><div class="line">            IOFile iof=new IOFile();</div><div class="line">            UseString us = new UseString();</div><div class="line">            </div><div class="line">            GetFirstLetter gfl = new GetFirstLetter();</div><div class="line"></div><div class="line">            GetTableData  gtd = new GetTableData(iof,udb);</div><div class="line">            AlterContent ac = new AlterContent(iof,udb,us,gtd);</div><div class="line">            </div><div class="line">            </div><div class="line">            udb.connDatabase(&quot;batchcreate_file.db&quot;);                        //连接数据库【若不存在则创建】</div><div class="line">            gtd.s_CreateTable(useTable);                                            //创建表【article-保存模版,(useTable)-Excel工作薄数据】</div><div class="line">            gtd.s_InsertExcel(useExcel,useTable);                                //插入Excel数据,【传入excel文件名和使用表名】</div><div class="line">            </div><div class="line">            //二.创建大目录,往数据库插入模版数据</div><div class="line">            iof.createCatalog(path, catalogName);</div><div class="line">            iof.createCatalog(path+&quot;/&quot;+catalogName, username);</div><div class="line">            String model1_BT =gtd.getModel(&quot;model_file/BackupTask.java&quot;);</div><div class="line">            String model2_RK =gtd.getModel(&quot;model_file/ZhaobGgServiceModel.java&quot;);</div><div class="line">            </div><div class="line">            </div><div class="line">            </div><div class="line">            //三.获取数据表数据，并生成目录and文件</div><div class="line">                //三-1获取所有编号</div><div class="line">                ArrayList&lt;String&gt; numList =gtd.getAllNum(useTable) ; </div><div class="line">                </div><div class="line">                </div><div class="line">                //三-2.遍历所有编号</div><div class="line">                for(int i=0;i&lt;numList.size();i++)&#123;</div><div class="line">                </div><div class="line">                    String num=numList.get(i);                                                      //当前编号</div><div class="line">                    String num_=numList.get(i) .replace(&quot;-&quot;,&quot;_&quot;);                           //编号下划线形态</div><div class="line">                    StringBuilder changePath =new StringBuilder(&quot;&quot;);                                            //变化路径</div><div class="line">                    </div><div class="line">                    //P1:判断是否开启编号范围匹配 and 比较当前编号是否在范围区间</div><div class="line">                    if( numMatch &amp;&amp; !gtd.getMinMaxScope(numScope, us.getInt(num.substring(0,5))))&#123;  //获取前5个数字</div><div class="line">                        continue;</div><div class="line">                    &#125;</div><div class="line">                    //P2:判断是否开启地区匹配 and 进行地区匹配</div><div class="line">                        if(areaMatch)&#123;</div><div class="line">                            String area =udb.select(useTable,&quot;area&quot;,&quot;num=&apos;&quot;+num+&quot;&apos;&quot;);</div><div class="line">                            if(!area.equals(numArea))&#123;</div><div class="line">                                continue;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    </div><div class="line">                        </div><div class="line">                        //a.获取当前编号的所有数据，并储存到JavaBean</div><div class="line">                        NumBean numBean =gtd.getNumInformation(useTable, num);</div><div class="line">                        </div><div class="line">                        //b.生成入库文件名，存储进ArrayList</div><div class="line">                         ArrayList&lt;String&gt; ifURLType_list =gtd.getNum_HaveURLRecord(useTable, num);             //获取当前编号所有&quot;含有URL&quot;的字段的类型【例:招标公告 zbgg】</div><div class="line">                         ArrayList&lt;String &gt; rukuName_list=new ArrayList&lt;String&gt;();                                                      //用于储存当前编号所需要的所有入库文件名</div><div class="line">                         StringBuilder rukuName=new StringBuilder(&quot;&quot;);</div><div class="line">                         for(String type:ifURLType_list)&#123;</div><div class="line">                             rukuName.append(gfl.getFirstLetter(numBean.getArea()).toUpperCase()+&quot;_&quot;+num_+&quot;_&quot;+gtd.getTypename(type));   //入库文件完整名【地区首字母(大写)_编号_类型服务名】</div><div class="line">                             rukuName_list.add(rukuName.toString());</div><div class="line">                             rukuName=rukuName.delete(0, rukuName.length());                                                                                //清空</div><div class="line">                         &#125;</div><div class="line">                         </div><div class="line">                        </div><div class="line">                        //d.生成入库子目录</div><div class="line">                        String catalog_1=&quot;入库-&quot;+num.substring(0,5);                                                                  //目录名</div><div class="line">                        changePath.insert(0,path+&quot;/&quot;+catalogName+&quot;/&quot;+username);                                     //子路径1                </div><div class="line">                        iof.createCatalog(changePath.toString(),&quot;入库-&quot;+num.substring(0,5));                          //创建入库子目录【入库-编号】</div><div class="line">                        </div><div class="line">                        </div><div class="line">                        //生成BackupTask.java</div><div class="line">                         changePath.append(&quot;/&quot;+catalog_1);                               //子路径1-2</div><div class="line">                         String sign = &quot;cover&quot;;                                                          //判断当前编号是需要修改还是覆盖【默认是覆盖，带-编号是alter,不带-是cover】</div><div class="line">                            if(i &gt; 0)&#123;                                                                           //大于0的时候进行判断   【顶部位置没有上一个编号】</div><div class="line">                                if(us.getInt(numList.get(i-1).substring(0,5)) == us.getInt(num.substring(0,5)))&#123;            </div><div class="line">                                    sign=&quot;alter&quot;;                                                            //如果和上个编号相等，则修改</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                         if(&quot;cover&quot;.equals(sign))&#123;                      //覆盖</div><div class="line">                                    ac.aBackupTask(changePath.toString(),&quot;BackupTask.java&quot;, model1_BT,sign,rukuName_list);</div><div class="line">                         &#125;else if(&quot;alter&quot;.equals(sign))&#123;                //修改</div><div class="line">                             String ageBackupTask=iof.readFileContent_String(changePath+&quot;/BackupTask.java&quot;,&quot;GBK&quot;);                  //读取已经已经存在的BackupTask.java</div><div class="line">                             ac.aBackupTask(changePath.toString(),&quot;BackupTask.java&quot;,ageBackupTask ,sign,rukuName_list);</div><div class="line">                         &#125;</div><div class="line">                         </div><div class="line">                        </div><div class="line">                        //e.生成入库文件</div><div class="line">                        iof.createCatalog(changePath.toString(),&quot;imp&quot;);          //生成imp目录</div><div class="line">                        changePath.append(&quot;/imp&quot;);                                       //子路径1-2-3</div><div class="line">                        for(int k=0;k&lt;ifURLType_list.size();k++)&#123;                    //根据拥有URL的类型，循环生成入库文件</div><div class="line">                            ac.aRK(changePath.toString(), rukuName_list.get(k)+&quot;.java&quot;, model2_RK,ifURLType_list.get(k),username,numBean);</div><div class="line">                        &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            //四.关闭资源</div><div class="line">            udb.closeAll();</div><div class="line">            </div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br></p>
<p>4.test.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">package main;</div><div class="line"></div><div class="line">public class test &#123;</div><div class="line">    </div><div class="line"></div><div class="line">    //测试主方法</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">        long begin=System.currentTimeMillis();</div><div class="line">        </div><div class="line">        //创建任务流程对象</div><div class="line">        GoTask gt= new GoTask();</div><div class="line">            gt.setPath(&quot;C:/Users/Liu-shuwei/Desktop\\&quot;);</div><div class="line">            gt.setCatalogName(&quot;入库【4.0版,823表(完全版-未筛选)】&quot;);</div><div class="line">            gt.setNumMatch(false);      //是否开启编号范围匹配</div><div class="line">            gt.setAreaMatch(false);     //是否开启地区匹配</div><div class="line">        </div><div class="line">        //方式1：使用本地MySQL******************************************************************************************</div><div class="line">        //执行流程(参数:程序猿,编号范围,地区)</div><div class="line">        gt.setUseTable(&quot;webapi3&quot;);  </div><div class="line">        gt.GO(&quot;陈宇&quot;,&quot;02065-02145&quot;,&quot;华中&quot;);</div><div class="line">        gt.GO(&quot;刘聪&quot;,&quot;02396-02461&quot;,&quot;华北&quot;);</div><div class="line">        gt.GO(&quot;房文迪&quot;,&quot;01311-02769&quot;,&quot;华东&quot;);</div><div class="line">//      gt.GO(&quot;林佳法&quot;,&quot;02311-02371&quot;,);</div><div class="line">        gt.GO(&quot;严加远&quot;,&quot;02770-02781&quot;,&quot;华东&quot;);</div><div class="line">        gt.GO(&quot;吴健俊&quot;,&quot;01281-01596&quot;,&quot;西南&quot;);</div><div class="line">        gt.GO(&quot;周盛&quot;,&quot;01597-03456&quot;,&quot;西南&quot;);</div><div class="line">        gt.GO(&quot;占文冲&quot;,&quot;01552-03100&quot;,&quot;西北&quot;);</div><div class="line"></div><div class="line"></div><div class="line">        //方式2：使用SQLite******************************************************************************************************************************</div><div class="line">//      gt.setUseTable(&quot;api&quot;);          //使用表名【SQLite的若不存在会自动创建】</div><div class="line">//      gt.setUseExcel(&quot;8.23.xls&quot;);             //使用哪个Excel【项目根目录/Excel/】</div><div class="line">//      gt.GO_SQLite(&quot;陈宇&quot;,&quot;02065-02145&quot;,&quot;华中&quot;);</div><div class="line">//      gt.GO_SQLite(&quot;刘聪&quot;,&quot;02396-02461&quot;,&quot;华北&quot;);</div><div class="line">//      gt.GO_SQLite(&quot;房文迪&quot;,&quot;01311-02769&quot;,&quot;华东&quot;);</div><div class="line">//      gt.GO_SQLite(&quot;严加远&quot;,&quot;02770-02781&quot;,&quot;华东&quot;);</div><div class="line">//      gt.GO_SQLite(&quot;吴健俊&quot;,&quot;01281-01596&quot;,&quot;西南&quot;);</div><div class="line">//      gt.GO_SQLite(&quot;周盛&quot;,&quot;01597-03456&quot;,&quot;西南&quot;);</div><div class="line">//      gt.GO_SQLite(&quot;占文冲&quot;,&quot;01552-03100&quot;,&quot;西北&quot;);</div><div class="line">        </div><div class="line">        </div><div class="line">        System.out.println(&quot;共花费:&quot;+(double)(System.currentTimeMillis()-begin)/1000+&quot;秒&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br></p>
<h2 id="Utils包"><a href="#Utils包" class="headerlink" title="Utils包"></a>Utils包</h2><p>1.UseDB.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div></pre></td><td class="code"><pre><div class="line">package Utils;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.DriverManager;</div><div class="line">import java.sql.PreparedStatement;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.ResultSetMetaData;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.sql.Statement;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line"></div><div class="line">/** 更新时间： 2016.12.08</div><div class="line"> *   </div><div class="line"> *  数据库封装类</div><div class="line"> *          单例模式,【兼容MySQL(导入mysql-connector-java-5.1.38-bin.jar)和SQLite(导入sqlite-jdbc-3.15.1.jar)】</div><div class="line"> *          方法1-基础使用</div><div class="line"> *          方法2-查询 【SELECT】</div><div class="line"> *          方法3-插入【INSERT】</div><div class="line"> *          方法4-执行SQL语句</div><div class="line"> *              </div><div class="line"> *              @author suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class UseDB &#123;</div><div class="line">    </div><div class="line">    //静态成员变量，支持单例模式</div><div class="line">    private static  volatile UseDB udb = null;</div><div class="line">    </div><div class="line">    </div><div class="line">    private static String databaseType;  //数据库类型【例如:Mysql,Oracle,SQLite之类的】</div><div class="line">    </div><div class="line">    private String drive;                            //数据库驱动</div><div class="line">    private String link;                             //【mysql—JDBC链接+IP地址+端口】</div><div class="line"></div><div class="line">    private String username;                  //用户名</div><div class="line">    private String password;                    //密码</div><div class="line">    </div><div class="line">    private Connection conn=null;</div><div class="line">    private Statement st=null;</div><div class="line">    private PreparedStatement pst=null;</div><div class="line">    private ResultSet rs=null;</div><div class="line">    private ResultSetMetaData rsmd=null;//获取列的信息</div><div class="line">    </div><div class="line">    private String sql; //sql语句</div><div class="line">    </div><div class="line">        </div><div class="line">        //有参构造函数进行赋值</div><div class="line">        public UseDB(String dbType)&#123;</div><div class="line">        </div><div class="line">            this.databaseType=dbType.toLowerCase(); //设定当前工具类使用什么类型的数据库</div><div class="line">            </div><div class="line">            if(&quot;mysql&quot;.equals(databaseType))&#123;   //转换为小写匹配</div><div class="line">                </div><div class="line">                this.drive=&quot;com.mysql.jdbc.Driver&quot;;             </div><div class="line">                this.link=&quot;jdbc:mysql://127.0.0.1:3306/&quot;;     </div><div class="line">                this.username=&quot;root&quot;;                                   </div><div class="line">                this.password=&quot;liushuwei&quot;;                  </div><div class="line">                </div><div class="line">            &#125;else if(&quot;sqlite&quot;.equals(databaseType))&#123;</div><div class="line">                </div><div class="line">                this.drive=&quot;org.sqlite.JDBC&quot;;                       //数据库驱动</div><div class="line">                this.link=&quot;jdbc:sqlite:SQLite/&quot;;     //jdbc:sqlite:+路径【默认项目根目录/SQLite】+数据库名</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        //A-1.懒汉式(加双重校验锁):【单例设计模式，获取实例,节约系统资源，提高性能】 ,项目中使用UseDB udb =UseDB.getInstance(&quot;javareptile&quot;);获取实例</div><div class="line">        public static synchronized UseDB getInstance() throws IOException,ClassNotFoundException,SQLException&#123;</div><div class="line">            if(udb == null)&#123;</div><div class="line">                    synchronized(UseDB.class)&#123;</div><div class="line">                        if(udb ==null)&#123;  //2   双重校验锁，实现延迟加载，解决线程并发，使用volatile指令静止重拍序列化</div><div class="line">                            udb = new UseDB(databaseType);</div><div class="line">                            udb.connDatabase(&quot;javareptile&quot;);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">            return udb;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line"></div><div class="line">        //方法1: 连接database数据库</div><div class="line">        public void connDatabase(String database)  throws SQLException,ClassNotFoundException&#123; //参数：数据库名称</div><div class="line">             Class.forName(drive);</div><div class="line">             if(&quot;mysql&quot;.equals(databaseType))&#123;</div><div class="line">                 conn=DriverManager.getConnection(link+database+&quot;?characterEncoding=UTF-8&amp;useSSL=false&quot;,username,password); </div><div class="line">             &#125;else if(&quot;sqlite&quot;.equals(databaseType))&#123;</div><div class="line">                 conn=DriverManager.getConnection(link+database);   </div><div class="line">             &#125;</div><div class="line"></div><div class="line">             st=conn.createStatement();</div><div class="line">//           System.out.println(&quot;数据库连接成功......&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //访法1-2: 使用database数据库                                </div><div class="line">        public void useDatabase(String database) throws SQLException&#123;//参数: 数据库名称</div><div class="line">            </div><div class="line">                sql=&quot;USE &quot;+database+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line"></div><div class="line">            System.out.println(&quot;********************目前使用&quot;+database+&quot;数据库**************************&quot;);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法1-3关闭所有对象</div><div class="line">        public void closeAll() throws SQLException&#123;</div><div class="line">            </div><div class="line">            if(rs!=null)  rs.close();//关闭ResultSet</div><div class="line">            if(pst!=null)   pst.close();    //关闭PreparedStatement</div><div class="line">            if(st!=null) st.close();//关闭Statement</div><div class="line">            if(conn!=null)  conn.close(); //关闭Connection</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        </div><div class="line">//**************************************************************************************************************************************************************************        </div><div class="line">        </div><div class="line">        //方法2-1:查询table表中record字段满足condition条件的值,返回查询内容【字段值】 ，不能用于 * 查询</div><div class="line">        public String select(String table,String record,String condition)throws SQLException&#123;//参数: 表名,字段名,WHERE条件</div><div class="line">                StringBuilder sb= new StringBuilder();</div><div class="line">                </div><div class="line">                sql=&quot;SELECT &quot;+record+&quot; FROM &quot; +table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                ResultSetMetaData rsm =rs.getMetaData(); //获得列集</div><div class="line">                while(rs.next())&#123;</div><div class="line">                    sb.append(rs.getString(record));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-2:查询table表中record字段满足condition条件的值,打印到控制台，并返回一个字符串【&amp;换列】</div><div class="line">                public String select(String table,String record,String condition,char o)throws SQLException&#123;//参数: 表名,字段名,WHERE条件</div><div class="line">                        StringBuilder sb= new StringBuilder();</div><div class="line">                        </div><div class="line">                        sql=&quot;SELECT * FROM &quot; +table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                        rs=st.executeQuery(sql);</div><div class="line">                        rsmd=rs.getMetaData();</div><div class="line">                        while(rs.next())&#123;</div><div class="line">                            for(int i=1;i&lt;=rsmd.getColumnCount();i++)&#123;  //获取总列数 数据字段从1开始</div><div class="line">                                if(rs.getString(i).equals(&quot;&quot;))&#123;</div><div class="line">                                    sb.append(&quot;-0-&amp;&quot;);</div><div class="line">                                &#125;else&#123;</div><div class="line">                                    sb.append(rs.getString(i)+&quot;&amp;&quot;);</div><div class="line">                                &#125;</div><div class="line">                                System.out.print(rs.getString(i)+&quot;\t&quot;);  //输出每个字段值，间隔一个Tab长度</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    return sb.toString();</div><div class="line">                &#125;</div><div class="line">        </div><div class="line">        //方法2-3:查询table所有数据的数据,打印到控制台，并返回一个字符串 【&amp;换列，##换行】</div><div class="line">        public String select(String table) throws SQLException&#123;//参数: 表名</div><div class="line">                StringBuilder sb= new StringBuilder();</div><div class="line">                </div><div class="line">                sql=&quot;SELECT * FROM &quot; +table+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                rsmd =rs.getMetaData(); //获得列集</div><div class="line">                </div><div class="line">                    while(rs.next())&#123;//光标移动</div><div class="line">                        for(int i=1;i&lt;=rsmd.getColumnCount();i++)&#123;  //获取总列数</div><div class="line">                            sb.append(rs.getString(i)+&quot;&amp;&quot;);</div><div class="line">                            System.out.print(rs.getString(i)+&quot;\t&quot;);  //输出每个字段值，间隔一个Tab长度</div><div class="line">                        &#125;</div><div class="line">                        System.out.println();//换行</div><div class="line">                        sb.append(&quot;##&quot;);</div><div class="line">                    &#125;</div><div class="line">    </div><div class="line">            </div><div class="line">                return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">            </div><div class="line">        </div><div class="line">        //方法2-4:查询table表,record字段的所有记录值(所有行)【##换行】</div><div class="line">        public String selectAllColumn(String table,String record) throws SQLException&#123;</div><div class="line">            StringBuilder sb= new StringBuilder();</div><div class="line">            </div><div class="line">             sql=&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot;;&quot;;</div><div class="line">             rs=st.executeQuery(sql);</div><div class="line">             while(rs.next())&#123;</div><div class="line">                 sb.append(rs.getString(1)+&quot;##&quot;);</div><div class="line">             &#125;</div><div class="line">             </div><div class="line">            return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-5:查询table表,record字段的所有记录值(所有行),用ArrayList保存</div><div class="line">                public List&lt;String&gt; selectAllColumn_list(String table,String record) throws SQLException&#123;</div><div class="line">                    List&lt;String&gt; list = new ArrayList&lt;String&gt;();</div><div class="line">                     sql=&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot;;&quot;;</div><div class="line">                     rs=st.executeQuery(sql);</div><div class="line">                     while(rs.next())&#123;</div><div class="line">                         list.add(rs.getString(1));</div><div class="line">                     &#125;</div><div class="line">                     </div><div class="line">                    return list;</div><div class="line">                &#125;</div><div class="line">        </div><div class="line">        //方法2-6：查询table表,满足content条件【具有唯一性】，有记录的字段直接返回记录值,没有则返回null</div><div class="line">        public String selectIfExist_CheckRecord(String table,String record,String condition) throws SQLException&#123;//参数: 表名,字段名，条件</div><div class="line">                </div><div class="line">                sql=&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                String record_content=null;</div><div class="line">                if(rs.next())&#123;</div><div class="line">                    record_content=rs.getString(1);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            return record_content;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法2-7:查询table表,根据条件condition【具有唯一性】,判断整行记录那个字段拥有记录，有记录的字段返回字段名和值【&amp;&amp;&amp;&amp;&amp;分隔】</div><div class="line">        public ArrayList&lt;String&gt; selectIfExist_CheckRecord(String table,String condition,char o) throws SQLException&#123;//参数: 表名，条件,*</div><div class="line">            </div><div class="line">            ArrayList&lt;String&gt; al = new ArrayList&lt;String&gt;();</div><div class="line">                </div><div class="line">                sql=&quot;SELECT * FROM &quot;+table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                System.out.println(sql);</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                rsmd=rs.getMetaData();</div><div class="line"></div><div class="line">                while(rs.next())&#123;</div><div class="line">                    for(int i=1;i&lt;=rsmd.getColumnCount();i++)&#123;  </div><div class="line">                        al.add(rsmd.getColumnName(i));//只要列名</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">            return al;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-8: 查询table表,满足条件condition的,返回规定范围行数的记录的列名【&amp;分隔每列】</div><div class="line">        public ArrayList&lt;String&gt; selectAskinformation_Scope(String table,String condition,String scope) throws SQLException&#123; //参数:表名,条件,范围行数【使用-进行分隔,例如1-5】</div><div class="line">//              StringBuilder sb= new StringBuilder();</div><div class="line">                ArrayList&lt;String&gt; alist = new  ArrayList&lt;String&gt;();</div><div class="line">                </div><div class="line">                String [] scope_arrays =scope.split(&quot;-&quot;);</div><div class="line">                int begin=Integer.parseInt(scope_arrays[0]);</div><div class="line">                int end=Integer.parseInt(scope_arrays[1]);</div><div class="line">                </div><div class="line">                sql=&quot;SELECT * FROM &quot;+table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                rsmd=rs.getMetaData();</div><div class="line">                while(rs.next())&#123;</div><div class="line">                    for(int i=begin;i&lt;=end;i++)&#123; //遍历范围区间的字段</div><div class="line">                        if(rs.getString(i)==null || rs.getString(i).length()&lt;2) continue;</div><div class="line">                        alist.add(rsmd.getColumnName(i));//只要列名</div><div class="line">                    &#125;       </div><div class="line">                &#125;</div><div class="line"></div><div class="line">            return alist;   </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-9：查询table所有记录总数，返回记录总数</div><div class="line">        public int select_allCount(String table) throws SQLException&#123;//参数：表名</div><div class="line">            </div><div class="line">            </div><div class="line">            sql=&quot;SELECT count(*)  FROM &quot; +table+&quot;;&quot;;</div><div class="line">            rs=st.executeQuery(sql);</div><div class="line">            rs.next();</div><div class="line">            </div><div class="line">            int recordCount =Integer.parseInt(rs.getString(1));</div><div class="line"></div><div class="line">            return recordCount;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">//**************************************************************************************************************************************************************************</div><div class="line">        </div><div class="line">        //方法3-1: 往table表插入整行数据【按顺序依次匹配第1列到最后1列】</div><div class="line">        public void insert(String table,String content) throws SQLException&#123;//参数: 表名,内容</div><div class="line">                    String sql=&quot;INSERT OR IGNORE  INTO  &quot;+table+&quot; VALUES(&quot;+content+&quot;);&quot;;//去重插入【应用于SQLite】遇到重复就跳过OR IGNORE</div><div class="line">                    int i=st.executeUpdate(sql);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法3-2: 往table表record字段,插入一行content数据【少量数据(标题，日期等)】【多字段插入   ,分隔字段     ,号分隔内容】</div><div class="line">        public void insert(String table,String record,String content) throws SQLException&#123;//参数: 表名,字段,内容</div><div class="line">                    String sql=&quot;INSERT INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+content+&quot;);&quot;;</div><div class="line">                    int i=st.executeUpdate(sql);</div><div class="line">                    if(i!=-1)&#123;</div><div class="line">//                      System.out.println(&quot;*****************&quot;+table+&quot;表INSERT成功！****************&quot;);</div><div class="line">                    &#125;</div><div class="line">        &#125;</div><div class="line">                </div><div class="line">        //方法3-3:往table表record，插入一行content数据 【大量数据(文章，文本内容)】【,分隔字段 &amp;&amp;&amp;&amp;&amp; 分隔内容   ,分隔占位符】</div><div class="line">        public void insert(String table,String record,String content,String mark) throws SQLException, UnsupportedEncodingException&#123;//参数值: 表名,字段,内容，占位符(?)</div><div class="line">//                  content =new String(content.getBytes(),&quot;UTF-8&quot;);</div><div class="line">            </div><div class="line">                    String [] content_Arrays=content.split(&quot;&amp;&amp;&amp;&amp;&amp;&quot;);//分隔内容存入数组</div><div class="line">                    String [] mark_Arrays = mark.split(&quot;,&quot;);</div><div class="line">                    </div><div class="line">                    //判断是否存在相同记录，如果存在则不执行插入【以第一条record为准】</div><div class="line">                    String first_record=record.substring(0,record.indexOf(&quot;,&quot;));</div><div class="line">                    sql  =&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot; WHERE &quot;+first_record+&quot;=&apos;&quot;+content_Arrays[0]+&quot;&apos;;&quot;;</div><div class="line">                    rs=st.executeQuery(sql);</div><div class="line">                        </div><div class="line">                        if(rs.next())&#123;//光标移动</div><div class="line">                            //存在相同记录</div><div class="line">                            System.out.println(&quot;**********************很抱歉，&quot;+table+&quot;表已经存在&quot;+content_Arrays[0]+&quot;记录,INSERT失败,不进行重复插入！*************************8888&quot;);</div><div class="line">                        &#125;else&#123;</div><div class="line">                            //不存在相同记录</div><div class="line">//                          System.out.println(&quot;**********************&quot;+table+&quot;表中不存在&quot;+content_Arrays[0]+&quot;记录,正在进行INSERT。。。。。。。。。。。。。&quot;);</div><div class="line">                            sql=&quot;INSERT INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+mark+&quot;);&quot;;</div><div class="line">                            </div><div class="line">                            pst=conn.prepareStatement(sql);</div><div class="line">                            </div><div class="line">                            for(int i=1;i&lt;=mark_Arrays.length;i++)&#123;//根据占位符个数【?的数量】进行循环: ?号个数            </div><div class="line">                                pst.setString(i,mark_Arrays[i-1]);</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                            pst.executeUpdate();</div><div class="line">//                          System.out.println(&quot;*****************&quot;+table+&quot;表INSERT成功！****************&quot;);</div><div class="line">                        &#125;</div><div class="line">            &#125;</div><div class="line">        </div><div class="line">        //方法3-4(去重插入1)： 添加唯一索引,使用INSERT INTO ... ON DUPLICATE KEY UPDATE ..【重复插入时更新】</div><div class="line">        public void insertUpdate(String table,String record,String content,String UpdateConent) throws SQLException&#123;//参数: 表名,字段,内容,更新内容</div><div class="line">            String sql=&quot;INSERT INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+content+&quot;) ON DUPLICATE KEY UPDATE &quot;+UpdateConent+&quot;;&quot;;</div><div class="line">            int i=st.executeUpdate(sql);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法3-5(去重插入2): 添加唯一索引,使用INSERT IGNORE INTO...【存在相同数据，就跳过该数据】</div><div class="line">        public void insertInGore(String table,String record,String content) throws SQLException&#123;//参数: 表名,字段,内容,更新内容</div><div class="line">                String sql=&quot;INSERT IGNORE INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+content+&quot;);&quot;;</div><div class="line">                int i=st.executeUpdate(sql);</div><div class="line">        &#125;       </div><div class="line">        </div><div class="line">        //方法3-6(去重插入3):添加唯一索引,使用REPLACE INTO【不重复和INSERT的功能一样,有重复就使用新纪录值替换原来记记录值】</div><div class="line">                                                                                         //【表中必须有唯一索引，而且不为空字段，否则就和INSERT完全一样】【将DELETE和INSERT和操作合二唯一】</div><div class="line">        public void insertReplace(String table,String record,String content) throws SQLException&#123;//参数: 表名,字段,内容</div><div class="line">            String sql=&quot;REPLACE INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+content+&quot;);&quot;;</div><div class="line">            int i=st.executeUpdate(sql);</div><div class="line">            //执行REPLACE后，系统返回所受影响行数，=1说明表中没有重复记录，=2则说明有，&gt;2说明有多个唯一索引，有多条记录被删除和插入。</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法3-6(去重插入4)：使用dual【虚表去重】【度娘度娘....】</div><div class="line">        </div><div class="line"></div><div class="line">//**************************************************************************************************************************************************************************</div><div class="line">        </div><div class="line">        //方法4-1：【执行创建语句】</div><div class="line">        public void createSQL(String sql) throws SQLException&#123;</div><div class="line">            st.executeUpdate(sql);  </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法4-2：【执行插入语句】</div><div class="line">        public void insertSQL(String sql) throws SQLException&#123;</div><div class="line">            st.executeUpdate(sql);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法4-3：【执行查找语句】</div><div class="line">        public void selectSQL(String sql) throws SQLException&#123;</div><div class="line">            rs = st.executeQuery(sql);</div><div class="line">            rsmd=rs.getMetaData();</div><div class="line">            while(rs.next())&#123;</div><div class="line">                for(int i=1;i&lt;=rsmd.getColumnCount();i++)&#123;</div><div class="line">                    System.out.print(rsmd.getColumnName(i)+&quot;:&quot;+rs.getString(i)+&quot;\t&quot;);</div><div class="line">                &#125;</div><div class="line">                System.out.println();//换行</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法4-4:【执行更新操作】</div><div class="line">        public void updateSQL(String sql) throws SQLException&#123;</div><div class="line">            conn.setAutoCommit(false);//禁止自动提交</div><div class="line">            st.executeUpdate(sql);</div><div class="line">            conn.commit();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法4-5:【执行删除操作】</div><div class="line">        public void deleteSQL(String sql) throws SQLException&#123;</div><div class="line">            conn.setAutoCommit(false);//禁止自动提交</div><div class="line">            st.executeUpdate(sql);</div><div class="line">            conn.commit();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //**************************************************************************************************************************************************************************</div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br></p>
<p>2.UseExcel.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line">package Utils;</div><div class="line"></div><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">import org.apache.poi.EncryptedDocumentException;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFRow;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFSheet;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</div><div class="line">import org.apache.poi.openxml4j.exceptions.InvalidFormatException;</div><div class="line">import org.apache.poi.ss.usermodel.Cell;</div><div class="line">import org.apache.poi.ss.usermodel.Row;</div><div class="line">import org.apache.poi.ss.usermodel.Sheet;</div><div class="line">import org.apache.poi.ss.usermodel.WorkbookFactory;</div><div class="line"></div><div class="line">/**更新时间:2016.12.13</div><div class="line"> *          操作Excel工作薄</div><div class="line"> *              方法1：使用jxl.jar   【创建和读取excel】</div><div class="line"> *              方法2：使用poi.jar 【创建和读取excel】</div><div class="line"> *      @author Suvan</div><div class="line"> */</div><div class="line">public class UseExcel &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">//  //方法1-2：创建Excel文件，写入数据</div><div class="line">//  public  static void createExcel() throws IOException,WriteException&#123;</div><div class="line">//      //1.新建文件，设置目录</div><div class="line">//      File xlsFile = new File(&quot;C:\\Users\\Liu-shuwei\\Desktop\\jxl.xls&quot;); </div><div class="line">//      </div><div class="line">//      //2.创建工作簿</div><div class="line">//      WritableWorkbook workbook = Workbook.createWorkbook(xlsFile);</div><div class="line">//      </div><div class="line">//      //3.创建工作表</div><div class="line">//       WritableSheet sheet = workbook.createSheet(&quot;sheet1&quot;, 0);</div><div class="line">//        for (int row = 0; row &lt; 10; row++)&#123;   </div><div class="line">//           for (int col = 0; col &lt; 10; col++) &#123;</div><div class="line">//               </div><div class="line">//               //第col列【从0开始】，第row行【从0开始】，数据</div><div class="line">//               Label lb = new Label(col,row,&quot;数据【&quot;+col+&quot;列&quot;+row+&quot;行】&quot;);</div><div class="line">//               sheet.addCell(lb);  // 向工作表中添加数据</div><div class="line">//           &#125;</div><div class="line">//        &#125;</div><div class="line">//        </div><div class="line">//        //4.写入数据</div><div class="line">//        workbook.write();</div><div class="line">//        </div><div class="line">//        //5.关闭流</div><div class="line">//        workbook.close();</div><div class="line">//  &#125;</div><div class="line">//  </div><div class="line">//  //方法1-2：读取Excel</div><div class="line">//  public  void readExcel() throws IOException,BiffException&#123;</div><div class="line">//      </div><div class="line">//      //1.定位文件</div><div class="line">//      File xlsFile = new File(&quot;C:\\Users\\Liu-shuwei\\Desktop\\第5周-8.23.xls&quot;);</div><div class="line">//      </div><div class="line">//      //2.获得工作薄对象</div><div class="line">//      Workbook workbook = Workbook.getWorkbook(xlsFile);</div><div class="line">//      </div><div class="line">//      //3.获得所有工作表</div><div class="line">//      Sheet [] sheets = workbook.getSheets();</div><div class="line">//      </div><div class="line">//      //4.遍历工作表</div><div class="line">//      if(sheets != null)&#123;</div><div class="line">//          for(Sheet sheet:sheets)&#123;</div><div class="line">//              int rows = sheet.getRows();             //获得行数</div><div class="line">//              int cols = sheet.getColumns();      //获得列数</div><div class="line">//              </div><div class="line">//              //读取数据</div><div class="line">//              for(int row =1;row&lt;rows;row++)&#123;</div><div class="line">////                    Cell    [] cells =sheet.getRow(row);//获取整行数据,保存进数组,Sheet.getColumn()是获取整列</div><div class="line">//</div><div class="line">//                  for(int col = 0;col &lt; cols;col++)&#123;</div><div class="line">//                      System.out.printf(&quot;%10s&quot;,sheet.getCell(col,row).getContents());</div><div class="line">//                  &#125;</div><div class="line">//                  System.out.println(); //换行</div><div class="line">//              &#125;</div><div class="line">//          &#125;</div><div class="line">//      &#125;</div><div class="line">//  </div><div class="line">//      workbook.close();</div><div class="line">//  &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">//************************************************************************************************************************</div><div class="line">    //方法2-1：poi创建excel</div><div class="line">    public static void createExcel_poi() throws IOException&#123;</div><div class="line">            //1.创建工作簿</div><div class="line">            HSSFWorkbook workbook =new HSSFWorkbook();</div><div class="line">            </div><div class="line">            //2.创建工作表</div><div class="line">            HSSFSheet sheet = workbook.createSheet(&quot;suvan&quot;);</div><div class="line">            for(int row =0;row&lt;10;row++)&#123;</div><div class="line">                HSSFRow rows = sheet.createRow(row);</div><div class="line">                for(int col=0;col&lt;10;col++)&#123;</div><div class="line">                    //向工作表添加数据</div><div class="line">                    rows.createCell(col).setCellValue(&quot;数据第&quot;+row+&quot;行-&quot;+col+&quot;列&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            //3.创建文件</div><div class="line">            File xlsFile = new File(&quot;C:\\Users\\Liu-shuwei\\Desktop\\suvan.xls&quot;);</div><div class="line">            FileOutputStream xlsStream = new FileOutputStream(xlsFile);</div><div class="line">            workbook.write(xlsStream);</div><div class="line">            workbook.close();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法2-2:poi读取excel文件</div><div class="line">    public static void readExcel_poi() throws EncryptedDocumentException, InvalidFormatException, IOException&#123;</div><div class="line">        //1.定位文件</div><div class="line">        File xlsFile = new File(&quot;C:\\Users\\Liu-shuwei\\Desktop\\第5周-8.23.xls&quot;);</div><div class="line">        //2.获得工作薄【WorkbookFactory位于poi-ooxml-3.14-20160307.jar】</div><div class="line">        org.apache.poi.ss.usermodel.Workbook workbook =WorkbookFactory.create(xlsFile);</div><div class="line">        //3.获得工作表个数</div><div class="line">        int sheetCount = workbook.getNumberOfSheets();</div><div class="line">        ///4.遍历工作表</div><div class="line">        for(int i=0;i&lt;sheetCount;i++)&#123;</div><div class="line">             //a.选择工作表</div><div class="line">            Sheet sheet = workbook.getSheetAt(i);</div><div class="line">            </div><div class="line">            //b.获取总行数和列数</div><div class="line">            int rows =sheet.getLastRowNum()+1;          //总行数</div><div class="line">            Row tmp = sheet.getRow(0);</div><div class="line">            if(tmp == null) continue;</div><div class="line">            int cols = tmp.getPhysicalNumberOfCells();  //总列数</div><div class="line"></div><div class="line">            //c.读取数据</div><div class="line">            for(int row =0;row&lt;rows;row++)&#123;</div><div class="line">                Row r = sheet.getRow(row);</div><div class="line">                for(int col=0;col&lt;cols;col++)&#123;</div><div class="line">                    if(r.getCell(col)!=null)&#123;</div><div class="line">                        r.getCell(col).setCellType(Cell.CELL_TYPE_STRING); //设置Cell类型，然后就可以把纯数字作为String类型读出来</div><div class="line">                        System.out.printf(&quot;%10s&quot;,r.getCell(col).getStringCellValue());</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">        </div><div class="line">                System.out.println();//换行</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        workbook.close();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br><br><br><br></p>
<h1 id="版本5-0【2016-12-18】"><a href="#版本5-0【2016-12-18】" class="headerlink" title="版本5.0【2016.12.18】"></a>版本5.0【2016.12.18】</h1><p><br></p>
<p>版本更新：</p>
<ol>
<li>5.0【GUI版】,添加UI界面,使用Swing原生界面</li>
<li>优化代码,使用工具类UseExcel.java</li>
<li>将程序打包成jar【Export—&gt;Runnable JAR file】</li>
</ol>
<p><br><br></p>
<p>未填的坑</p>
<ul>
<li>一个帅气的界面</li>
<li>自定义语法修改模版</li>
<li>进度条</li>
<li>回调刷新窗口</li>
<li>定时器</li>
<li>多线程生成</li>
</ul>
<p><br><br></p>
<p>项目结构【打包成suvan.jar】<br>BatchCreate_file<br>&emsp;src<br>&emsp;&emsp;extend.example<br>&emsp;&emsp;&emsp;GetFirstLetter.java<br>&emsp;&emsp;main<br>&emsp;&emsp;&emsp;AlterContent.java<br>&emsp;&emsp;&emsp;GetTableData.java<br>&emsp;&emsp;&emsp;GoTask.java<br>&emsp;&emsp;&emsp;NumBean.java<br>&emsp;&emsp;&emsp;test.java<br>&emsp;&emsp;UI<br>&emsp;&emsp;&emsp;alterModelUI.java<br>&emsp;&emsp;&emsp;insertUI.java<br>&emsp;&emsp;&emsp;mainUI.java<br>&emsp;&emsp;&emsp;ProgressBar.java<br>&emsp;&emsp;Utils<br>&emsp;&emsp;&emsp;IOFile.java<br>&emsp;&emsp;&emsp;UseDB.java<br>&emsp;&emsp;&emsp;UseExcel.java<br>&emsp;&emsp;&emsp;UseString.java<br>&emsp;JRE System Libary[JavASE -1.8]<br>&emsp;Referenced Libraries<br>&emsp;Data<br>&emsp;&emsp;record.suvan<br>&emsp;Excel<br>&emsp;lib<br>&emsp;&emsp;jxl.jar<br>&emsp;&emsp;mysql-connector-jar.5.1.38-bin.jar<br>&emsp;&emsp;poi-3.14-20160307.jar<br>&emsp;&emsp;poi-ooxml-3.140-2016030.jar<br>&emsp;&emsp;sqlite-jdbc-3.15.1.jar<br>&emsp;model_file<br>&emsp;&emsp;BackupTask.java<br>&emsp;&emsp;BackupTask.txt<br>&emsp;&emsp;ZhaoGoServiceModel.java<br>&emsp;&emsp;ZhaoGgServiceModel.txt<br>&emsp;SQLite<br>&emsp;&emsp;&emsp;batchcreate_file.db</p>
<p><br><br></p>
<p>BrachCreate5.0【GUI版】的文件结构<br>&emsp;BatchCreate 文档.txt<br>&emsp;用于测试的excel表.xls<br>&emsp;运行程序.bat<br>&emsp;BrachCreate5.0<br>&emsp;&emsp;Data<br>&emsp;&emsp;&emsp;record.suvan<br>&emsp;&emsp;model_file<br>&emsp;&emsp;&emsp;BackupTask.java<br>&emsp;&emsp;&emsp;BackupTask.txt<br>&emsp;&emsp;&emsp;ZhaoGoServiceModel.java<br>&emsp;&emsp;&emsp;ZhaoGgServiceModel.txt<br>&emsp;&emsp;SQLite<br>&emsp;&emsp;&emsp;batchcreate_file.db<br>&emsp;&emsp;suvan.jar</p>
<p><br><br></p>
<h2 id="Code【贴上所有代码】"><a href="#Code【贴上所有代码】" class="headerlink" title="Code【贴上所有代码】"></a>Code【贴上所有代码】</h2><p>extend.example包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">package extend.example;</div><div class="line"></div><div class="line">public class GetFirstLetter &#123;</div><div class="line">    private static int BEGIN = 45217;</div><div class="line">    private static int END = 63486;</div><div class="line">    </div><div class="line">    //按照声母表示，这个表是在GB2312中的出现的第一个汉字，也就是说“啊”是代表首字母a的第一个汉字</div><div class="line">    // 二十六个字母区间对应二十七个端点    // GB2312码汉字区间十进制表示</div><div class="line">    private static char[] chartable = &#123;&apos;啊&apos;, &apos;芭&apos;, &apos;擦&apos;, &apos;搭&apos;, &apos;蛾&apos;, &apos;发&apos;, &apos;噶&apos;, &apos;哈&apos;,        &apos;哈&apos;, &apos;击&apos;, &apos;喀&apos;, &apos;垃&apos;, &apos;妈&apos;, &apos;拿&apos;, &apos;哦&apos;, &apos;啪&apos;, &apos;期&apos;, &apos;然&apos;, &apos;撒&apos;, &apos;塌&apos;, &apos;塌&apos;,        &apos;塌&apos;, &apos;挖&apos;, &apos;昔&apos;, &apos;压&apos;, &apos;匝&apos;,&#125;; </div><div class="line">    private static int [] table = new int[27]; // 对应首字母区间表</div><div class="line"></div><div class="line">    // 对应首字母区间表</div><div class="line">    private static char[] initialtable = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;,        &apos;h&apos;, &apos;h&apos;, &apos;j&apos;, &apos;k&apos;, &apos;l&apos;, &apos;m&apos;, &apos;n&apos;, &apos;o&apos;, &apos;p&apos;, &apos;q&apos;, &apos;r&apos;, &apos;s&apos;, &apos;t&apos;,        &apos;t&apos;, &apos;t&apos;, &apos;w&apos;, &apos;x&apos;, &apos;y&apos;, &apos;z&apos;,&#125;;</div><div class="line">    </div><div class="line">    //1.初始化</div><div class="line">     static &#123;        </div><div class="line">         for (int i = 0; i &lt; 26; i++) &#123;            </div><div class="line">             table[i] = gbValue(chartable[i]);// 得到GB2312码的首字母区间端点表，十进制。 </div><div class="line">         &#125;</div><div class="line">         table[26] = END;// 区间表结尾</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     /* 根据一个包含汉字的字符串返回一个汉字拼音首字母的字符串 最重要的一个方法，思路如下：一个个字符读入、判断、输出     */</div><div class="line">     public static String getFirstLetter(String sourceStr) &#123;        </div><div class="line">            String result = &quot;&quot;;        </div><div class="line">            String str = sourceStr.toLowerCase();       </div><div class="line">            int StrLength = str.length();        </div><div class="line">            int i;       </div><div class="line">            try &#123;            </div><div class="line">                for (i = 0; i &lt; StrLength; i++) &#123;                </div><div class="line">                    result += Char2Initial(str.charAt(i));            </div><div class="line">                    &#125;        </div><div class="line">                &#125; catch (Exception e) &#123;            </div><div class="line">                    result = &quot;&quot;;        </div><div class="line">                    &#125;        </div><div class="line">            return result;   </div><div class="line">        &#125;</div><div class="line">     </div><div class="line">      /* 输入字符,得到他的声母,英文字母返回对应的大写字母,其他非简体汉字返回 &apos;0&apos;     */  </div><div class="line">     private static char Char2Initial(char ch) &#123;    </div><div class="line">                // 对英文字母的处理：小写字母转换为大写，大写的直接返回</div><div class="line">              if (ch &gt;= &apos;a&apos; &amp;&amp; ch &lt;= &apos;z&apos;) &#123;            </div><div class="line">                  return ch;        </div><div class="line">               &#125;        </div><div class="line">              if (ch &gt;= &apos;A&apos; &amp;&amp; ch &lt;= &apos;Z&apos;) &#123;</div><div class="line">                  return ch;  </div><div class="line">                &#125;</div><div class="line">         </div><div class="line">              // 对非英文字母的处理：转化为首字母，然后判断是否在码表范围内，        // 若不是，则直接返回。        // 若是，则在码表内的进行判断。   </div><div class="line">              int gb = gbValue(ch);// 汉字转换首字母</div><div class="line">              if ((gb &lt; BEGIN) || (gb &gt; END))&#123;            </div><div class="line">                  return ch;        </div><div class="line">                 &#125;</div><div class="line">    </div><div class="line">              int i;       </div><div class="line">              for (i = 0; i &lt; 26; i++) &#123; // 判断匹配码表区间，匹配到就break,判断区间形如“[,)”</div><div class="line">                  if ((gb &gt;= table[i]) &amp;&amp; (gb &lt; table[i + 1])) &#123;</div><div class="line">                      break;            </div><div class="line">                      &#125;        </div><div class="line">              &#125;</div><div class="line">              if (gb == END) &#123; //补上GB2312区间最右端    </div><div class="line">                     i = 25;        </div><div class="line">                &#125;      </div><div class="line">            return initialtable[i]; // 在码表区间中，返回首字母    &#125;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">     </div><div class="line">     /* 取出汉字的编码 cn 汉字     */  </div><div class="line">    private static int gbValue(char ch) &#123;</div><div class="line">        String str = new String();        </div><div class="line">        str += ch;       </div><div class="line">        try &#123;           </div><div class="line">            byte[] bytes = str.getBytes(&quot;GB2312&quot;);            </div><div class="line">            if (bytes.length &lt; 2) &#123;               </div><div class="line">                    return 0;           </div><div class="line">            &#125;            </div><div class="line">            return (bytes[0] &lt;&lt; 8 &amp; 0xff00) + (bytes[1] &amp; 0xff);      </div><div class="line">        &#125; catch (Exception e) &#123;          </div><div class="line">            return 0;        </div><div class="line">            &#125;    </div><div class="line">    &#125;   </div><div class="line">    </div><div class="line">//  public static void main(String [] args)&#123;</div><div class="line">//      //在main方法中调用FirstLetterUtil类的getFirstLetter()方法，获取姓名的首字母。如：“刘德华”获取首字母是“ldh”。</div><div class="line">//       System.out.print(getFirstLetter(&quot;日你仙人掌&quot;));//获取文字首字母的拼音</div><div class="line">//  &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br></p>
<p>main包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div></pre></td><td class="code"><pre><div class="line">package main;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseDB;</div><div class="line">import Utils.UseString;</div><div class="line"></div><div class="line">/**更新时间： 2016.12.13</div><div class="line"> * </div><div class="line"> *  获取模版内容，根据编号各个属性值，修改BackupTask.java和入库文件，创建文件</div><div class="line"> *          @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class AlterContent &#123;</div><div class="line">        </div><div class="line">        private IOFile iof;</div><div class="line">        private UseDB udb;</div><div class="line">        private UseString us;</div><div class="line">        private GetTableData gtd;</div><div class="line">        </div><div class="line">        //有参构造函数，创建对象时进行赋值</div><div class="line">        public AlterContent(IOFile iof,UseDB udb,UseString us,GetTableData gtd)&#123;  </div><div class="line">            this.iof=iof;</div><div class="line">            this.udb=udb;</div><div class="line">            this.us=us;</div><div class="line">            this.gtd=gtd;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line"></div><div class="line">        //方法1:修改BackupTask.java,并创建</div><div class="line">        public  void aBackupTask(String path,String fileName,String content,String sign,ArrayList&lt;String&gt; rukuName_list) throws IOException&#123;//参数:路径，文件名，内容，标记【修改还是创建】,入库名,项目类           </div><div class="line">                </div><div class="line">             //1.修改模版内容</div><div class="line">            String BackupTask_model=&quot;\n\t\t&quot;+&quot;NameA=(NameB) ac.getBean(\&quot;fileName\&quot;);&quot; +</div><div class="line">                                                              &quot;\n\t\t&quot; +&quot;NameA.initNameB();&quot;;</div><div class="line">                String attributeName=&quot;&quot;;//属性名</div><div class="line">                String cStr =&quot;&quot;;</div><div class="line">                StringBuilder sb = new StringBuilder();//储存各个所有内容</div><div class="line">                for(int i=0;i&lt;rukuName_list.size();i++)&#123;</div><div class="line">                    attributeName =rukuName_list.get(i).substring(rukuName_list.get(i).lastIndexOf(&quot;_&quot;)+1);</div><div class="line">                    cStr=BackupTask_model.replace(&quot;NameA&quot;,us.LowFirstString(attributeName))</div><div class="line">                                                              .replace(&quot;NameB&quot;,us.UpFirstString(attributeName))</div><div class="line">                                                              .replace(&quot;fileName&quot;,rukuName_list.get(i));</div><div class="line">                    sb.append(cStr);</div><div class="line">                &#125;</div><div class="line">                sb.append(&quot;\n\t\t//ok;&quot;);//用于叠加补充</div><div class="line">                </div><div class="line">                //2.覆盖或者修改文件</div><div class="line">                if(&quot;cover&quot;.equals(sign))&#123;//覆盖 【与上一个编号完全不同(号码不同,且不带-)】</div><div class="line">                    content=content.replace(&quot;//changeModel;&quot;,sb.toString());</div><div class="line"></div><div class="line">                     iof.cFile(path, &quot;BackupTask.java&quot;, &quot;UTF-8&quot;, content);</div><div class="line">                &#125;else if(&quot;alter&quot;.equals(sign))&#123; //修改 【带-的编号,在上一个文件基础上进行叠加修改】</div><div class="line">                    content=content.replace(&quot;//ok;&quot;,sb.toString());</div><div class="line"></div><div class="line">                    iof.cFile(path, &quot;BackupTask.java&quot;, &quot;UTF-8&quot;, content);</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法2:修改入库文件</div><div class="line">        public void aRK(String path,String fileName,String content,String type,String username,NumBean numbean) throws IOException&#123;</div><div class="line">            </div><div class="line"></div><div class="line">                //一.根据类型生成相应名称</div><div class="line">                HashMap&lt;String,String&gt; hm = gtd.getTypeAllName(type);</div><div class="line"></div><div class="line">                </div><div class="line">                //二.根据需求修改content</div><div class="line">                        //A.判断信息类型</div><div class="line">                        String infType =numbean.getInftype();</div><div class="line">                        if(infType !=null  &amp;&amp; ! &quot;-0-&quot;.equals(infType))&#123;                                     //zbgg.setInfoType(&quot;服务&quot;);// 信息类型</div><div class="line">                            content=content.replaceFirst(&quot;//是否有信息类型;&quot;,&quot;zbgg.setInfoType(\&quot;&quot;+infType+&quot;\&quot;);//信息类型&quot;);</div><div class="line">                        &#125;else&#123;</div><div class="line">                            content=content.replaceFirst(&quot;//是否有信息类型;&quot;,&quot;//zbgg.setInfoType(\&quot;服务\&quot;);//信息类型&quot;);</div><div class="line">                        &#125;</div><div class="line">                    </div><div class="line">                        //B.判断行业分类</div><div class="line">                        String workType=numbean.getWorktype();</div><div class="line">                        if(workType==null &amp;&amp; ! &quot;-0-&quot;.equals(workType)) &#123;                                 //zbgg.setIndustry(&quot;建筑建材&quot;); // 行业分类</div><div class="line">                            content=content.replaceFirst(&quot;//是否有行业分类;&quot;,&quot;zbgg.setIndustry(\&quot;&quot;+workType+&quot;\&quot;); //行业分类&quot;);</div><div class="line">                        &#125;else&#123;</div><div class="line">                            content=content.replaceFirst(&quot;//是否有行业分类;&quot;,&quot;//zbgg.setIndustry(\&quot;建筑建材\&quot;); // 行业分类&quot;);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    </div><div class="line">                //三.修改模版</div><div class="line">                content=content.replace(&quot;zhaoBiaoGongGao&quot;,hm.get(&quot;typeSpell&quot;))</div><div class="line">                                                                             .replace(&quot;ZhaoBiaoGongGao&quot;,us.UpFirstString(hm.get(&quot;typeSpell&quot;)))</div><div class="line">                                                                             .replace(&quot;ZhaobGgService&quot;,us.UpFirstString(hm.get(&quot;typeService&quot;)))</div><div class="line">                                                                             .replace(&quot;zhaobGgService&quot;,hm.get(&quot;typeService&quot;))</div><div class="line">                                                                             .replace(&quot;zbgg&quot;,type);</div><div class="line">                content=content.replaceFirst(&quot;//@程序猿;&quot;,username)</div><div class="line">                                            .replaceFirst(&quot;//@内容;&quot;,numbean.getArea()+&quot;_&quot;+numbean.getProvince()+&quot;_&quot;+numbean.getCity()+&quot;_&quot;+numbean.getCounty()+&quot;_&quot;+hm.get(&quot;typeChinese&quot;)+&quot;_&quot;+numbean.getNum())                </div><div class="line">                                            .replaceFirst(&quot;//编号;&quot;,numbean.getNum());        </div><div class="line">                String className =fileName.substring(0,fileName.lastIndexOf(&quot;.&quot;));</div><div class="line">                content=content.replaceFirst(&quot;//注解;&quot;,className)</div><div class="line">                                            .replaceFirst(&quot;//类名;&quot;,className);</div><div class="line">                content=content.replaceFirst(&quot;//Area;&quot;,numbean.getArea())</div><div class="line">                                             .replaceFirst(&quot;//Province;&quot;,numbean.getProvince().replaceFirst(&quot;省&quot;,&quot;&quot;).replaceFirst(&quot;市&quot;,&quot;&quot;).replaceFirst(&quot;区&quot;,&quot;&quot;).replaceFirst(&quot;县&quot;,&quot;&quot;))</div><div class="line">                                            .replaceFirst(&quot;//Webname;&quot;,numbean.getWebname())</div><div class="line">                                            .replaceFirst(&quot;//Infsource;&quot;,numbean.getInfsource())</div><div class="line">                                            .replace(&quot;//表名;&quot;,hm.get(&quot;tableName&quot;));</div><div class="line">                </div><div class="line">                //仅有2个字符的时候保留，省,市，区</div><div class="line">                if(numbean.getCity().length()==2)&#123;</div><div class="line">                    content=content.replaceFirst(&quot;//City;&quot;,numbean.getCity());</div><div class="line">                &#125;else&#123;</div><div class="line">                    content=content.replaceFirst(&quot;//City;&quot;,numbean.getCity().replaceFirst(&quot;省&quot;,&quot;&quot;).replaceFirst(&quot;市&quot;,&quot;&quot;).replaceFirst(&quot;区&quot;,&quot;&quot;).replaceFirst(&quot;县&quot;,&quot;&quot;));</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                if(numbean.getCounty().length()==2)&#123;</div><div class="line">                    content=content.replaceFirst(&quot;//County;&quot;,numbean.getCounty());</div><div class="line">                &#125;else&#123;</div><div class="line">                    content=content.replaceFirst(&quot;//County;&quot;,numbean.getCounty().replaceFirst(&quot;省&quot;,&quot;&quot;).replaceFirst(&quot;市&quot;,&quot;&quot;).replaceFirst(&quot;区&quot;,&quot;&quot;).replaceFirst(&quot;县&quot;,&quot;&quot;));</div><div class="line">                &#125;</div><div class="line">                        </div><div class="line">                        </div><div class="line">                </div><div class="line">                //四.创建编号相应类型的入库文件</div><div class="line">                iof.cFile(path, fileName, &quot;UTF-8&quot;, content);</div><div class="line">        &#125;       </div><div class="line">&#125;</div><div class="line"></div><div class="line">**********************************************************************</div><div class="line"></div><div class="line"></div><div class="line">package main;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.regex.Pattern;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseDB;</div><div class="line">import Utils.UseExcel;</div><div class="line">import jxl.read.biff.BiffException;</div><div class="line"></div><div class="line">/**更新时间： 2016.12.18</div><div class="line"> * </div><div class="line"> *  获取数据，处理数据，归纳信息</div><div class="line"> *          @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class GetTableData &#123;</div><div class="line"></div><div class="line">    private IOFile iof;</div><div class="line">    private UseDB udb;</div><div class="line">    </div><div class="line">    //有参构造函数，创建对象时进行赋值</div><div class="line">    public GetTableData(IOFile iof,UseDB udb)&#123;</div><div class="line">        this.iof=iof;</div><div class="line">        this.udb=udb;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法1: 插入模版数据,并返回模版内容</div><div class="line">        public String getModel(String filePath) throws IOException,SQLException&#123;//参数：文件路径</div><div class="line">            </div><div class="line">            //1.读取文件内容                                                                                                      </div><div class="line">            String fileContent=iof.rFileContent(filePath,&quot;UTF-8&quot;);   //注意：路径的话用/或者\\都可以,数据库的默认编码是GBK</div><div class="line">            String modeName=filePath.substring(filePath.indexOf(&quot;/&quot;)+1);            //模版名字</div><div class="line">            </div><div class="line">            //2.判断是否存在相同模版</div><div class="line">            String modeInf = udb.select(&quot;article&quot;, &quot;model&quot;, &quot;model=&apos;&quot;+modeName+&quot;&apos;&quot;);</div><div class="line"></div><div class="line">            if(modeInf.length() &lt;1)&#123;    //判断是否已存在模版</div><div class="line">                udb.insertReplace(&quot;article&quot;,&quot;model,detail&quot;,&quot;&apos;&quot;+modeName+&quot;&apos;,&apos;&quot;+fileContent.replace(&quot;&apos;&quot;, &quot;&apos;&apos;&quot;)+&quot;&apos;&quot;); </div><div class="line">            &#125;else&#123;</div><div class="line">                System.out.println(&quot;\n********************************已存在&quot;+modeInf+&quot;模版，不进行重复插入****************************&quot;);</div><div class="line">            &#125;</div><div class="line">        </div><div class="line">            return fileContent;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">    //方法2：获取table表中，num编号的所有信息,储存进NumBean，返回NumBean</div><div class="line">    public  NumBean getNumInformation(String table,String num) throws SQLException&#123;//参数：表名,编号</div><div class="line"></div><div class="line">            //查询table表，num字段所有数据，用&amp;分隔</div><div class="line">            String numInf = udb.select(table, &quot;num&quot;, &quot;num=&apos;&quot;+num+&quot;&apos;&quot;, &apos;*&apos;);</div><div class="line">            String [] numInf_arrays=numInf.split(&quot;&amp;&quot;);</div><div class="line">            </div><div class="line">            //表共21列，Numbean共21个属性，拥有Getters和Setters</div><div class="line">            NumBean nb = new NumBean();</div><div class="line">                nb.setNum(numInf_arrays[0]);</div><div class="line">                nb.setArea(numInf_arrays[1]);</div><div class="line">                nb.setProvince(numInf_arrays[2]);</div><div class="line">                nb.setCity(numInf_arrays[3]);</div><div class="line">                nb.setCounty(numInf_arrays[4]);</div><div class="line">                nb.setWebname(numInf_arrays[5]);</div><div class="line">                nb.setWeburl(numInf_arrays[6]);</div><div class="line">                nb.setInfsource(numInf_arrays[7]);</div><div class="line">                nb.setInftype(numInf_arrays[8]);</div><div class="line">                nb.setWorktype(numInf_arrays[9]);</div><div class="line">                nb.setZbyg(numInf_arrays[10]);</div><div class="line">                nb.setZbgg(numInf_arrays[11]);</div><div class="line">                nb.setZsjg(numInf_arrays[12]);</div><div class="line">                nb.setGgbg(numInf_arrays[13]);</div><div class="line">                nb.setZbwj(numInf_arrays[14]);</div><div class="line">                nb.setZbdy(numInf_arrays[15]);</div><div class="line">                nb.setZbxx(numInf_arrays[16]);</div><div class="line">                nb.setKzj(numInf_arrays[17]);</div><div class="line">                nb.setLot(numInf_arrays[18]);</div><div class="line">                nb.setWebtype(numInf_arrays[19]);</div><div class="line">                nb.setRemark(numInf_arrays[20]);</div><div class="line">        </div><div class="line">        return nb;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法3：获取table表的，所有编号</div><div class="line">    public ArrayList&lt;String&gt; getAllNum(String table) throws SQLException&#123; //参数: 表名</div><div class="line">            ArrayList&lt;String&gt; numList = new  ArrayList&lt;String&gt;();</div><div class="line">            </div><div class="line">            String allNum =udb.selectAllColumn(table,&quot;num&quot;);</div><div class="line">            String [] allNum_arrays = allNum.split(&quot;##&quot;);</div><div class="line">            for(int i=0;i&lt;allNum_arrays.length;i++)&#123;</div><div class="line">                numList.add(allNum_arrays[i]);</div><div class="line">            &#125;</div><div class="line">            return numList;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法4:判断num编号属否在scope区间里面，返回布尔类型参数【true-属于，false-不属于】</div><div class="line">    public Boolean getMinMaxScope(String scope,int num)&#123;//参数：范围，编号</div><div class="line">            Boolean sign = false;//判断标识，默认为true</div><div class="line">            </div><div class="line">            String [] scope_arrays = scope.split(&quot;-&quot;);</div><div class="line">            int minScope =Integer.parseInt(scope_arrays[0]);</div><div class="line">            int maxScope =Integer.parseInt(scope_arrays[1]);</div><div class="line">            </div><div class="line">                if(minScope &lt;= num &amp;&amp; num &lt;= maxScope)&#123;</div><div class="line">                    sign =true;</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">            return sign;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法5:获取当前编号拥有URL的字段名【类型】</div><div class="line">    public ArrayList&lt;String&gt; getNum_HaveURLRecord(String table,String num) throws SQLException&#123; //参数：表名，编号</div><div class="line"></div><div class="line">        //查询数据库table表，num字段的11-18行，得到拥有记录的列名的ArrayList</div><div class="line">        ArrayList&lt;String&gt; alist=udb.selectAskinformation_Scope(table,&quot;num=&apos;&quot;+num+&quot;&apos;&quot;, &quot;11-18&quot;);//【11-18是招标预告到控制价】</div><div class="line"></div><div class="line">        return alist;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //方法6：根据列名，得到相应类型的字符串</div><div class="line">    public String getTypename(String columnName)&#123; //参数：列名</div><div class="line">                String type=&quot;&quot;;</div><div class="line"></div><div class="line">                if(columnName.equals(&quot;zbyg&quot;))&#123;</div><div class="line">                    type=&quot;ZhaobYgService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zbgg&quot;))&#123;</div><div class="line">                    type=&quot;ZhaobGgService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zsjg&quot;))&#123;</div><div class="line">                    type=&quot;ZisJgService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;ggbg&quot;))&#123;</div><div class="line">                    type=&quot;GonggBgService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zbwj&quot;))&#123;</div><div class="line">                    type=&quot;ZhaobWjService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zbdy&quot;))&#123;</div><div class="line">                    type=&quot;ZhaobDyService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;zbxx&quot;))&#123;</div><div class="line">                    type=&quot;ZhongbXxService&quot;;</div><div class="line">                &#125;else if(columnName.equals(&quot;kzj&quot;))&#123;</div><div class="line">                    type=&quot;KongZjService&quot;;</div><div class="line">                &#125;</div><div class="line">        </div><div class="line">        return type;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line">    //方法7：根据类型生成相应名称，返回HaspMap【无序键值队】</div><div class="line">    public HashMap&lt;String,String&gt; getTypeAllName(String type)&#123;  //参数：类型名，也是列名</div><div class="line">        HashMap&lt;String,String&gt; hm = new HashMap&lt;String,String&gt;();</div><div class="line"></div><div class="line">                if(type.equals(&quot;zbyg&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;zhaoBiaoYuGao&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhaobYgService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;招标预告&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhao_biao_yu_gao&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zbgg&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;zhaoBiaoGongGao&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhaobGgService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;招标公告&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhao_biao_gong_gao&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zsjg&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;ziShenJieGuo&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zisJgService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;咨审结果&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zi_shen_jie_guo&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;ggbg&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;gongGaoBianGeng&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;gonggBgService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;公告变更&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_gong_gao_bian_geng&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zbwj&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;zhaoBiaoWenJian&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhaobWjService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;招标文件&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhao_biao_wen_jian&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zbdy&quot;))&#123;</div><div class="line">                    hm.put(&quot;typeSpell&quot;, &quot;ZhaoBiaoDaYi&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhaobDyService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;招标答疑&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhao_biao_da_yi&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;zbxx&quot;))&#123;</div><div class="line">                    hm.put(&quot;typeSpell&quot;, &quot;zhongBiaoXinXi&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;zhongbXxService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;中标信息&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_zhong_biao_xin_xi&quot;);</div><div class="line">                &#125;else if(type.equals(&quot;kzj&quot;))&#123;</div><div class="line">                     hm.put(&quot;typeSpell&quot;, &quot;kongZhiJia&quot;);</div><div class="line">                     hm.put(&quot;typeService&quot;,&quot;kongZjService&quot;);</div><div class="line">                     hm.put(&quot;typeChinese&quot;,&quot;控制价&quot;);</div><div class="line">                     hm.put(&quot;tableName&quot;,&quot;t_kong_zhi_jia&quot;);</div><div class="line">                &#125;               </div><div class="line">        </div><div class="line">        return hm;      </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">//************************************************************************************************************************</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法SQLite-1：创建表结构</div><div class="line">    public void s_CreateTable(String useTable) throws SQLException&#123;</div><div class="line">        </div><div class="line">         //创建模版表</div><div class="line">        String sql1= &quot;CREATE TABLE if not exists article(&quot;  +            </div><div class="line">                                &quot;id  INCREMENT primary key,&quot; +</div><div class="line">                                &quot;model TEXT UNIQUE NOT NULL,&quot;               +</div><div class="line">                                &quot;detail TEXT NOT NULL&quot;      +</div><div class="line">                                &quot;);&quot; ;</div><div class="line">        //获取Excel数据表</div><div class="line">        String sql2=&quot;CREATE TABLE if not exists &quot;+useTable+&quot;(&quot; +</div><div class="line">                             &quot;num TEXT primary key,&quot; +</div><div class="line">                             &quot;area TEXT NOT NULL,&quot; +</div><div class="line">                             &quot;province TEXT,&quot; +</div><div class="line">                             &quot;city TEXT,&quot; +</div><div class="line">                             &quot;county TEXT,&quot; +</div><div class="line">                             &quot;webname TEXT,&quot; +</div><div class="line">                             &quot;weburl  TEXT,&quot; +</div><div class="line">                             &quot;infsource TEXT,&quot; +</div><div class="line">                             &quot;inftype   TEXT,&quot; +</div><div class="line">                             &quot;worktype TEXT,&quot; +</div><div class="line">                             &quot;zbyg  TEXT,&quot; +</div><div class="line">                             &quot;zbgg    TEXT,&quot; +</div><div class="line">                             &quot;zsjg  TEXT,&quot; +</div><div class="line">                             &quot;ggbg TEXT,&quot; +</div><div class="line">                             &quot;zbwj TEXT,&quot; +</div><div class="line">                             &quot;zbdy TEXT,&quot; +</div><div class="line">                             &quot;zbxx TEXT,&quot; +</div><div class="line">                             &quot;kzj TEXT,&quot; +</div><div class="line">                             &quot;lot TEXT,&quot; +</div><div class="line">                             &quot;webtype TEXT,&quot; +</div><div class="line">                             &quot;remark TEXT&quot;  +</div><div class="line">                             &quot;  )&quot;;</div><div class="line">        </div><div class="line">          udb.createSQL(sql1); </div><div class="line">          udb.createSQL(sql2); </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法SQLite-2.读取Excel表的数据，插入SQLite</div><div class="line">    public void s_InsertExcel(String excelPath) throws IOException,BiffException,SQLException&#123;//参数：Excel文件名,导入哪些工作表编号,导入哪个表</div><div class="line">        </div><div class="line">    </div><div class="line">        </div><div class="line">            UseExcel ue =new UseExcel();                                        //工具类</div><div class="line">        </div><div class="line">            //1.数据获取excel表的数据</div><div class="line">            HashMap [] sheets_map=ue.getExcel(excelPath);       </div><div class="line">        </div><div class="line">            //根据excel文件名建表</div><div class="line">            String tableName=excelPath.substring(excelPath.lastIndexOf(&quot;\\&quot;)+1,excelPath.lastIndexOf(&quot;.&quot;));</div><div class="line">            this.s_CreateTable(tableName);                                                              //创建表【article-保存模版,(useTable)-Excel工作薄数据】</div><div class="line">            </div><div class="line">            //2.正则判断</div><div class="line">            Pattern p = Pattern.compile(&quot;\\d+&quot;);//正则判断n行的第1列的数据是否是编号【开头是否为数字】，不是则跳过</div><div class="line"></div><div class="line">            //3.执行导入操作</div><div class="line">            if(sheets_map.length&gt;0)&#123;</div><div class="line">                System.out.println(&quot;将Excel数据插入SQLite数据库的&quot;+tableName+&quot;表---------------------------&gt;&quot;);</div><div class="line">                System.out.println(&quot;公有&quot;+sheets_map.length);</div><div class="line">                //A-遍历工作表</div><div class="line">                for(int n=0;n&lt;sheets_map.length;n++)&#123;</div><div class="line">                    HashMap&lt;Integer,ArrayList&gt; rows_map = sheets_map[n];        //获取行数据</div><div class="line"></div><div class="line">                    //B-遍历行</div><div class="line">                    for(int r=0;r&lt;rows_map.size();r++)&#123;                                         </div><div class="line">                        ArrayList&lt;String&gt; cols_list = (ArrayList)rows_map.get((Integer)r);;                             //获取每列数据</div><div class="line">                        </div><div class="line">                        System.out.print(r+&quot;行......&quot;);  </div><div class="line">                        if(cols_list.size() &lt;1  | !(p.matcher(cols_list.get(0))).find())    continue;   //整行不存在数据 or 匹配第1列数据,不是数字开头【编号格式01039】,跳过</div><div class="line">                        if(r %50 ==0)   System.out.println();                                                       //若50条记录换行一次</div><div class="line">                        </div><div class="line">                        //C-遍历列</div><div class="line">                        StringBuilder sb =new StringBuilder(&quot;&apos;&quot;);</div><div class="line">                        for(int c=0;c&lt;21;c++)&#123;                                                                               //【只需要21列数据】</div><div class="line">                            //拼接SQL</div><div class="line">                            if(c==20)&#123;</div><div class="line">                                sb.append(cols_list.get(c)+&quot;&apos;&quot;);</div><div class="line">                                continue;</div><div class="line">                            &#125;</div><div class="line">                                </div><div class="line">                            if(cols_list.get(c).length()&lt;1)</div><div class="line">                                sb.append(&quot;无&apos;,&apos;&quot;);</div><div class="line">                            else</div><div class="line">                                sb.append(cols_list.get(c)+&quot;&apos;,&apos;&quot;);</div><div class="line">                            </div><div class="line">//                          udb.insert(useTable,                                                                                //插入数据</div><div class="line">//                          &quot;&apos;&quot;+cols_list.get(0)+&quot;&apos;,&apos;&quot;+cols_list.get(1)+&quot;&apos;,&apos;&quot;+cols_list.get(2)+&quot;&apos;,&apos;&quot;+cols_list.get(3)+&quot;&apos;,&apos;&quot;+cols_list.get(4)+&quot;&apos;,&apos;&quot;</div><div class="line">//                              +cols_list.get(5)+&quot;&apos;,&apos;&quot;+cols_list.get(6)+&quot;&apos;,&apos;&quot;+cols_list.get(7)+&quot;&apos;,&apos;&quot;+cols_list.get(8)+&quot;&apos;,&apos;&quot;+cols_list.get(9)+&quot;&apos;,&apos;&quot;</div><div class="line">//                              +cols_list.get(10)+&quot;&apos;,&apos;&quot;+cols_list.get(11)+&quot;&apos;,&apos;&quot;+cols_list.get(12)+&quot;&apos;,&apos;&quot;+cols_list.get(13)+&quot;&apos;,&apos;&quot;+cols_list.get(14)+&quot;&apos;,&apos;&quot;</div><div class="line">//                              +cols_list.get(15)+&quot;&apos;,&apos;&quot;+cols_list.get(16)+&quot;&apos;,&apos;&quot;+cols_list.get(17)+&quot;&apos;,&apos;&quot;+cols_list.get(18)+&quot;&apos;,&apos;&quot;+cols_list.get(19)+&quot;&apos;,&apos;&quot;</div><div class="line">//                              +cols_list.get(20)+&quot;&apos;&quot;);</div><div class="line">                        &#125;</div><div class="line">                        udb.insert(tableName,sb.toString());                                                        //插入数据</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">**********************************************************************</div><div class="line">package main;</div><div class="line"></div><div class="line">/**更新时间： 2016.11.27</div><div class="line"> * </div><div class="line"> *  JavaBena，每一个编号</div><div class="line"> *          @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class NumBean &#123;</div><div class="line">    </div><div class="line">        private String num;             //网站数据源编码【编号】</div><div class="line">        private String area;                //区域</div><div class="line">        private String province;        //省份</div><div class="line">        private String city;                    //城市</div><div class="line">        private String county;          //区县</div><div class="line">        private String webname;      //网站数据源名称</div><div class="line">        private String weburl;          //网址</div><div class="line">        private String infsource;       //信息来源</div><div class="line">        private String inftype;         //信息类型</div><div class="line">        private String worktype;        //行业分类</div><div class="line">        private String zbyg;                //招标预告</div><div class="line">        private String zbgg;                //招标公告</div><div class="line">        private String zsjg;                //咨审结果</div><div class="line">        private String ggbg;                //公告变更</div><div class="line">        private String zbwj;                //招标文件</div><div class="line">        private String zbdy;                //招标答疑</div><div class="line">        private String zbxx;                //中标信息</div><div class="line">        private String kzj;                 //控制价</div><div class="line">        private String lot;                 //批次</div><div class="line">        private String webtype;     //原网站信息分类</div><div class="line">        private String remark;          //备注</div><div class="line">    </div><div class="line">            public String getNum() &#123;</div><div class="line">                return num;</div><div class="line">            &#125;</div><div class="line">            public String getArea() &#123;</div><div class="line">                return area;</div><div class="line">            &#125;</div><div class="line">            public String getProvince() &#123;</div><div class="line">                return province;</div><div class="line">            &#125;</div><div class="line">            public String getCity() &#123;</div><div class="line">                return city;</div><div class="line">            &#125;</div><div class="line">            public String getCounty() &#123;</div><div class="line">                return county;</div><div class="line">            &#125;</div><div class="line">            public String getWebname() &#123;</div><div class="line">                return webname;</div><div class="line">            &#125;</div><div class="line">            public String getWeburl() &#123;</div><div class="line">                return weburl;</div><div class="line">            &#125;</div><div class="line">            public String getInfsource() &#123;</div><div class="line">                return infsource;</div><div class="line">            &#125;</div><div class="line">            public String getInftype() &#123;</div><div class="line">                return inftype;</div><div class="line">            &#125;</div><div class="line">            public String getWorktype() &#123;</div><div class="line">                return worktype;</div><div class="line">            &#125;</div><div class="line">            public String getZbyg() &#123;</div><div class="line">                return zbyg;</div><div class="line">            &#125;</div><div class="line">            public String getZbgg() &#123;</div><div class="line">                return zbgg;</div><div class="line">            &#125;</div><div class="line">            public String getZsjg() &#123;</div><div class="line">                return zsjg;</div><div class="line">            &#125;</div><div class="line">            public String getGgbg() &#123;</div><div class="line">                return ggbg;</div><div class="line">            &#125;</div><div class="line">            public String getZbwj() &#123;</div><div class="line">                return zbwj;</div><div class="line">            &#125;</div><div class="line">            public String getZbdy() &#123;</div><div class="line">                return zbdy;</div><div class="line">            &#125;</div><div class="line">            public String getZbxx() &#123;</div><div class="line">                return zbxx;</div><div class="line">            &#125;</div><div class="line">            public String getKzj() &#123;</div><div class="line">                return kzj;</div><div class="line">            &#125;</div><div class="line">            public String getLot() &#123;</div><div class="line">                return lot;</div><div class="line">            &#125;</div><div class="line">            public String getWebtype() &#123;</div><div class="line">                return webtype;</div><div class="line">            &#125;</div><div class="line">            public String getRemark() &#123;</div><div class="line">                return remark;</div><div class="line">            &#125;</div><div class="line">            public void setNum(String num) &#123;</div><div class="line">                this.num = num;</div><div class="line">            &#125;</div><div class="line">            public void setArea(String area) &#123;</div><div class="line">                this.area = area;</div><div class="line">            &#125;</div><div class="line">            public void setProvince(String province) &#123;</div><div class="line">                this.province = province;</div><div class="line">            &#125;</div><div class="line">            public void setCity(String city) &#123;</div><div class="line">                this.city = city;</div><div class="line">            &#125;</div><div class="line">            public void setCounty(String county) &#123;</div><div class="line">                this.county = county;</div><div class="line">            &#125;</div><div class="line">            public void setWebname(String webname) &#123;</div><div class="line">                this.webname = webname;</div><div class="line">            &#125;</div><div class="line">            public void setWeburl(String weburl) &#123;</div><div class="line">                this.weburl = weburl;</div><div class="line">            &#125;</div><div class="line">            public void setInfsource(String infsource) &#123;</div><div class="line">                this.infsource = infsource;</div><div class="line">            &#125;</div><div class="line">            public void setInftype(String inftype) &#123;</div><div class="line">                this.inftype = inftype;</div><div class="line">            &#125;</div><div class="line">            public void setWorktype(String worktype) &#123;</div><div class="line">                this.worktype = worktype;</div><div class="line">            &#125;</div><div class="line">            public void setZbyg(String zbyg) &#123;</div><div class="line">                this.zbyg = zbyg;</div><div class="line">            &#125;</div><div class="line">            public void setZbgg(String zbgg) &#123;</div><div class="line">                this.zbgg = zbgg;</div><div class="line">            &#125;</div><div class="line">            public void setZsjg(String zsjg) &#123;</div><div class="line">                this.zsjg = zsjg;</div><div class="line">            &#125;</div><div class="line">            public void setGgbg(String ggbg) &#123;</div><div class="line">                this.ggbg = ggbg;</div><div class="line">            &#125;</div><div class="line">            public void setZbwj(String zbwj) &#123;</div><div class="line">                this.zbwj = zbwj;</div><div class="line">            &#125;</div><div class="line">            public void setZbdy(String zbdy) &#123;</div><div class="line">                this.zbdy = zbdy;</div><div class="line">            &#125;</div><div class="line">            public void setZbxx(String zbxx) &#123;</div><div class="line">                this.zbxx = zbxx;</div><div class="line">            &#125;</div><div class="line">            public void setKzj(String kzj) &#123;</div><div class="line">                this.kzj = kzj;</div><div class="line">            &#125;</div><div class="line">            public void setLot(String lot) &#123;</div><div class="line">                this.lot = lot;</div><div class="line">            &#125;</div><div class="line">            public void setWebtype(String webtype) &#123;</div><div class="line">                this.webtype = webtype;</div><div class="line">            &#125;</div><div class="line">            public void setRemark(String remark) &#123;</div><div class="line">                this.remark = remark;</div><div class="line">            &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">**********************************************************************</div><div class="line">package main;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseDB;</div><div class="line">import Utils.UseExcel;</div><div class="line">import Utils.UseString;</div><div class="line">import extend.example.GetFirstLetter;</div><div class="line"></div><div class="line"></div><div class="line">/**更新时间：2016.12.18</div><div class="line"> *      </div><div class="line"> * 任务流程</div><div class="line"> *           @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class GoTask &#123;</div><div class="line">    </div><div class="line">    </div><div class="line"></div><div class="line">//  private String numScope=&quot;00000-05000&quot;;                                                  //编号范围区间</div><div class="line">//  private String username=&quot;某男子&quot;;                                                                  //程序员名称</div><div class="line">    private String path=&quot;C:/Users/Liu-shuwei/Desktop\\&quot;;                                             //路径</div><div class="line">    private String catalogName=&quot;入库【3.3版,823表(区分程序猿and地区)】&quot;;             //文件名</div><div class="line">    private Boolean areaMatch=false;                                                                    //是否开启区域匹配【默认不开启】</div><div class="line">    private Boolean numMatch=false;                                                                 //是否开启默认匹配【默认不开启】</div><div class="line">    private String useExcel;                                                                                    //使用项目根目录下哪个Excel</div><div class="line">    private String useTable;                                                                                    //使用哪个表的数据【SQLite的话，不存在表则自动创建】</div><div class="line">    </div><div class="line">    public void setPath(String path)&#123;</div><div class="line">        this.path=path;</div><div class="line">    &#125;</div><div class="line">    public void setCatalogName(String cn)&#123;</div><div class="line">        this.catalogName=cn;</div><div class="line">    &#125;</div><div class="line">    public void setAreaMatch(Boolean b)&#123;</div><div class="line">        this.areaMatch=b;</div><div class="line">    &#125;</div><div class="line">    public void setNumMatch(Boolean b)&#123;</div><div class="line">        this.numMatch=b;</div><div class="line">    &#125;</div><div class="line">    public void setUseExcel(String excel)&#123;</div><div class="line">        this.useExcel=excel;</div><div class="line">    &#125;</div><div class="line">    public void setUseTable(String table)&#123;</div><div class="line">        this.useTable=table;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //任务1： 使用MySQL数据库</div><div class="line">    public void GO(String username,String numScope,String numArea) &#123;    //参数:程序猿，编号范围，地区</div><div class="line">            System.out.println(username+&quot;--------------------------------------------------&gt;Go!&quot;);</div><div class="line">        </div><div class="line">        //执行任务流程</div><div class="line">        try&#123;</div><div class="line">            </div><div class="line">            //一.获取对象</div><div class="line">            UseDB udb = new UseDB(&quot;mysql&quot;);</div><div class="line">            IOFile iof=new IOFile();</div><div class="line">            UseString us = new UseString();</div><div class="line">            </div><div class="line">            GetFirstLetter gfl = new GetFirstLetter();</div><div class="line"></div><div class="line">            GetTableData  gtd = new GetTableData(iof,udb);</div><div class="line">            AlterContent ac = new AlterContent(iof,udb,us,gtd);</div><div class="line">            </div><div class="line">            </div><div class="line">            udb.connDatabase(&quot;batchcreate_file&quot;);//连接数据库</div><div class="line">            </div><div class="line">            </div><div class="line">            //二.创建大目录,往数据库插入模版数据</div><div class="line">            iof.createCatalog(path, catalogName);</div><div class="line">            iof.createCatalog(path+&quot;/&quot;+catalogName, username);</div><div class="line">            String model1_BT =gtd.getModel(&quot;model_file/BackupTask.java&quot;);</div><div class="line">            String model2_RK =gtd.getModel(&quot;model_file/ZhaobGgServiceModel.java&quot;);</div><div class="line">            </div><div class="line">            </div><div class="line">            </div><div class="line">            //三.获取数据表数据，并生成目录and文件</div><div class="line">                //三-1获取所有编号</div><div class="line">                ArrayList&lt;String&gt; numList =gtd.getAllNum(useTable) ; </div><div class="line">                </div><div class="line">                </div><div class="line">                //三-2.遍历所有编号</div><div class="line">                for(int i=0;i&lt;numList.size();i++)&#123;</div><div class="line">                </div><div class="line">                    String num=numList.get(i);                                                      //当前编号</div><div class="line">                    String num_=numList.get(i) .replace(&quot;-&quot;,&quot;_&quot;);                           //编号下划线形态</div><div class="line">                    StringBuilder changePath =new StringBuilder(&quot;&quot;);                                            //变化路径</div><div class="line">                    </div><div class="line">                    //P1:判断是否开启编号范围匹配 and 比较当前编号是否在范围区间</div><div class="line">                    if( numMatch &amp;&amp; !gtd.getMinMaxScope(numScope, us.getInt(num.substring(0,5))))&#123;  //获取前5个数字</div><div class="line">                        continue;</div><div class="line">                    &#125;</div><div class="line">                    //P2:判断是否开启地区匹配 and 进行地区匹配</div><div class="line">                        if(areaMatch)&#123;</div><div class="line">                            String area =udb.select(useTable,&quot;area&quot;,&quot;num=&apos;&quot;+num+&quot;&apos;&quot;);</div><div class="line">                            if(!area.equals(numArea))&#123;</div><div class="line">                                continue;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    </div><div class="line">                        </div><div class="line">                        //a.获取当前编号的所有数据，并储存到JavaBean</div><div class="line">                        NumBean numBean =gtd.getNumInformation(useTable, num);</div><div class="line">                        </div><div class="line">                        //b.生成入库文件名，存储进ArrayList</div><div class="line">                         ArrayList&lt;String&gt; ifURLType_list =gtd.getNum_HaveURLRecord(useTable, num);             //获取当前编号所有&quot;含有URL&quot;的字段的类型【例:招标公告 zbgg】</div><div class="line">                         ArrayList&lt;String &gt; rukuName_list=new ArrayList&lt;String&gt;();                                                      //用于储存当前编号所需要的所有入库文件名</div><div class="line">                         StringBuilder rukuName=new StringBuilder(&quot;&quot;);</div><div class="line">                         for(String type:ifURLType_list)&#123;</div><div class="line">                             rukuName.append(gfl.getFirstLetter(numBean.getArea()).toUpperCase()+&quot;_&quot;+num_+&quot;_&quot;+gtd.getTypename(type));   //入库文件完整名【地区首字母(大写)_编号_类型服务名】</div><div class="line">                             rukuName_list.add(rukuName.toString());</div><div class="line">                             rukuName=rukuName.delete(0, rukuName.length());                                                                                //清空</div><div class="line">                         &#125;</div><div class="line">                         </div><div class="line">                        </div><div class="line">                        //d.生成入库子目录</div><div class="line">                        String catalog_1=&quot;入库-&quot;+num.substring(0,5);                                                                  //目录名</div><div class="line">                        changePath.insert(0,path+&quot;/&quot;+catalogName+&quot;/&quot;+username);                                     //子路径1                </div><div class="line">                        iof.createCatalog(changePath.toString(),&quot;入库-&quot;+num.substring(0,5));                          //创建入库子目录【入库-编号】</div><div class="line">                        </div><div class="line">                        </div><div class="line">                        //生成BackupTask.java</div><div class="line">                         changePath.append(&quot;/&quot;+catalog_1);                               //子路径1-2</div><div class="line">                         String sign = &quot;cover&quot;;                                                          //判断当前编号是需要修改还是覆盖【默认是覆盖，带-编号是alter,不带-是cover】</div><div class="line">                            if(i &gt; 0)&#123;                                                                           //大于0的时候进行判断   【顶部位置没有上一个编号】</div><div class="line">                                if(us.getInt(numList.get(i-1).substring(0,5)) == us.getInt(num.substring(0,5)))&#123;            </div><div class="line">                                    sign=&quot;alter&quot;;                                                            //如果和上个编号相等，则修改</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                         if(&quot;cover&quot;.equals(sign))&#123;                      //覆盖</div><div class="line">                                    ac.aBackupTask(changePath.toString(),&quot;BackupTask.java&quot;, model1_BT,sign,rukuName_list);</div><div class="line">                         &#125;else if(&quot;alter&quot;.equals(sign))&#123;                //修改</div><div class="line">                             String ageBackupTask=iof.rFileContent(changePath+&quot;/BackupTask.java&quot;,&quot;GBK&quot;);                    //读取已经已经存在的BackupTask.java</div><div class="line">                             ac.aBackupTask(changePath.toString(),&quot;BackupTask.java&quot;,ageBackupTask ,sign,rukuName_list);</div><div class="line">                         &#125;</div><div class="line">                         </div><div class="line">                        </div><div class="line">                        //e.生成入库文件</div><div class="line">                        iof.createCatalog(changePath.toString(),&quot;imp&quot;);          //生成imp目录</div><div class="line">                        changePath.append(&quot;/imp&quot;);                                       //子路径1-2-3</div><div class="line">                        for(int k=0;k&lt;ifURLType_list.size();k++)&#123;                    //根据拥有URL的类型，循环生成入库文件</div><div class="line">                            ac.aRK(changePath.toString(), rukuName_list.get(k)+&quot;.java&quot;, model2_RK,ifURLType_list.get(k),username,numBean);</div><div class="line">                        &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            //四.关闭资源</div><div class="line">            udb.closeAll();</div><div class="line">            </div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">//***********************************************************************************************************************************</div><div class="line">    </div><div class="line">    </div><div class="line">    //任务2： 使用SQLite</div><div class="line">        public void GO_SQLite(String username,String numScope,String numArea) &#123; //参数:程序猿，编号范围，地区</div><div class="line">            System.out.println(username+&quot;--------------------------------------------------&gt;Go!&quot;);</div><div class="line">        </div><div class="line">        //执行任务流程</div><div class="line">        try&#123;</div><div class="line">            </div><div class="line">            //一.获取对象</div><div class="line">            UseDB udb = new UseDB(&quot;SQLite&quot;);</div><div class="line">            IOFile iof=new IOFile();</div><div class="line">            UseString us = new UseString();</div><div class="line">            UseExcel ue =new UseExcel();</div><div class="line">            </div><div class="line">            GetFirstLetter gfl = new GetFirstLetter();</div><div class="line"></div><div class="line">            GetTableData  gtd = new GetTableData(iof,udb);</div><div class="line">            AlterContent ac = new AlterContent(iof,udb,us,gtd);</div><div class="line">            </div><div class="line">            </div><div class="line">            udb.connDatabase(&quot;batchcreate_file.db&quot;);                        //连接数据库【若不存在则创建】</div><div class="line">//          gtd.s_CreateTable(useTable);                                            //创建表【article-保存模版,(useTable)-Excel工作薄数据】</div><div class="line">//          gtd.s_InsertExcel(useExcel,useTable);                                //插入Excel数据,【传入excel文件名和使用表名】</div><div class="line">            </div><div class="line">            //二.创建大目录,往数据库插入模版数据</div><div class="line">            iof.createCatalog(path, catalogName);</div><div class="line">            iof.createCatalog(path+&quot;/&quot;+catalogName, username);</div><div class="line">            String model1_BT =gtd.getModel(&quot;model_file/BackupTask.java&quot;);</div><div class="line">            String model2_RK =gtd.getModel(&quot;model_file/ZhaobGgServiceModel.java&quot;);</div><div class="line">            </div><div class="line">            </div><div class="line">            </div><div class="line">            //三.获取数据表数据，并生成目录and文件</div><div class="line">                //三-1获取所有编号</div><div class="line">                ArrayList&lt;String&gt; numList =gtd.getAllNum(useTable) ; </div><div class="line">                </div><div class="line">                </div><div class="line">                //三-2.遍历所有编号</div><div class="line">                for(int i=0;i&lt;numList.size();i++)&#123;</div><div class="line">                </div><div class="line">                    String num=numList.get(i);                                                      //当前编号</div><div class="line">                    String num_=numList.get(i) .replace(&quot;-&quot;,&quot;_&quot;);                           //编号下划线形态</div><div class="line">                    StringBuilder changePath =new StringBuilder(&quot;&quot;);                                            //变化路径</div><div class="line">                    </div><div class="line">                    //P1:判断是否开启编号范围匹配 and 比较当前编号是否在范围区间</div><div class="line">                    if( numMatch &amp;&amp; !gtd.getMinMaxScope(numScope, us.getInt(num.substring(0,5))))&#123;  //获取前5个数字</div><div class="line">                        continue;</div><div class="line">                    &#125;</div><div class="line">                    //P2:判断是否开启地区匹配 and 进行地区匹配</div><div class="line">                        if(areaMatch)&#123;</div><div class="line">                            String area =udb.select(useTable,&quot;area&quot;,&quot;num=&apos;&quot;+num+&quot;&apos;&quot;);</div><div class="line">                            if(!area.equals(numArea))&#123;</div><div class="line">                                continue;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    </div><div class="line">                        </div><div class="line">                        //a.获取当前编号的所有数据，并储存到JavaBean</div><div class="line">                        NumBean numBean =gtd.getNumInformation(useTable, num);</div><div class="line">                        </div><div class="line">                        //b.生成入库文件名，存储进ArrayList</div><div class="line">                         ArrayList&lt;String&gt; ifURLType_list =gtd.getNum_HaveURLRecord(useTable, num);             //获取当前编号所有&quot;含有URL&quot;的字段的类型【例:招标公告 zbgg】</div><div class="line">                         ArrayList&lt;String &gt; rukuName_list=new ArrayList&lt;String&gt;();                                                      //用于储存当前编号所需要的所有入库文件名</div><div class="line">                         StringBuilder rukuName=new StringBuilder(&quot;&quot;);</div><div class="line">                         for(String type:ifURLType_list)&#123;</div><div class="line">                             rukuName.append(gfl.getFirstLetter(numBean.getArea()).toUpperCase()+&quot;_&quot;+num_+&quot;_&quot;+gtd.getTypename(type));   //入库文件完整名【地区首字母(大写)_编号_类型服务名】</div><div class="line">                             rukuName_list.add(rukuName.toString());</div><div class="line">                             rukuName=rukuName.delete(0, rukuName.length());                                                                                //清空</div><div class="line">                         &#125;</div><div class="line">                         </div><div class="line">                        </div><div class="line">                        //d.生成入库子目录</div><div class="line">                        String catalog_1=&quot;入库-&quot;+num.substring(0,5);                                                                  //目录名</div><div class="line">                        changePath.insert(0,path+&quot;/&quot;+catalogName+&quot;/&quot;+username);                                     //子路径1                </div><div class="line">                        iof.createCatalog(changePath.toString(),&quot;入库-&quot;+num.substring(0,5));                          //创建入库子目录【入库-编号】</div><div class="line">                        </div><div class="line">                        </div><div class="line">                        //生成BackupTask.java</div><div class="line">                         changePath.append(&quot;/&quot;+catalog_1);                               //子路径1-2</div><div class="line">                         String sign = &quot;cover&quot;;                                                          //判断当前编号是需要修改还是覆盖【默认是覆盖，带-编号是alter,不带-是cover】</div><div class="line">                            if(i &gt; 0)&#123;                                                                           //大于0的时候进行判断   【顶部位置没有上一个编号】</div><div class="line">                                if(us.getInt(numList.get(i-1).substring(0,5)) == us.getInt(num.substring(0,5)))&#123;            </div><div class="line">                                    sign=&quot;alter&quot;;                                                            //如果和上个编号相等，则修改</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                         if(&quot;cover&quot;.equals(sign))&#123;                      //覆盖</div><div class="line">                                    ac.aBackupTask(changePath.toString(),&quot;BackupTask.java&quot;, model1_BT,sign,rukuName_list);</div><div class="line">                         &#125;else if(&quot;alter&quot;.equals(sign))&#123;                //修改</div><div class="line">                             String ageBackupTask=iof.rFileContent(changePath+&quot;/BackupTask.java&quot;,&quot;UTF-8&quot;);                  //读取已经已经存在的BackupTask.java</div><div class="line">                             ac.aBackupTask(changePath.toString(),&quot;BackupTask.java&quot;,ageBackupTask ,sign,rukuName_list);</div><div class="line">                         &#125;</div><div class="line">                         </div><div class="line">                        </div><div class="line">                        //e.生成入库文件</div><div class="line">                        iof.createCatalog(changePath.toString(),&quot;imp&quot;);          //生成imp目录</div><div class="line">                        changePath.append(&quot;/imp&quot;);                                       //子路径1-2-3</div><div class="line">                        for(int k=0;k&lt;ifURLType_list.size();k++)&#123;                    //根据拥有URL的类型，循环生成入库文件</div><div class="line">                            ac.aRK(changePath.toString(), rukuName_list.get(k)+&quot;.java&quot;, model2_RK,ifURLType_list.get(k),username,numBean);</div><div class="line">                        &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            //四.关闭资源</div><div class="line">            udb.closeAll();</div><div class="line">            </div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">**********************************************************************</div><div class="line"></div><div class="line">package main;</div><div class="line"></div><div class="line">public class test &#123;</div><div class="line">    </div><div class="line"></div><div class="line">    //测试主方法</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">        long begin=System.currentTimeMillis();</div><div class="line">        </div><div class="line">        //创建任务流程对象</div><div class="line">        GoTask gt= new GoTask();</div><div class="line">            gt.setPath(&quot;C:/Users/Liu-shuwei/Desktop\\&quot;);</div><div class="line">            gt.setCatalogName(&quot;入库【4.0版,823表(完全版-未筛选)】&quot;);</div><div class="line">            gt.setNumMatch(false);      //是否开启编号范围匹配</div><div class="line">            gt.setAreaMatch(false);     //是否开启地区匹配</div><div class="line">        </div><div class="line">        //方式1：使用本地MySQL******************************************************************************************</div><div class="line">        //执行流程(参数:程序猿,编号范围,地区)</div><div class="line">        gt.setUseTable(&quot;webapi3&quot;);  </div><div class="line">        gt.GO(&quot;陈宇&quot;,&quot;02065-02145&quot;,&quot;华中&quot;);</div><div class="line">        gt.GO(&quot;刘聪&quot;,&quot;02396-02461&quot;,&quot;华北&quot;);</div><div class="line">        gt.GO(&quot;房文迪&quot;,&quot;01311-02769&quot;,&quot;华东&quot;);</div><div class="line">//      gt.GO(&quot;林佳法&quot;,&quot;02311-02371&quot;,);</div><div class="line">        gt.GO(&quot;严加远&quot;,&quot;02770-02781&quot;,&quot;华东&quot;);</div><div class="line">        gt.GO(&quot;吴健俊&quot;,&quot;01281-01596&quot;,&quot;西南&quot;);</div><div class="line">        gt.GO(&quot;周盛&quot;,&quot;01597-03456&quot;,&quot;西南&quot;);</div><div class="line">        gt.GO(&quot;占文冲&quot;,&quot;01552-03100&quot;,&quot;西北&quot;);</div><div class="line"></div><div class="line"></div><div class="line">        //方式2：使用SQLite******************************************************************************************************************************</div><div class="line">//      gt.setUseTable(&quot;api&quot;);          //使用表名【SQLite的若不存在会自动创建】</div><div class="line">//      gt.setUseExcel(&quot;8.23.xls&quot;);             //使用哪个Excel【项目根目录/Excel/】</div><div class="line">//      gt.GO_SQLite(&quot;陈宇&quot;,&quot;02065-02145&quot;,&quot;华中&quot;);</div><div class="line">//      gt.GO_SQLite(&quot;刘聪&quot;,&quot;02396-02461&quot;,&quot;华北&quot;);</div><div class="line">//      gt.GO_SQLite(&quot;房文迪&quot;,&quot;01311-02769&quot;,&quot;华东&quot;);</div><div class="line">//      gt.GO_SQLite(&quot;严加远&quot;,&quot;02770-02781&quot;,&quot;华东&quot;);</div><div class="line">//      gt.GO_SQLite(&quot;吴健俊&quot;,&quot;01281-01596&quot;,&quot;西南&quot;);</div><div class="line">//      gt.GO_SQLite(&quot;周盛&quot;,&quot;01597-03456&quot;,&quot;西南&quot;);</div><div class="line">//      gt.GO_SQLite(&quot;占文冲&quot;,&quot;01552-03100&quot;,&quot;西北&quot;);</div><div class="line">        </div><div class="line">        </div><div class="line">        System.out.println(&quot;共花费:&quot;+(double)(System.currentTimeMillis()-begin)/1000+&quot;秒&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br></p>
<h2 id="UI包"><a href="#UI包" class="headerlink" title="UI包"></a>UI包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * </div><div class="line"> */</div><div class="line">package UI;</div><div class="line"></div><div class="line">import java.awt.event.ActionEvent;</div><div class="line">import java.awt.event.ActionListener;</div><div class="line"></div><div class="line">import javax.swing.JButton;</div><div class="line">import javax.swing.JFrame;</div><div class="line">import javax.swing.JOptionPane;</div><div class="line">import javax.swing.JScrollPane;</div><div class="line">import javax.swing.JTextArea;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line"></div><div class="line">/**最后更新：2016.12.18</div><div class="line"> *      修改模版界面</div><div class="line"> * </div><div class="line"> * @author Suvan</div><div class="line"> */</div><div class="line">public class alterModelUI extends JFrame&#123;</div><div class="line">    </div><div class="line">    private JTextArea fileContent;          //多行文本</div><div class="line">    private JScrollPane scrollPane;         //滚动条</div><div class="line">    private JButton saveAlter;              //保存修改按钮</div><div class="line">    </div><div class="line">    //有参构造函数,初始化JFrame,切传入要读取的文件名</div><div class="line">    public alterModelUI(String fileName)&#123;</div><div class="line">        super();</div><div class="line">        this.getContentPane().setLayout(null);//设置容器，并且不设置布局</div><div class="line">        this.setSize(610,500);</div><div class="line">        this.setLocation(0, 300);</div><div class="line">        </div><div class="line">        load(fileName);         //加载界面</div><div class="line">        readFile(fileName); //读取文件,且显示到JTextArea</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法1：加载界面</div><div class="line">    private void load(String fileName)&#123;</div><div class="line">        </div><div class="line">        //1-赋值，构建对象</div><div class="line">        if(fileContent == null)&#123;</div><div class="line">            fileContent = new JTextArea();</div><div class="line">            fileContent.setBounds(0,0,605,400);</div><div class="line">            </div><div class="line">        &#125;if(scrollPane == null)&#123;</div><div class="line">            scrollPane = new JScrollPane(fileContent);</div><div class="line">            scrollPane.setBounds(0,0,605,400);</div><div class="line">        &#125;</div><div class="line">        if(saveAlter == null)&#123;</div><div class="line">            saveAlter = new JButton(&quot;保存修改&quot;);</div><div class="line">            saveAlter.setBounds(220,403,150,50);</div><div class="line">            </div><div class="line">            //A.【保存修改】注册按钮点击事件且添加监听</div><div class="line">            saveAlter.addActionListener(new ActionListener()&#123;</div><div class="line">                public void actionPerformed(ActionEvent e)&#123;</div><div class="line">                    try&#123;</div><div class="line">                        IOFile iof = new IOFile();</div><div class="line"></div><div class="line">                        iof.cFile(&quot;model_file&quot;, fileName, &quot;UTF-8&quot;,fileContent.getText());           //新建文件</div><div class="line">                        </div><div class="line">                        JOptionPane.showMessageDialog(null, &quot;保存成功&quot;, &quot;success&quot;,JOptionPane.WARNING_MESSAGE);  //弹出提示对话框</div><div class="line">                        </div><div class="line">                    &#125;catch(Exception k)&#123;</div><div class="line">                        JOptionPane.showMessageDialog(null, &quot;保存失败,出现异常&quot;, &quot;fail&quot;,JOptionPane.WARNING_MESSAGE);  </div><div class="line">                        k.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        this.add(scrollPane);</div><div class="line">        this.add(saveAlter);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法2：读取文件</div><div class="line">    private void readFile(String fileName)&#123;</div><div class="line">        try&#123;</div><div class="line">            IOFile iof = new IOFile();</div><div class="line">            String content = iof.rFileContent(&quot;model_file/&quot;+fileName, &quot;utf-8&quot;);</div><div class="line">            this.fileContent.setText(content);</div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">**********************************************************************</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> */</div><div class="line">package UI;</div><div class="line"></div><div class="line">import java.awt.event.ActionEvent;</div><div class="line">import java.awt.event.ActionListener;</div><div class="line">import java.io.File;</div><div class="line"></div><div class="line">import javax.swing.JButton;</div><div class="line">import javax.swing.JFileChooser;</div><div class="line">import javax.swing.JFrame;</div><div class="line">import javax.swing.JLabel;</div><div class="line">import javax.swing.JOptionPane;</div><div class="line">import javax.swing.JTextField;</div><div class="line">import javax.swing.filechooser.FileNameExtensionFilter;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseDB;</div><div class="line">import main.GetTableData;</div><div class="line"></div><div class="line">/**最后更新：2016.12.18</div><div class="line"> *      导入excel数据页面</div><div class="line"> * </div><div class="line"> * @author Suvan</div><div class="line"> */</div><div class="line">public class insertUI extends JFrame implements ActionListener&#123;</div><div class="line">    </div><div class="line">    private JTextField excelFilePath;       //excel表格的文件路径</div><div class="line">    private JButton fileChoice;             //文件选择</div><div class="line">    private JButton beginInsert;            //开始导入</div><div class="line">    </div><div class="line">    //无参构造函数</div><div class="line">    public insertUI()&#123;</div><div class="line">        super();</div><div class="line">        this.getContentPane().setLayout(null);  //获取Container容器,装载JFrame窗体,且设置空布局</div><div class="line">        this.setTitle(&quot;导入excel表数据&quot;);                //标题</div><div class="line">        this.setSize(300,200);                              //面积</div><div class="line">        this.setLocation(610, 0);                           //位置</div><div class="line">        </div><div class="line">        this.load();    //加载界面</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法1: 加载界面</div><div class="line">    private void load()&#123;</div><div class="line">        </div><div class="line">        //1.构建组件    </div><div class="line">        JLabel lb_excelFilePath = new JLabel(&quot;excel文件路径:&quot;);</div><div class="line">        lb_excelFilePath.setBounds(20,30,100,25);           //设置x,y【屏幕坐标】,width,height【组件宽高】</div><div class="line">        </div><div class="line">        if(excelFilePath == null)&#123;</div><div class="line">            excelFilePath = new JTextField();               </div><div class="line">            excelFilePath.setBounds(20, 60, 220, 25);   </div><div class="line">        &#125;</div><div class="line">        if(fileChoice == null)&#123;</div><div class="line">            fileChoice = new JButton(&quot;...&quot;);</div><div class="line">            fileChoice.setBounds(240,60,25,25);</div><div class="line">            </div><div class="line">            fileChoice.addActionListener(this);                 //注册按钮监听事件</div><div class="line">        &#125;</div><div class="line">        if(beginInsert == null)&#123;</div><div class="line">            beginInsert = new JButton(&quot;开始导入&quot;);</div><div class="line">            beginInsert.setBounds(100,100,90,35);</div><div class="line">            </div><div class="line">            beginInsert.addActionListener(this);                //注册按钮监听事件</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //2.为窗体添加组件</div><div class="line">        this.add(lb_excelFilePath);         this.add(excelFilePath);</div><div class="line">        this.add(fileChoice);</div><div class="line">        this.add(beginInsert);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    //方法2.按钮点击事件</div><div class="line">    public void actionPerformed(ActionEvent e)&#123;</div><div class="line">        </div><div class="line">        if(&quot;...&quot;.equals(e.getActionCommand()))&#123;</div><div class="line">            //A.构建文件选择器</div><div class="line">             JFileChooser fc = new JFileChooser(); </div><div class="line">             fc.setFileSelectionMode(JFileChooser.FILES_ONLY);//设置只能选择文件</div><div class="line">             fc.setFileFilter(new FileNameExtensionFilter(&quot;只支持Excel97-2003 工作簿(*.xls)&quot;,&quot;xls&quot;));     //【&quot;提示信息&quot;,&quot;支持类型&quot;】-文件过滤器</div><div class="line">             </div><div class="line">             int result = fc.showOpenDialog(this);                  //弹出打开文件对话框</div><div class="line">//           int resut =fc.showSaveDialog(this);                        //弹出&quot;保存文件&quot;对话框</div><div class="line">              if( result == JFileChooser.APPROVE_OPTION)&#123;   //表示获得选中对象</div><div class="line">                  File f = fc.getSelectedFile();</div><div class="line">                 excelFilePath.setText(fc.getSelectedFile().getPath()); //  获得文件路径设置到JTestField</div><div class="line">              &#125;</div><div class="line">              </div><div class="line">        &#125;else if(&quot;开始导入&quot;.equals(e.getActionCommand()))&#123;</div><div class="line">            if(excelFilePath.getText().length()&gt;2)&#123;</div><div class="line">                try&#123;</div><div class="line">                    UseDB udb = new UseDB(&quot;SQLite&quot;);</div><div class="line">                    IOFile iof = new IOFile();</div><div class="line">                    GetTableData  gtd = new GetTableData(iof,udb);</div><div class="line">                    </div><div class="line">                    udb.connDatabase(&quot;batchcreate_file.db&quot;);                        //连接数据库【若不存在则创建】    </div><div class="line">                    gtd.s_InsertExcel(excelFilePath.getText());                              //导入Excel数据,【传入excel文件名和使用表名】</div><div class="line"></div><div class="line">                    JOptionPane.showMessageDialog(null, &quot;导入成功！&quot;, &quot;success&quot;,JOptionPane.PLAIN_MESSAGE);                                                  //提示信息</div><div class="line">                &#125;catch(Exception k)&#123;</div><div class="line">                    JOptionPane.showMessageDialog(null, &quot;抱歉,导入失败,出现异常！&quot;, &quot;fail&quot;,JOptionPane.ERROR_MESSAGE);                                 //错误信息</div><div class="line">                    k.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;else&#123;</div><div class="line">                JOptionPane.showMessageDialog(null, &quot;大兄弟,请选择目录or手动填写目录！&quot;, &quot;success&quot;,JOptionPane.WARNING_MESSAGE);   //警告信息</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        insertUI i = new insertUI();</div><div class="line">        i.setVisible(true);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">**********************************************************************</div><div class="line">package UI;</div><div class="line"></div><div class="line">import java.awt.Color;</div><div class="line">import java.awt.Graphics;</div><div class="line">import java.awt.event.ActionEvent;</div><div class="line">import java.awt.event.ActionListener;</div><div class="line"></div><div class="line">import javax.swing.JButton;</div><div class="line">import javax.swing.JCheckBox;</div><div class="line">import javax.swing.JComboBox;</div><div class="line">import javax.swing.JFrame;</div><div class="line">import javax.swing.JLabel;</div><div class="line">import javax.swing.JOptionPane;</div><div class="line">import javax.swing.JPanel;</div><div class="line">import javax.swing.JTextField;</div><div class="line"></div><div class="line">import Utils.IOFile;</div><div class="line">import Utils.UseDB;</div><div class="line">import main.GoTask;</div><div class="line"></div><div class="line">/**最后更新:2016.12.18</div><div class="line"> *      主界面     </div><div class="line"> * </div><div class="line"> *@author Suvan</div><div class="line"> */</div><div class="line">public class mainUI  extends JFrame implements ActionListener&#123;</div><div class="line">        </div><div class="line">    private  JComboBox&lt;String&gt; db_table;                //选择数据表 -组合框</div><div class="line">    private JButton db_insertTable;                         //&quot;导入数据&quot;-按钮</div><div class="line">    private JButton model_alterB;                               //&quot;修改模版2&quot;-按钮 【BackTaskup.java】</div><div class="line">    private JButton model_alterZ;                               //&quot;修改模版2&quot;-按钮【ZhaoGgServiceModel.java】</div><div class="line">    </div><div class="line">    private JButton go;                                             //&quot;开始&quot;-按钮</div><div class="line">    </div><div class="line">    private JLabel model1;                                          //BackTaskup.java模版</div><div class="line">    private JLabel model2;                                          //ZhaoGgServiceModel.java模版</div><div class="line">    private JTextField path;                                        //目录路径</div><div class="line">    private JTextField catologName;                         //目录名</div><div class="line">    private JTextField userName;                                //程序猿</div><div class="line">    private JTextField beginNum;                                //开始编号</div><div class="line">    private JTextField endNum;                                  //结束编号</div><div class="line">    private JTextField area;                                            //地区</div><div class="line">    </div><div class="line">    private JCheckBox match_num;                            //是否开启编号范围匹配</div><div class="line">    private JCheckBox match_area;                           //是否开启地区匹配</div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line">    //无参构造函数  </div><div class="line">    public mainUI()&#123;</div><div class="line">        super();</div><div class="line">        this.getContentPane().setLayout(null);  //获取Container容器,装载JFrame窗体,且设置空布局</div><div class="line">        this.setTitle(&quot;BatchCreate 4.0&quot;);               //设置标题</div><div class="line">        this.setSize(610,300);                              //设置宽,高</div><div class="line">        </div><div class="line">        this.getLeft();                                             //界面左模块</div><div class="line">        this.getRight();                                            //界面右模块</div><div class="line">    </div><div class="line">        this.ageRecord(&quot;read&quot;);                         //读取填写记录</div><div class="line">        </div><div class="line">        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);                //关闭窗口即退出程序</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法1：界面左模块</div><div class="line">    private void  getLeft()&#123;</div><div class="line">        </div><div class="line">        //1.构建组件</div><div class="line">        model1 = new JLabel(&quot;BackTask.java&quot;);                               //标签</div><div class="line">        model1.setBounds(5,100,150,25);</div><div class="line">        model2 = new JLabel(&quot;ZhaoGgServiceModel.java&quot;);         //标签</div><div class="line">        model2.setBounds(5,180,150,25);</div><div class="line">        </div><div class="line">        if(db_table ==null)&#123;        </div><div class="line">            db_table = new JComboBox&lt;String&gt;();                         //组合框</div><div class="line">            db_table.setBounds(5,20,150,25);//x,y【坐标】,width,height【宽,高】</div><div class="line"></div><div class="line">                try&#123;</div><div class="line">                    UseDB udb =new UseDB(&quot;SQLite&quot;);</div><div class="line">                    udb.connDatabase(&quot;batchcreate_file.db&quot;);    </div><div class="line">                    String [] table=udb.selectSQL(&quot;SELECT name FROM SQLITE_MASTER WHERE type=&apos;table&apos;ORDER BY name&quot;).split(&quot;&amp;&amp;&quot;);</div><div class="line">                    for(int i=0;i&lt;table.length;i++)&#123;</div><div class="line">                        if(&quot;article&quot;.equals(table[i]))  continue;       //去除article表【模版表】</div><div class="line">                        db_table.addItem(table[i]);</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    udb.closeAll();</div><div class="line">                &#125;catch(Exception e)&#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        if(db_insertTable == null)&#123;                                 </div><div class="line">            db_insertTable = new JButton(&quot;导入数据&quot;);                   //按钮</div><div class="line">            db_insertTable.setBounds(175,20,100,25);                        //设置x,y【屏幕坐标】,width,height【组件宽高】</div><div class="line">            </div><div class="line">            db_insertTable.addActionListener(this);                         //注册按钮点击事件</div><div class="line">        &#125;</div><div class="line">        if(model_alterB == null)&#123;                                           </div><div class="line">            model_alterB = new JButton(&quot;修改模版1&quot;);                        //按钮</div><div class="line">            model_alterB.setBounds(175,100,100,25);</div><div class="line">            </div><div class="line">            model_alterB.addActionListener(this);                       </div><div class="line">        &#125;</div><div class="line">        if(model_alterZ == null)&#123;</div><div class="line">            model_alterZ = new JButton(&quot;修改模版2&quot;);                        //按钮</div><div class="line">            model_alterZ.setBounds(175,180,100,25);</div><div class="line">            </div><div class="line">            model_alterZ.addActionListener(this);                           </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        JPanel panel_1 = new JPanel()&#123;                                          //画垂直分割线【分隔左右模块】</div><div class="line">            public void paint(Graphics g)&#123;</div><div class="line">                super.paint(g);</div><div class="line">                g.setColor(Color.GRAY);</div><div class="line">                 g.drawLine(0,0,0,300); //(x,y)点到(x,y)点</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        panel_1.setBounds(280, 0, 1, 300);</div><div class="line">        </div><div class="line">        </div><div class="line">        //2.添加组件</div><div class="line">        this.add(panel_1);</div><div class="line">        this.add(db_table)  ;       this.add(db_insertTable);</div><div class="line">        this.add(model1);           this.add(model_alterB);</div><div class="line">        this.add(model2);           this.add(model_alterZ);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法2:界面右模块</div><div class="line">    private void getRight()&#123;</div><div class="line">        </div><div class="line">        //1.构建组件</div><div class="line">        JLabel lb_path = new JLabel(&quot;目录路径&quot;);                                        //标签</div><div class="line">        JLabel lb_catologName = new JLabel(&quot;目录名&quot;);                          //标签</div><div class="line">        JLabel lb_userName = new JLabel(&quot;程序猿&quot;);                                 //标签</div><div class="line">        JLabel lb_beginNum = new JLabel(&quot;开始编号    ----&quot;);                    //标签</div><div class="line">        JLabel lb_endNum = new JLabel(&quot;终止编号&quot;);                              //标签</div><div class="line">        JLabel lb_area = new JLabel(&quot;地区&quot;);                                              //标签</div><div class="line">        </div><div class="line">        lb_path.setBounds(290,20,60,25);                        //设置x,y【屏幕坐标】,width,height【组件宽高】                                </div><div class="line">        lb_catologName.setBounds(290,50,55,25);</div><div class="line">        lb_userName.setBounds(285,100,55,25);</div><div class="line">        lb_beginNum.setBounds(285,145,90,25);</div><div class="line">        lb_endNum.setBounds(380,145,55,25);</div><div class="line">        lb_area.setBounds(285,220,55,25);</div><div class="line">        </div><div class="line">        if(path == null)&#123;</div><div class="line">            path  = new JTextField();                                   //单行文本</div><div class="line">            path.setBounds(350,20,220,25);</div><div class="line">        &#125;</div><div class="line">        if(catologName == null)&#123;</div><div class="line">            catologName = new JTextField();                  //单行文本</div><div class="line">            catologName.setBounds(350,50,220,25);</div><div class="line">        &#125;</div><div class="line">        if(userName == null)&#123;</div><div class="line">            userName = new JTextField();                            //单行文本</div><div class="line">            userName.setBounds(330,100,100,25);</div><div class="line">        &#125;</div><div class="line">        if(beginNum == null)&#123;</div><div class="line">            beginNum = new JTextField();                            //单行文本</div><div class="line">            beginNum.setBounds(285,175,50,25);</div><div class="line">        &#125;</div><div class="line">        if(endNum == null)&#123;</div><div class="line">            endNum = new JTextField();                          //单行文本</div><div class="line">            endNum.setBounds(380,175,50,25);</div><div class="line">        &#125;</div><div class="line">        if(area == null)&#123;</div><div class="line">            area = new JTextField();                                    //单行文本</div><div class="line">            area.setBounds(330,220,100,25);;</div><div class="line">        &#125;</div><div class="line">        if(match_num == null)&#123;</div><div class="line">            match_num = new JCheckBox(&quot;是否开启编号范围匹配&quot;);         //复选按钮</div><div class="line">            match_num.setBounds(440,110,200,25);</div><div class="line">        &#125;</div><div class="line">        if(match_area == null)&#123;</div><div class="line">            match_area = new JCheckBox(&quot;是否开启区域匹配&quot;);             //复选按钮</div><div class="line">            match_area.setBounds(440,140,150,25);</div><div class="line">        &#125;</div><div class="line">        if(go == null)&#123;</div><div class="line">            go = new JButton(&quot;开始&quot;);                                      //按钮</div><div class="line">            go.setBounds(440,190,145,50);</div><div class="line">            </div><div class="line">            go.addActionListener(this);                                     //注册按钮点击事件</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        JPanel panel_1 = new JPanel()&#123;                                  //画水平分割线【分隔右模块的上下】</div><div class="line">            public void paint(Graphics g)&#123;</div><div class="line">                super.paint(g);</div><div class="line">                g.setColor(Color.GRAY);</div><div class="line">                 g.drawLine(0,0,300,0); //(x,y)点到(x,y)点</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        panel_1.setBounds(280, 90, 320, 1);</div><div class="line">        </div><div class="line">        JPanel panel_2 = new JPanel()&#123;                                //画水垂直割线【分隔右模块的下部分的左右】</div><div class="line">            public void paint(Graphics g)&#123;</div><div class="line">                super.paint(g);</div><div class="line">                g.setColor(Color.GRAY);</div><div class="line">                 g.drawLine(0,0,0,300); //(x,y)点到(x,y)点</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        panel_2.setBounds(435, 90, 1, 300);</div><div class="line">        </div><div class="line">        </div><div class="line">        //2.添加组件</div><div class="line">        this.add(panel_1);</div><div class="line">        this.add(panel_2);</div><div class="line">        this.add(lb_path);                      this.add(path);</div><div class="line">        this.add(lb_catologName);       this.add(catologName);</div><div class="line">        this.add(lb_userName);          this.add(userName);</div><div class="line">        this.add(lb_beginNum);          this.add(beginNum);</div><div class="line">        this.add(lb_endNum);                this.add(endNum);</div><div class="line">        this.add(lb_area);                      this.add(area);</div><div class="line">        this.add(match_num);</div><div class="line">        this.add(match_area);</div><div class="line">        this.add(go);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    //方法3.读取上次记录</div><div class="line">    public void ageRecord(String state)&#123;    //参数:状态</div><div class="line">        </div><div class="line">            IOFile iof = new IOFile();</div><div class="line">        try&#123;</div><div class="line">            </div><div class="line">            if(&quot;read&quot;.equals(state))&#123;               //处理读取状态</div><div class="line">                </div><div class="line">                //A-读取文件内容,转成utf-8格式</div><div class="line">                String content=iof.rFileContent(&quot;Data/record.suvan&quot;, &quot;UTF-8&quot;);          </div><div class="line">                </div><div class="line">                //B-处理数据,得到数组</div><div class="line">                String [] result =content.split(&quot;\n&quot;);  //以换行符作为分隔符,每一行为1个数组元素</div><div class="line">                for(int i=0;i&lt;result.length;i++)&#123;</div><div class="line">                    result[i]=result[i].substring(result[i].indexOf(&quot;&lt;[&quot;)+2, result[i].lastIndexOf(&quot;]&gt;&quot;));  //</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                //C-将数据设置到相应组件</div><div class="line">                path.setText(result[0]);</div><div class="line">                catologName.setText(result[1]);</div><div class="line">                userName.setText(result[2]);</div><div class="line">                beginNum.setText(result[3]);</div><div class="line">                endNum.setText(result[4]);</div><div class="line">                area.setText(result[5]);</div><div class="line">                </div><div class="line">            &#125;else if(&quot;save&quot;.equals(state))&#123; //处理保存状态</div><div class="line">                </div><div class="line">                //点击开始即保存数据到record.suvan文件</div><div class="line">                StringBuilder sb =new StringBuilder();</div><div class="line">                sb.append(&quot;path:&lt;[&quot;+path.getText()+&quot;]&gt;\n&quot;);</div><div class="line">                sb.append(&quot;catologName:&lt;[&quot;+catologName.getText()+&quot;]&gt;\n&quot;);</div><div class="line">                sb.append(&quot;userName:&lt;[&quot;+userName.getText()+&quot;]&gt;\n&quot;);</div><div class="line">                sb.append(&quot;beginNum:&lt;[&quot;+beginNum.getText()+&quot;]&gt;\n&quot;);</div><div class="line">                sb.append(&quot;endNum:&lt;[&quot;+endNum.getText()+&quot;]&gt;\n&quot;);</div><div class="line">                sb.append(&quot;area:&lt;[&quot;+area.getText()+&quot;]&gt;\n&quot;);</div><div class="line">                </div><div class="line">                iof.cFile(&quot;Data&quot;, &quot;record.suvan&quot;, &quot;UTF-8&quot;,sb.toString());</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            </div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法4:事件点击</div><div class="line">    public void actionPerformed(ActionEvent e)&#123;</div><div class="line">        </div><div class="line">        if(&quot;导入数据&quot;.equals(e.getActionCommand()))&#123;</div><div class="line">            insertUI i = new insertUI();</div><div class="line">            i.setVisible(true);</div><div class="line">            </div><div class="line">        &#125;else if(&quot;修改模版1&quot;.equals(e.getActionCommand()))&#123;</div><div class="line">                //A1-BackupTask模版界面</div><div class="line">                alterModelUI a1 = new alterModelUI(&quot;BackupTask.java&quot;);//加载界面,且传入要读取的文件名</div><div class="line">                    a1.setTitle(&quot;BackTask.java模版&quot;);</div><div class="line">                    a1.setVisible(true);</div><div class="line">                </div><div class="line">                //A2-BackupTask语法修改界面</div><div class="line">//              alterModelUI a2 =new alterModelUI(&quot;BackupTask.txt&quot;);</div><div class="line">//                  a2.setLocation(a1.getX()+a1.getWidth(), a1.getY()); //基于a1的坐标进行设定</div><div class="line">//                  a2.setTitle(&quot;语义修改&quot;);</div><div class="line">//                  a2.setVisible(true);</div><div class="line">                </div><div class="line">        &#125;else if(&quot;修改模版2&quot;.equals(e.getActionCommand()))&#123;</div><div class="line">                //B1-ZhaobGgServiceModel模版界面</div><div class="line">                alterModelUI b1 = new alterModelUI(&quot;ZhaobGgServiceModel.java&quot;);</div><div class="line">                    b1.setTitle(&quot;ZhaoGgServiceModel.java模版&quot;);</div><div class="line">                    b1.setVisible(true);</div><div class="line">                </div><div class="line">                //B2-ZhaobGgServiceModel语法修改界面</div><div class="line">//              alterModelUI b2 = new alterModelUI(&quot;ZhaobGgServiceModel.txt&quot;);</div><div class="line">//                  b2.setTitle(&quot;语义修改&quot;);;</div><div class="line">//                  b2.setLocation(b1.getX()+b1.getWidth(), b1.getY()); //基于a1的坐标进行设定</div><div class="line">//                  b2.setVisible(true);</div><div class="line">            </div><div class="line">        &#125;else if(&quot;开始&quot;.equals(e.getActionCommand()))&#123;</div><div class="line">            //1.保存数据</div><div class="line">            this.ageRecord(&quot;save&quot;);</div><div class="line">            </div><div class="line">            //2.复选框判断</div><div class="line">            boolean numSign =true;  //开启了编号范围匹配,则必须填写开始和结束编号</div><div class="line">            boolean areaSign = true;//开启了地区匹配,则必须填写地区</div><div class="line">            if(match_num.isSelected())&#123;</div><div class="line">                if(beginNum.getText().length()&lt;1 || endNum.getText().length()&lt;1)&#123;</div><div class="line">                    numSign = false;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if(match_area.isSelected())&#123;</div><div class="line">                if(area.getText().length()&lt;1)&#123;</div><div class="line">                    areaSign =false;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            //3.执行自动生成操作</div><div class="line">            if(path.getText().length()&gt;1 &amp;&amp; catologName.getText().length()&gt;1 &amp;&amp; userName.getText().length()&gt;0 )&#123;</div><div class="line">                    if(numSign &amp;&amp; areaSign)&#123;</div><div class="line">                        GoTask gt= new GoTask();</div><div class="line">                        gt.setPath(path.getText());                                                             //C:/Users/Liu-shuwei/Desktop\\</div><div class="line">                        gt.setCatalogName(catologName.getText());                           //入库【4.0版,823表(完全版-未筛选)】</div><div class="line">                        gt.setNumMatch(match_num.isSelected());                             //是否开启编号范围匹配</div><div class="line">                        gt.setAreaMatch(match_area.isSelected());                               //是否开启地区匹配</div><div class="line">                        gt.setUseTable(db_table.getSelectedItem().toString());          //使用表名【SQLite的若不存在会自动创建】</div><div class="line">                        </div><div class="line">                        gt.GO_SQLite(userName.getText(),beginNum.getText()+&quot;-&quot;+endNum.getText(), area.getText());</div><div class="line">//                      gt.GO_SQLite(&quot;陈宇&quot;,&quot;02065-02145&quot;,&quot;华中&quot;);</div><div class="line">                        JOptionPane.showMessageDialog(null, &quot;生成完毕！&quot;, &quot;success&quot;,JOptionPane.PLAIN_MESSAGE);  </div><div class="line">                    &#125;else&#123;</div><div class="line">                        JOptionPane.showMessageDialog(null, &quot;开启了编号范围匹配 or 地区匹配\n则必须填写相应字段！&quot;, &quot;falil&quot;,JOptionPane.ERROR_MESSAGE);  </div><div class="line">                    &#125;</div><div class="line">            &#125;else&#123;</div><div class="line">                JOptionPane.showMessageDialog(null, &quot;抱歉,路径,文件名,程序猿不能为空！&quot;, &quot;falil&quot;,JOptionPane.ERROR_MESSAGE);  </div><div class="line">            &#125;       </div><div class="line">        &#125;   </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">        try&#123;</div><div class="line">            mainUI m = new mainUI();</div><div class="line">            m.setVisible(true);</div><div class="line">        &#125;catch(Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">**********************************************************************</div><div class="line"></div><div class="line">package UI;</div><div class="line"></div><div class="line">import java.awt.Color;</div><div class="line">import java.awt.Container;</div><div class="line">import java.awt.Dimension;</div><div class="line">import java.awt.event.ActionEvent;</div><div class="line">import java.awt.event.ActionListener;</div><div class="line">import java.util.TimerTask;</div><div class="line"></div><div class="line">import javax.swing.JFrame;</div><div class="line">import javax.swing.JProgressBar;</div><div class="line">import javax.swing.Timer;</div><div class="line">import javax.swing.event.ChangeEvent;</div><div class="line">import javax.swing.event.ChangeListener;</div><div class="line"></div><div class="line"></div><div class="line">/**最后更新：2016.12.17</div><div class="line"> *          进度条页面，可根据需求配置定时器 【在项目中未实现】</div><div class="line"> * @author Suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class ProgressBar implements ActionListener,ChangeListener&#123;      //Change事件，让类能够实现接收和处理的Change事件</div><div class="line">    </div><div class="line">    </div><div class="line">        private JFrame frame=null;</div><div class="line">        private JProgressBar progressbar;</div><div class="line">        public Timer timer;</div><div class="line"></div><div class="line">        //1.无参构造函数，用于初始化界面</div><div class="line">        public ProgressBar()&#123;</div><div class="line">             </div><div class="line">                if(frame == null)&#123;</div><div class="line">                    frame=new JFrame(&quot;进度条&quot;);//窗体</div><div class="line">                    frame.setBounds(100, 100, 400, 130);    //x,y 坐标,width,height</div><div class="line">                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   //点击X健，退出程序且关闭线程</div><div class="line">                &#125;</div><div class="line">                if(progressbar == null)&#123;</div><div class="line">                    progressbar = new JProgressBar();//创建进度条实例,</div><div class="line">                    progressbar.setOrientation(JProgressBar.HORIZONTAL); //设置水平</div><div class="line">                    </div><div class="line">                    progressbar.setMinimum(0);                  //设置最小值</div><div class="line">                    progressbar.setMaximum(100);                //设置最大值</div><div class="line">                    progressbar.setValue(0);                            //设置当前进度</div><div class="line">                    progressbar.setBackground(Color.pink);//设置进度条颜色</div><div class="line">                    progressbar.setStringPainted(true);     //设置stringPainted属性值，该属性确定进度条是否应该呈现字符串</div><div class="line">                    progressbar.setBorderPainted(true);     // 设置 borderPainted 属性，如果进度条是否绘制其边框</div><div class="line">                    progressbar.setPreferredSize(new Dimension(300,20));//setSize是设定的固定大小，而setPreferredSize仅仅是设置最好的大小,new Dimension(500,20)，设置精准的尺寸</div><div class="line">                    </div><div class="line">                    progressbar.addChangeListener(this);    //注册Change事件</div><div class="line">                &#125;</div><div class="line">                    </div><div class="line">                    //创建容器</div><div class="line">                    Container contentPanel=frame.getContentPane();</div><div class="line">                    contentPanel.add(progressbar);</div><div class="line">                   </div><div class="line">                    //定时器</div><div class="line">                    if(timer == null)&#123;</div><div class="line">                        timer = new Timer(100,this);</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    //显示窗体</div><div class="line">                    frame.setVisible(true);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        </div><div class="line">        @Override   //监听按钮变化</div><div class="line">        public void actionPerformed(ActionEvent e) &#123;</div><div class="line">            if(e.getSource() ==timer)&#123; </div><div class="line">                int value =progressbar.getValue();</div><div class="line">                if(value &lt;100)&#123;</div><div class="line">                    progressbar.setValue(++value);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //事件监听变化，当ProgressBar类发生变化时候，则回调此函数【观察者模式-初级】</div><div class="line">        public void stateChanged(ChangeEvent e1) &#123;</div><div class="line">            System.out.println(&quot;ProgressBar发生变化了---&gt;&quot;+progressbar.getValue());</div><div class="line">            if(e1.getSource()==progressbar)&#123;</div><div class="line">                if(progressbar.getValue()==100)&#123;</div><div class="line">                    System.out.println(&quot;加载完毕，关闭窗体&quot;);</div><div class="line">                    frame.dispose();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //显示进度值</div><div class="line">//      public synchronized void GO(int pactent)&#123;</div><div class="line">//           new Thread(new MyThread()).start();  </div><div class="line">//          try&#123;</div><div class="line">//              Thread.sleep(5000);</div><div class="line">//          &#125;catch(Exception e)&#123;</div><div class="line">//              e.printStackTrace();</div><div class="line">//          &#125;</div><div class="line">//      &#125;</div><div class="line">        </div><div class="line">        //关闭窗体,释放所有资源</div><div class="line">        public void closeAll()&#123;</div><div class="line">            frame.dispose();</div><div class="line">            frame=null;</div><div class="line">            progressbar=null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args)&#123; </div><div class="line">    //1.测试进度条</div><div class="line">        ProgressBar app=new ProgressBar();</div><div class="line">        app.timer.start();</div><div class="line">//      for(int i=0;i&lt;100000000;i++)&#123;</div><div class="line">//          if(i%10000000&gt;=1)&#123;</div><div class="line">//              app.GO((i%10000000));</div><div class="line">//          &#125;       </div><div class="line">//      &#125;</div><div class="line">        //2.测试定时器</div><div class="line">//      Timer timer =new Timer();</div><div class="line">//      timer.schedule(new MyTask(),1*000,5*1000);//任务，1s后开始，每次5s</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //定时器类</div><div class="line">    class MyTask extends TimerTask&#123;</div><div class="line">        public  void run()&#123;</div><div class="line">            System.out.println(&quot;目前进度：&quot;+1+&quot;%&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    </div><div class="line">    //线程类</div><div class="line">//  class MyThread implements Runnable&#123;</div><div class="line">//</div><div class="line">//      public void run()&#123;</div><div class="line">//          progressbar.setValue(pacent);</div><div class="line">//          frame.repaint();</div><div class="line">//      &#125;</div><div class="line">//  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//  &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><br><br></p>
<p>Utils包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div></pre></td><td class="code"><pre><div class="line">package Utils;</div><div class="line"></div><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.BufferedWriter;</div><div class="line">import java.io.File;</div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.InputStreamReader;</div><div class="line">import java.io.OutputStreamWriter;</div><div class="line"></div><div class="line">/** 更新时间： 2016.12.18</div><div class="line"> *   </div><div class="line"> *  数据库封装类</div><div class="line"> *          方法1-读取</div><div class="line"> *          方法2-创建</div><div class="line"> *          方法3-追加内容</div><div class="line"> *              @author suvan</div><div class="line"> *  </div><div class="line"> *      扩展【cpdetector.jar包可以字段判断当前文件的内容编码】</div><div class="line"> */</div><div class="line">public class IOFile &#123;</div><div class="line">    </div><div class="line">        //方法1-1:读取文件内容【字节流】【只适用与读取英文，数字，无法设置编码格式】</div><div class="line">        public String rFileContent(String filePath) throws IOException&#123; //参数:文件路径,编码格式</div><div class="line">            </div><div class="line">            String content=&quot;&quot;;</div><div class="line">            InputStream inf=new FileInputStream(filePath);</div><div class="line">            for(int i=0;i&lt;inf.available();i++)&#123;</div><div class="line">                content+=(char)inf.read();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line"></div><div class="line">            return &quot;\&apos;&quot;+content+&quot;\&apos;&quot;;   </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法1-2:读取文件内容【字符流】【可以设置编码，读取中文，英文，数字】</div><div class="line">          public String rFileContent(String filePath,String encoding) throws IOException&#123; //参数: 路径,编码格式</div><div class="line">                    StringBuilder sb =new StringBuilder();</div><div class="line">                    </div><div class="line">                    File f=new File(filePath);//定位文件【小弊端，没有文件的话会自动新建】</div><div class="line">                    </div><div class="line">                    FileInputStream fip=new FileInputStream(f);</div><div class="line">                    InputStreamReader isw=new InputStreamReader(fip,encoding);</div><div class="line">                    BufferedReader br = new BufferedReader(isw);</div><div class="line">                    </div><div class="line">                    while(isw.ready())&#123;</div><div class="line">                        sb.append((char)isw.read());</div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                return sb.toString();   </div><div class="line">           &#125;        </div><div class="line">        </div><div class="line">         //方法2-3： 读取InputStream</div><div class="line">         public String readInputStream(InputStream is) throws IOException&#123;</div><div class="line">                </div><div class="line">             InputStreamReader isr = new InputStreamReader(is);</div><div class="line">             BufferedReader br = new BufferedReader(isr);  </div><div class="line">             </div><div class="line">             StringBuffer sbf = new StringBuffer();     </div><div class="line">             String tmp = &quot;&quot;;     </div><div class="line">                while((tmp = br.readLine())!=null)&#123;     </div><div class="line">                    sbf.append(tmp);     </div><div class="line">                &#125;     </div><div class="line">                return sbf.toString();</div><div class="line">         &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法3-1: 创建目录</div><div class="line">        public void createCatalog(String path,String catalogName)&#123;//参数：路径，目录名</div><div class="line">            </div><div class="line">            File d=new File(path+&quot;/&quot;+catalogName);</div><div class="line">            d.mkdir();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法3-2: 创建文件,写入内容</div><div class="line">        public void cFile(String path,String fileName,String encoding,String content) throws IOException&#123; //参数：路径,文件名.格式,编码格式,文件内容</div><div class="line">            File f=new File(path+&quot;/&quot;+fileName);</div><div class="line">            </div><div class="line">            FileOutputStream fop= new FileOutputStream(f);</div><div class="line">            OutputStreamWriter osw=new OutputStreamWriter(fop,encoding);</div><div class="line">            BufferedWriter writer = new BufferedWriter(osw);</div><div class="line">            writer.append(content);</div><div class="line">            writer.close();</div><div class="line">            fop.close();</div><div class="line">            System.out.println( &quot;*********************&quot;+fileName+&quot;成功创建！&quot;);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法3-3:追加文件内容【若不存在文件，则会在路径path下，新建filnName文件】</div><div class="line">        public void addContentFile(String path,String fileName,String content) throws IOException&#123; //参数：路径，文件名，追加的内容</div><div class="line">            File f=new File(path+&quot;/&quot;+fileName); </div><div class="line"></div><div class="line">            FileOutputStream fs = new FileOutputStream(f,true);</div><div class="line">            OutputStreamWriter osw = new OutputStreamWriter(fs);</div><div class="line">            BufferedWriter out = new BufferedWriter(osw);     </div><div class="line">                    </div><div class="line">            out.write(content);     </div><div class="line">            out.close();     </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">&#125;</div><div class="line"></div><div class="line">**********************************************************************</div><div class="line"></div><div class="line">package Utils;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.DriverManager;</div><div class="line">import java.sql.PreparedStatement;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.ResultSetMetaData;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.sql.Statement;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line"></div><div class="line">/** 更新时间： 2016.12.08</div><div class="line"> *   </div><div class="line"> *  数据库封装类</div><div class="line"> *          单例模式,【兼容MySQL(导入mysql-connector-java-5.1.38-bin.jar)和SQLite(导入sqlite-jdbc-3.15.1.jar)】</div><div class="line"> *          方法1-基础使用</div><div class="line"> *          方法2-查询 【SELECT】</div><div class="line"> *          方法3-插入【INSERT】</div><div class="line"> *          方法4-执行SQL语句</div><div class="line"> *              </div><div class="line"> *              @author suvan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class UseDB &#123;</div><div class="line">    </div><div class="line">    //静态成员变量，支持单例模式</div><div class="line">    private static  volatile UseDB udb = null;</div><div class="line">    </div><div class="line">    </div><div class="line">    private static String databaseType;  //数据库类型【例如:Mysql,Oracle,SQLite之类的】</div><div class="line">    </div><div class="line">    private String drive;                            //数据库驱动</div><div class="line">    private String link;                             //【mysql—JDBC链接+IP地址+端口】</div><div class="line"></div><div class="line">    private String username;                  //用户名</div><div class="line">    private String password;                    //密码</div><div class="line">    </div><div class="line">    private Connection conn=null;</div><div class="line">    private Statement st=null;</div><div class="line">    private PreparedStatement pst=null;</div><div class="line">    private ResultSet rs=null;</div><div class="line">    private ResultSetMetaData rsmd=null;//获取列的信息</div><div class="line">    </div><div class="line">    private String sql; //sql语句</div><div class="line">    </div><div class="line">        </div><div class="line">        //有参构造函数进行赋值</div><div class="line">        public UseDB(String dbType)&#123;</div><div class="line">        </div><div class="line">            this.databaseType=dbType.toLowerCase(); //设定当前工具类使用什么类型的数据库</div><div class="line">            </div><div class="line">            if(&quot;mysql&quot;.equals(databaseType))&#123;   //转换为小写匹配</div><div class="line">                </div><div class="line">                this.drive=&quot;com.mysql.jdbc.Driver&quot;;             </div><div class="line">                this.link=&quot;jdbc:mysql://127.0.0.1:3306/&quot;;     </div><div class="line">                this.username=&quot;root&quot;;                                   </div><div class="line">                this.password=&quot;liushuwei&quot;;                  </div><div class="line">                </div><div class="line">            &#125;else if(&quot;sqlite&quot;.equals(databaseType))&#123;</div><div class="line">                </div><div class="line">                this.drive=&quot;org.sqlite.JDBC&quot;;                       //数据库驱动</div><div class="line">                this.link=&quot;jdbc:sqlite:SQLite/&quot;;     //jdbc:sqlite:+路径【默认项目根目录/SQLite】+数据库名</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        //A-1.懒汉式(加双重校验锁):【单例设计模式，获取实例,节约系统资源，提高性能】 ,项目中使用UseDB udb =UseDB.getInstance(&quot;javareptile&quot;);获取实例</div><div class="line">        public static synchronized UseDB getInstance() throws IOException,ClassNotFoundException,SQLException&#123;</div><div class="line">            if(udb == null)&#123;</div><div class="line">                    synchronized(UseDB.class)&#123;</div><div class="line">                        if(udb ==null)&#123;  //2   双重校验锁，实现延迟加载，解决线程并发，使用volatile指令静止重拍序列化</div><div class="line">                            udb = new UseDB(databaseType);</div><div class="line">                            udb.connDatabase(&quot;javareptile&quot;);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">            return udb;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line"></div><div class="line">        //方法1: 连接database数据库</div><div class="line">        public void connDatabase(String database)  throws SQLException,ClassNotFoundException&#123; //参数：数据库名称</div><div class="line">             Class.forName(drive);</div><div class="line">             if(&quot;mysql&quot;.equals(databaseType))&#123;</div><div class="line">                 conn=DriverManager.getConnection(link+database+&quot;?characterEncoding=UTF-8&amp;useSSL=false&quot;,username,password); </div><div class="line">             &#125;else if(&quot;sqlite&quot;.equals(databaseType))&#123;</div><div class="line">                 conn=DriverManager.getConnection(link+database);   </div><div class="line">             &#125;</div><div class="line"></div><div class="line">             st=conn.createStatement();</div><div class="line">//           System.out.println(&quot;数据库连接成功......&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //访法1-2: 使用database数据库                                </div><div class="line">        public void useDatabase(String database) throws SQLException&#123;//参数: 数据库名称</div><div class="line">            </div><div class="line">                sql=&quot;USE &quot;+database+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line"></div><div class="line">            System.out.println(&quot;********************目前使用&quot;+database+&quot;数据库**************************&quot;);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法1-3关闭所有对象</div><div class="line">        public void closeAll() throws SQLException&#123;</div><div class="line">            </div><div class="line">            if(rs!=null)  rs.close();//关闭ResultSet</div><div class="line">            if(pst!=null)   pst.close();    //关闭PreparedStatement</div><div class="line">            if(st!=null) st.close();//关闭Statement</div><div class="line">            if(conn!=null)  conn.close(); //关闭Connection</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        </div><div class="line">//**************************************************************************************************************************************************************************        </div><div class="line">        </div><div class="line">        //方法2-1:查询table表中record字段满足condition条件的值,返回查询内容【字段值】 ，不能用于 * 查询</div><div class="line">        public String select(String table,String record,String condition)throws SQLException&#123;//参数: 表名,字段名,WHERE条件</div><div class="line">                StringBuilder sb= new StringBuilder();</div><div class="line">                </div><div class="line">                sql=&quot;SELECT &quot;+record+&quot; FROM &quot; +table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                ResultSetMetaData rsm =rs.getMetaData(); //获得列集</div><div class="line">                while(rs.next())&#123;</div><div class="line">                    sb.append(rs.getString(record));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-2:查询table表中record字段满足condition条件的值,打印到控制台，并返回一个字符串【&amp;换列】</div><div class="line">                public String select(String table,String record,String condition,char o)throws SQLException&#123;//参数: 表名,字段名,WHERE条件</div><div class="line">                        StringBuilder sb= new StringBuilder();</div><div class="line">                        </div><div class="line">                        sql=&quot;SELECT * FROM &quot; +table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                        rs=st.executeQuery(sql);</div><div class="line">                        rsmd=rs.getMetaData();</div><div class="line">                        while(rs.next())&#123;</div><div class="line">                            for(int i=1;i&lt;=rsmd.getColumnCount();i++)&#123;  //获取总列数 数据字段从1开始</div><div class="line">                                if(rs.getString(i).equals(&quot;&quot;))&#123;</div><div class="line">                                    sb.append(&quot;-0-&amp;&quot;);</div><div class="line">                                &#125;else&#123;</div><div class="line">                                    sb.append(rs.getString(i)+&quot;&amp;&quot;);</div><div class="line">                                &#125;</div><div class="line">                                System.out.print(rs.getString(i)+&quot;\t&quot;);  //输出每个字段值，间隔一个Tab长度</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    return sb.toString();</div><div class="line">                &#125;</div><div class="line">        </div><div class="line">        //方法2-3:查询table所有数据的数据,打印到控制台，并返回一个字符串 【&amp;换列，##换行】</div><div class="line">        public String select(String table) throws SQLException&#123;//参数: 表名</div><div class="line">                StringBuilder sb= new StringBuilder();</div><div class="line">                </div><div class="line">                sql=&quot;SELECT * FROM &quot; +table+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                rsmd =rs.getMetaData(); //获得列集</div><div class="line">                </div><div class="line">                    while(rs.next())&#123;//光标移动</div><div class="line">                        for(int i=1;i&lt;=rsmd.getColumnCount();i++)&#123;  //获取总列数</div><div class="line">                            sb.append(rs.getString(i)+&quot;&amp;&quot;);</div><div class="line">                            System.out.print(rs.getString(i)+&quot;\t&quot;);  //输出每个字段值，间隔一个Tab长度</div><div class="line">                        &#125;</div><div class="line">                        System.out.println();//换行</div><div class="line">                        sb.append(&quot;##&quot;);</div><div class="line">                    &#125;</div><div class="line">    </div><div class="line">            </div><div class="line">                return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">            </div><div class="line">        </div><div class="line">        //方法2-4:查询table表,record字段的所有记录值(所有行)【##换行】</div><div class="line">        public String selectAllColumn(String table,String record) throws SQLException&#123;</div><div class="line">            StringBuilder sb= new StringBuilder();</div><div class="line">            </div><div class="line">             sql=&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot;;&quot;;</div><div class="line">             rs=st.executeQuery(sql);</div><div class="line">             while(rs.next())&#123;</div><div class="line">                 sb.append(rs.getString(1)+&quot;##&quot;);</div><div class="line">             &#125;</div><div class="line">             </div><div class="line">            return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-5:查询table表,record字段的所有记录值(所有行),用ArrayList保存</div><div class="line">                public List&lt;String&gt; selectAllColumn_list(String table,String record) throws SQLException&#123;</div><div class="line">                    List&lt;String&gt; list = new ArrayList&lt;String&gt;();</div><div class="line">                     sql=&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot;;&quot;;</div><div class="line">                     rs=st.executeQuery(sql);</div><div class="line">                     while(rs.next())&#123;</div><div class="line">                         list.add(rs.getString(1));</div><div class="line">                     &#125;</div><div class="line">                     </div><div class="line">                    return list;</div><div class="line">                &#125;</div><div class="line">        </div><div class="line">        //方法2-6：查询table表,满足content条件【具有唯一性】，有记录的字段直接返回记录值,没有则返回null</div><div class="line">        public String selectIfExist_CheckRecord(String table,String record,String condition) throws SQLException&#123;//参数: 表名,字段名，条件</div><div class="line">                </div><div class="line">                sql=&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                String record_content=null;</div><div class="line">                if(rs.next())&#123;</div><div class="line">                    record_content=rs.getString(1);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            return record_content;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        //方法2-7:查询table表,根据条件condition【具有唯一性】,判断整行记录那个字段拥有记录，有记录的字段返回字段名和值【&amp;&amp;&amp;&amp;&amp;分隔】</div><div class="line">        public ArrayList&lt;String&gt; selectIfExist_CheckRecord(String table,String condition,char o) throws SQLException&#123;//参数: 表名，条件,*</div><div class="line">            </div><div class="line">            ArrayList&lt;String&gt; al = new ArrayList&lt;String&gt;();</div><div class="line">                </div><div class="line">                sql=&quot;SELECT * FROM &quot;+table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                System.out.println(sql);</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                rsmd=rs.getMetaData();</div><div class="line"></div><div class="line">                while(rs.next())&#123;</div><div class="line">                    for(int i=1;i&lt;=rsmd.getColumnCount();i++)&#123;  </div><div class="line">                        al.add(rsmd.getColumnName(i));//只要列名</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">            return al;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-8: 查询table表,满足条件condition的,返回规定范围行数的记录的列名【&amp;分隔每列】</div><div class="line">        public ArrayList&lt;String&gt; selectAskinformation_Scope(String table,String condition,String scope) throws SQLException&#123; //参数:表名,条件,范围行数【使用-进行分隔,例如1-5】</div><div class="line">//              StringBuilder sb= new StringBuilder();</div><div class="line">                ArrayList&lt;String&gt; alist = new  ArrayList&lt;String&gt;();</div><div class="line">                </div><div class="line">                String [] scope_arrays =scope.split(&quot;-&quot;);</div><div class="line">                int begin=Integer.parseInt(scope_arrays[0]);</div><div class="line">                int end=Integer.parseInt(scope_arrays[1]);</div><div class="line">                </div><div class="line">                sql=&quot;SELECT * FROM &quot;+table+&quot; WHERE &quot;+condition+&quot;;&quot;;</div><div class="line">                rs=st.executeQuery(sql);</div><div class="line">                rsmd=rs.getMetaData();</div><div class="line">                while(rs.next())&#123;</div><div class="line">                    for(int i=begin;i&lt;=end;i++)&#123; //遍历范围区间的字段</div><div class="line">                        if(rs.getString(i)==null || rs.getString(i).length()&lt;2) continue;</div><div class="line">                        alist.add(rsmd.getColumnName(i));//只要列名</div><div class="line">                    &#125;       </div><div class="line">                &#125;</div><div class="line"></div><div class="line">            return alist;   </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-9：查询table所有记录总数，返回记录总数</div><div class="line">        public int select_allCount(String table) throws SQLException&#123;//参数：表名</div><div class="line">            </div><div class="line">            </div><div class="line">            sql=&quot;SELECT count(*)  FROM &quot; +table+&quot;;&quot;;</div><div class="line">            rs=st.executeQuery(sql);</div><div class="line">            rs.next();</div><div class="line">            </div><div class="line">            int recordCount =Integer.parseInt(rs.getString(1));</div><div class="line"></div><div class="line">            return recordCount;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">//**************************************************************************************************************************************************************************</div><div class="line">        </div><div class="line">        //方法3-1: 往table表插入整行数据【按顺序依次匹配第1列到最后1列】</div><div class="line">        public void insert(String table,String content) throws SQLException&#123;//参数: 表名,内容</div><div class="line">                    String sql=&quot;INSERT OR IGNORE  INTO  &quot;+table+&quot; VALUES(&quot;+content+&quot;);&quot;;//去重插入【应用于SQLite】遇到重复就跳过OR IGNORE</div><div class="line">                    int i=st.executeUpdate(sql);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法3-2: 往table表record字段,插入一行content数据【少量数据(标题，日期等)】【多字段插入   ,分隔字段     ,号分隔内容】</div><div class="line">        public void insert(String table,String record,String content) throws SQLException&#123;//参数: 表名,字段,内容</div><div class="line">                    String sql=&quot;INSERT INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+content+&quot;);&quot;;</div><div class="line">                    int i=st.executeUpdate(sql);</div><div class="line">                    if(i!=-1)&#123;</div><div class="line">//                      System.out.println(&quot;*****************&quot;+table+&quot;表INSERT成功！****************&quot;);</div><div class="line">                    &#125;</div><div class="line">        &#125;</div><div class="line">                </div><div class="line">        //方法3-3:往table表record，插入一行content数据 【大量数据(文章，文本内容)】【,分隔字段 &amp;&amp;&amp;&amp;&amp; 分隔内容   ,分隔占位符】</div><div class="line">        public void insert(String table,String record,String content,String mark) throws SQLException, UnsupportedEncodingException&#123;//参数值: 表名,字段,内容，占位符(?)</div><div class="line">//                  content =new String(content.getBytes(),&quot;UTF-8&quot;);</div><div class="line">            </div><div class="line">                    String [] content_Arrays=content.split(&quot;&amp;&amp;&amp;&amp;&amp;&quot;);//分隔内容存入数组</div><div class="line">                    String [] mark_Arrays = mark.split(&quot;,&quot;);</div><div class="line">                    </div><div class="line">                    //判断是否存在相同记录，如果存在则不执行插入【以第一条record为准】</div><div class="line">                    String first_record=record.substring(0,record.indexOf(&quot;,&quot;));</div><div class="line">                    sql  =&quot;SELECT &quot;+record+&quot; FROM &quot;+table+&quot; WHERE &quot;+first_record+&quot;=&apos;&quot;+content_Arrays[0]+&quot;&apos;;&quot;;</div><div class="line">                    rs=st.executeQuery(sql);</div><div class="line">                        </div><div class="line">                        if(rs.next())&#123;//光标移动</div><div class="line">                            //存在相同记录</div><div class="line">                            System.out.println(&quot;**********************很抱歉，&quot;+table+&quot;表已经存在&quot;+content_Arrays[0]+&quot;记录,INSERT失败,不进行重复插入！*************************8888&quot;);</div><div class="line">                        &#125;else&#123;</div><div class="line">                            //不存在相同记录</div><div class="line">//                          System.out.println(&quot;**********************&quot;+table+&quot;表中不存在&quot;+content_Arrays[0]+&quot;记录,正在进行INSERT。。。。。。。。。。。。。&quot;);</div><div class="line">                            sql=&quot;INSERT INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+mark+&quot;);&quot;;</div><div class="line">                            </div><div class="line">                            pst=conn.prepareStatement(sql);</div><div class="line">                            </div><div class="line">                            for(int i=1;i&lt;=mark_Arrays.length;i++)&#123;//根据占位符个数【?的数量】进行循环: ?号个数            </div><div class="line">                                pst.setString(i,mark_Arrays[i-1]);</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                            pst.executeUpdate();</div><div class="line">//                          System.out.println(&quot;*****************&quot;+table+&quot;表INSERT成功！****************&quot;);</div><div class="line">                        &#125;</div><div class="line">            &#125;</div><div class="line">        </div><div class="line">        //方法3-4(去重插入1)： 添加唯一索引,使用INSERT INTO ... ON DUPLICATE KEY UPDATE ..【重复插入时更新】</div><div class="line">        public void insertUpdate(String table,String record,String content,String UpdateConent) throws SQLException&#123;//参数: 表名,字段,内容,更新内容</div><div class="line">            String sql=&quot;INSERT INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+content+&quot;) ON DUPLICATE KEY UPDATE &quot;+UpdateConent+&quot;;&quot;;</div><div class="line">            int i=st.executeUpdate(sql);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法3-5(去重插入2): 添加唯一索引,使用INSERT IGNORE INTO...【存在相同数据，就跳过该数据】</div><div class="line">        public void insertInGore(String table,String record,String content) throws SQLException&#123;//参数: 表名,字段,内容,更新内容</div><div class="line">                String sql=&quot;INSERT IGNORE INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+content+&quot;);&quot;;</div><div class="line">                int i=st.executeUpdate(sql);</div><div class="line">        &#125;       </div><div class="line">        </div><div class="line">        //方法3-6(去重插入3):添加唯一索引,使用REPLACE INTO【不重复和INSERT的功能一样,有重复就使用新纪录值替换原来记记录值】</div><div class="line">                                                                                         //【表中必须有唯一索引，而且不为空字段，否则就和INSERT完全一样】【将DELETE和INSERT和操作合二唯一】</div><div class="line">        public void insertReplace(String table,String record,String content) throws SQLException&#123;//参数: 表名,字段,内容</div><div class="line">            String sql=&quot;REPLACE INTO &quot;+table+&quot;(&quot;+record+&quot;) VALUES(&quot;+content+&quot;);&quot;;</div><div class="line">            int i=st.executeUpdate(sql);</div><div class="line">            //执行REPLACE后，系统返回所受影响行数，=1说明表中没有重复记录，=2则说明有，&gt;2说明有多个唯一索引，有多条记录被删除和插入。</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法3-6(去重插入4)：使用dual【虚表去重】【度娘度娘....】</div><div class="line">        </div><div class="line"></div><div class="line">//**************************************************************************************************************************************************************************</div><div class="line">        </div><div class="line">        //方法4-1：【执行创建语句】</div><div class="line">        public void createSQL(String sql) throws SQLException&#123;</div><div class="line">            st.executeUpdate(sql);  </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法4-2：【执行插入语句】</div><div class="line">        public void insertSQL(String sql) throws SQLException&#123;</div><div class="line">            st.executeUpdate(sql);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法4-3：【执行查找语句】</div><div class="line">        public String selectSQL(String sql) throws SQLException&#123;</div><div class="line">            StringBuilder sb = new StringBuilder();</div><div class="line">            </div><div class="line">            rs = st.executeQuery(sql);</div><div class="line">            rsmd=rs.getMetaData();</div><div class="line">            while(rs.next())&#123;</div><div class="line">                for(int i=1;i&lt;=rsmd.getColumnCount();i++)&#123;</div><div class="line">                    System.out.print(rsmd.getColumnName(i)+&quot;:&quot;+rs.getString(i)+&quot;\t&quot;);</div><div class="line">                    sb.append(rs.getString(i)+&quot;&amp;&amp;&quot;);</div><div class="line">                &#125;</div><div class="line">                System.out.println();//换行</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法4-4:【执行更新操作】</div><div class="line">        public void updateSQL(String sql) throws SQLException&#123;</div><div class="line">            conn.setAutoCommit(false);//禁止自动提交</div><div class="line">            st.executeUpdate(sql);</div><div class="line">            conn.commit();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法4-5:【执行删除操作】</div><div class="line">        public void deleteSQL(String sql) throws SQLException&#123;</div><div class="line">            conn.setAutoCommit(false);//禁止自动提交</div><div class="line">            st.executeUpdate(sql);</div><div class="line">            conn.commit();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //**************************************************************************************************************************************************************************</div><div class="line">        </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">**********************************************************************</div><div class="line"></div><div class="line">package Utils;</div><div class="line"></div><div class="line">import java.io.File;</div><div class="line">import java.io.IOException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashMap;</div><div class="line"></div><div class="line">import jxl.Cell;</div><div class="line">import jxl.Sheet;</div><div class="line">import jxl.Workbook;</div><div class="line">import jxl.read.biff.BiffException;</div><div class="line">import jxl.write.Label;</div><div class="line">import jxl.write.WritableSheet;</div><div class="line">import jxl.write.WritableWorkbook;</div><div class="line">import jxl.write.WriteException;</div><div class="line"></div><div class="line">/**更新时间:2016.12.13</div><div class="line"> *          操作Excel工作薄</div><div class="line"> *              方法1：使用jxl.jar   【创建和读取excel】</div><div class="line"> *              方法2：使用poi.jar 【创建和读取excel】</div><div class="line"> *      @author Suvan</div><div class="line"> */</div><div class="line">public class UseExcel &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    //方法1-2：创建Excel文件，写入数据</div><div class="line">    public   void createExcel() throws IOException,WriteException&#123;</div><div class="line">        //1.新建文件，设置目录</div><div class="line">        File xlsFile = new File(&quot;C:\\Users\\Liu-shuwei\\Desktop\\jxl.xls&quot;); </div><div class="line">        </div><div class="line">        //2.创建工作簿</div><div class="line">        WritableWorkbook workbook = Workbook.createWorkbook(xlsFile);</div><div class="line">        </div><div class="line">        //3.创建工作表</div><div class="line">         WritableSheet sheet = workbook.createSheet(&quot;sheet1&quot;, 0);</div><div class="line">          for (int row = 0; row &lt; 10; row++)&#123;   </div><div class="line">             for (int col = 0; col &lt; 10; col++) &#123;</div><div class="line">                 </div><div class="line">                 //第col列【从0开始】，第row行【从0开始】，数据</div><div class="line">                 Label lb = new Label(col,row,&quot;数据【&quot;+col+&quot;列&quot;+row+&quot;行】&quot;);</div><div class="line">                 sheet.addCell(lb);  // 向工作表中添加数据</div><div class="line">             &#125;</div><div class="line">          &#125;</div><div class="line">          </div><div class="line">          //4.写入数据</div><div class="line">          workbook.write();</div><div class="line">          </div><div class="line">          //5.关闭流</div><div class="line">          workbook.close();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法1-2：读取Excel</div><div class="line">    public  HashMap [] getExcel(String filePath) throws IOException,BiffException&#123;  //返回数组[HashMap&lt;“rows”，ArrayList&gt;]  </div><div class="line">    </div><div class="line">        //1.定位文件</div><div class="line">        File xlsFile = new File(filePath);</div><div class="line">        </div><div class="line">        //2.获得工作薄对象</div><div class="line">        Workbook workbook = Workbook.getWorkbook(xlsFile);</div><div class="line">        </div><div class="line">        //3.获得所有工作表</div><div class="line">        Sheet [] sheets = workbook.getSheets();</div><div class="line">        </div><div class="line">            //构建用于保存数据的数组,无序哈希表,有序集合</div><div class="line">            HashMap [] sheets_map=new HashMap[sheets.length];                       </div><div class="line">            </div><div class="line">        </div><div class="line">        //4.遍历工作表</div><div class="line">        if(sheets != null)&#123;</div><div class="line">            for(int s =0;s&lt;sheets.length;s++)&#123;</div><div class="line">                </div><div class="line">                //读取所有rows【所有行】     </div><div class="line">                HashMap&lt;Integer,ArrayList&gt; rows_map = new HashMap&lt;Integer,ArrayList&gt;();</div><div class="line">                for(int row =0 ;row&lt;sheets[s].getRows();row++)&#123;</div><div class="line">                    Cell    [] cells =sheets[s].getRow(row);                                        //获取整行数据,保存进数组,Sheet.getColumn()是获取整列</div><div class="line">                    </div><div class="line">                    </div><div class="line">                    //读取所有列列数据</div><div class="line">                    ArrayList&lt;String&gt; cols_list = new ArrayList&lt;String&gt;();</div><div class="line">                    for(int col = 0;col &lt; sheets[s].getColumns();col++)&#123;</div><div class="line">//                      System.out.printf(&quot;%10s&quot;,sheets[s].getCell(col,row).getContents());</div><div class="line">                        cols_list.add(sheets[s].getCell(col,row).getContents());        //储存每列【每个单元格】数据</div><div class="line">                    &#125;</div><div class="line">                    rows_map.put(row, cols_list);                                                   //储存每行数据                            </div><div class="line">                &#125;</div><div class="line">                sheets_map[s]=rows_map;                                                          //储存每个工作表示数据</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line"></div><div class="line">        workbook.close();</div><div class="line">        return sheets_map;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //方法1-3：读取UseExcel表格,返回拥有的工作表名</div><div class="line">    public ArrayList&lt;String&gt; getExcelSheetsName(String filePath) throws IOException, BiffException&#123;</div><div class="line">        //1.创建ArrayList对象用于储存表名</div><div class="line">        ArrayList&lt;String&gt; alist= new ArrayList&lt;String&gt;();</div><div class="line">        </div><div class="line">    </div><div class="line">        //2.定位Excel,获得工作薄对象</div><div class="line">        File xlsFile = new File(filePath);</div><div class="line">        Workbook workbook = Workbook.getWorkbook(xlsFile);</div><div class="line">        </div><div class="line">        //3.获取所有工作表名</div><div class="line">        for(Sheet sheet:workbook.getSheets())&#123;</div><div class="line">            alist.add(sheet.getName());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return alist;</div><div class="line">    &#125;</div><div class="line">//************************************************************************************************************************</div><div class="line">    //方法2-1：poi创建excel</div><div class="line">//  public static void createExcel_poi() throws IOException&#123;</div><div class="line">//          //1.创建工作簿</div><div class="line">//          HSSFWorkbook workbook =new HSSFWorkbook();</div><div class="line">//          </div><div class="line">//          //2.创建工作表</div><div class="line">//          HSSFSheet sheet = workbook.createSheet(&quot;suvan&quot;);</div><div class="line">//          for(int row =0;row&lt;10;row++)&#123;</div><div class="line">//              HSSFRow rows = sheet.createRow(row);</div><div class="line">//              for(int col=0;col&lt;10;col++)&#123;</div><div class="line">//                  //向工作表添加数据</div><div class="line">//                  rows.createCell(col).setCellValue(&quot;数据第&quot;+row+&quot;行-&quot;+col+&quot;列&quot;);</div><div class="line">//              &#125;</div><div class="line">//          &#125;</div><div class="line">//          </div><div class="line">//          //3.创建文件</div><div class="line">//          File xlsFile = new File(&quot;C:\\Users\\Liu-shuwei\\Desktop\\suvan.xls&quot;);</div><div class="line">//          FileOutputStream xlsStream = new FileOutputStream(xlsFile);</div><div class="line">//          workbook.write(xlsStream);</div><div class="line">//          workbook.close();</div><div class="line">//  &#125;</div><div class="line">//  </div><div class="line">    //方法2-2:poi读取excel文件</div><div class="line">//  public static void readExcel_poi() throws EncryptedDocumentException, InvalidFormatException, IOException&#123;</div><div class="line">//      //1.定位文件</div><div class="line">//      File xlsFile = new File(&quot;C:\\Users\\Liu-shuwei\\Desktop\\第5周-8.23.xls&quot;);</div><div class="line">//      //2.获得工作薄【WorkbookFactory位于poi-ooxml-3.14-20160307.jar】</div><div class="line">//      org.apache.poi.ss.usermodel.Workbook workbook =WorkbookFactory.create(xlsFile);</div><div class="line">//      //3.获得工作表个数</div><div class="line">//      int sheetCount = workbook.getNumberOfSheets();</div><div class="line">//      ///4.遍历工作表</div><div class="line">//      for(int i=0;i&lt;sheetCount;i++)&#123;</div><div class="line">//           //a.选择工作表</div><div class="line">//          Sheet sheet = workbook.getSheetAt(i);</div><div class="line">//          </div><div class="line">//          //b.获取总行数和列数</div><div class="line">//          int rows =sheet.getLastRowNum()+1;          //总行数</div><div class="line">//          Row tmp = sheet.getRow(0);</div><div class="line">//          if(tmp == null) continue;</div><div class="line">//          int cols = tmp.getPhysicalNumberOfCells();  //总列数</div><div class="line">//</div><div class="line">//          //c.读取数据</div><div class="line">//          for(int row =0;row&lt;rows;row++)&#123;</div><div class="line">//              Row r = sheet.getRow(row);</div><div class="line">//              for(int col=0;col&lt;cols;col++)&#123;</div><div class="line">//                  if(r.getCell(col)!=null)&#123;</div><div class="line">//                      r.getCell(col).setCellType(Cell.CELL_TYPE_STRING); //设置Cell类型，然后就可以把纯数字作为String类型读出来</div><div class="line">//                      System.out.printf(&quot;%10s&quot;,r.getCell(col).getStringCellValue());</div><div class="line">//                  &#125;</div><div class="line">//              &#125;</div><div class="line">//      </div><div class="line">//              System.out.println();//换行</div><div class="line">//          &#125;</div><div class="line">//      &#125;</div><div class="line">//      </div><div class="line">//      workbook.close();</div><div class="line">//  &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">**********************************************************************</div><div class="line"></div><div class="line">package Utils;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.regex.Matcher;</div><div class="line">import java.util.regex.Pattern;</div><div class="line"></div><div class="line">/**更新时间:2016.12.03</div><div class="line"> *          操作字符串</div><div class="line"> *              方法1：转换</div><div class="line"> *              方法2：判断</div><div class="line"> *              方法3：正则表达式</div><div class="line"> *              方法4：格式化</div><div class="line"> *              方法5：获取</div><div class="line"> *      @author Suvan</div><div class="line"> */</div><div class="line">public class UseString &#123;</div><div class="line">    </div><div class="line">    //方法1-1:将首字母变为大写</div><div class="line">        public String UpFirstString(String content)&#123; //参数: 内容</div><div class="line">            String firstLetter=content.substring(0,1);</div><div class="line">            content=content.replaceFirst(firstLetter,firstLetter.toUpperCase());//替换首字母</div><div class="line">            </div><div class="line">            return content;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法1-2:将首字母变为小写</div><div class="line">        public String LowFirstString(String content)&#123; //参数: 内容</div><div class="line">            String firstLetter=content.substring(0,1);</div><div class="line">            content=content.replaceFirst(firstLetter,firstLetter.toLowerCase());//替换首字母</div><div class="line">            </div><div class="line">            return content;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法1-3:将字符串变为int类型</div><div class="line">        public int getInt(String content)&#123;</div><div class="line">            return Integer.parseInt(content);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法1-4:字符串转码</div><div class="line">        public String getTranscoding(String content,String encoding) throws IOException&#123;</div><div class="line">            byte[] t_content = content.getBytes(encoding);</div><div class="line">            String newS = new String(t_content,encoding);</div><div class="line">            return newS;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法2-1：判断num编号属否在scope区间里面，返回布尔类型参数【true--属于，false--不属于】</div><div class="line">        public Boolean getMinMaxScope(String scope,int num)&#123;//参数：范围，编号</div><div class="line">            Boolean sign = false;//判断标识，默认为true</div><div class="line">            </div><div class="line">            String [] scope_arrays = scope.split(&quot;-&quot;);</div><div class="line">            int minScope =Integer.parseInt(scope_arrays[0]);</div><div class="line">            int maxScope =Integer.parseInt(scope_arrays[1]);</div><div class="line">            </div><div class="line">                if(minScope &lt;= num &amp;&amp; num &lt;= maxScope)&#123;</div><div class="line">                    sign =true;</div><div class="line">                &#125;</div><div class="line">            </div><div class="line">            return sign;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法3-1：正则表达式</div><div class="line">        public ArrayList&lt;String&gt; getRegexResult(String content,String pattern)&#123;</div><div class="line">                </div><div class="line">                ArrayList&lt;String&gt; alist = new ArrayList&lt;String&gt;();</div><div class="line">            //1.创建Pattern对象</div><div class="line">                Pattern p = Pattern.compile(pattern);</div><div class="line">            </div><div class="line">                //2.创建Matcher对象</div><div class="line">                Matcher m = p.matcher(content);</div><div class="line">                if(m.find())&#123;  //如果有发现的话</div><div class="line">                    System.out.println(m.groupCount());</div><div class="line">                    for(int i=0;i&lt;m.groupCount();i++)&#123;</div><div class="line">                        System.out.println(m.group(i));</div><div class="line">                        alist.add(m.group(i));</div><div class="line">                    &#125;</div><div class="line">                &#125;else&#123;</div><div class="line">                    System.out.println(&quot;很抱歉,没有找到任何匹配&quot;);</div><div class="line">                &#125;</div><div class="line">                System.out.println(&quot;***********************************************&quot;);</div><div class="line">                return alist;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法4-1：格式化输出语句【应放在项目里的使用类】</div><div class="line">        private void print(String msg, Object... args) &#123;</div><div class="line">            //%d是一个占位符，标识一个字符串型的数据，%10d是数字的左侧留10个空格，对齐用 %s也是一个占位符，标识一个字符串型的数据</div><div class="line">            System.out.println(String.format(msg, args));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法4-2：得到拼接的SQL语句</div><div class="line">        public String getSQL(ArrayList&lt;String&gt; data_list)&#123;</div><div class="line">            StringBuilder sb =new StringBuilder(&quot;&apos;&quot;);</div><div class="line">            for(int c=0;c&lt;data_list.size();c++)&#123;</div><div class="line">                sb.append(data_list.get(c)+&quot;&apos;,&apos;&quot;);</div><div class="line">            &#125;</div><div class="line">            sb.substring(sb.lastIndexOf(&quot;,&quot;));</div><div class="line">            </div><div class="line">            return sb.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //方法5-1：</div><div class="line">        public long getTime()&#123;</div><div class="line">            //获得的是自1970-1-01 00:00:00.000 到当前时刻的时间距离【毫秒】</div><div class="line">            return System.currentTimeMillis();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><br><br><br><br><br></p>
<h1 id="5-3版【2017-1-9】"><a href="#5-3版【2017-1-9】" class="headerlink" title="5.3版【2017.1.9】"></a>5.3版【2017.1.9】</h1><p><br></p>
<p>5.3更新：</p>
<ol>
<li>导入完excel数据，实现主窗体实现异步刷新【导入完可以直接生成】</li>
<li>JFileChooser默认启动路径为电脑桌面</li>
<li>加入事务处理，SQLite批量插入速度提升10倍+</li>
<li>优化写细节操作，提升操作友好度</li>
<li>自动生成文档(部分生成详细情况可以自己试下)【若出现-的顺序不同，则需要走自主调整excel表的顺序】</li>
</ol>
<p><br><br></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><br></p>
<ol>
<li>在main.AlterContent加入了生成文档操作</li>
<li>main.GoTask删除了MYSQL的流程</li>
<li>Utils.UseDB的insert取消自动提交，需要自主根据需要commit事务</li>
<li>UI.insertUI里加入成员变量，可控制mainUI</li>
</ol>
<hr>
<p><br><br><br><br><br></p>
<h1 id="5-4版【2017-1-9下午】"><a href="#5-4版【2017-1-9下午】" class="headerlink" title="5.4版【2017.1.9下午】"></a>5.4版【2017.1.9下午】</h1><p><br></p>
<p>5.3更新：</p>
<ol>
<li>添加双模式生成【分配模式 and 集成模式】,文件目录以(入库[双模式],接口(生成包名)，文档分开布局)</li>
<li>文档依旧保留开头编号【用于区分，以后要删除再自己删除】</li>
<li>该版本保留5.3特性，建议把自己相应任务编号内的添加进去，再用此表导入生成.</li>
</ol>
<p><br><br></p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p><br></p>
<ol>
<li>在main.GoTask加入组双模式</li>
<li>UI.mainUI里面加入文件ButtonGroup(按钮组)和JRadioButton(单选按钮),并添加相应事件逻辑</li>
</ol>
<hr>
<p><br><br><br><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;版本1-0【2016-8-27】&quot;&gt;&lt;a href=&quot;#版本1-0【2016-8-27】&quot; class=&quot;headerlink&quot; title=&quot;版本1.0【2016.8.27】&quot;&gt;&lt;/a&gt;版本1.0【2016.8.27】&lt;/h1&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="MyProject" scheme="http://suvan-l.github.io/categories/MyProject/"/>
    
    
      <category term="MyProject" scheme="http://suvan-l.github.io/tags/MyProject/"/>
    
  </entry>
  
</feed>
